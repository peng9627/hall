// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameBase.proto

package game.mode;

public final class GameBase {
    private GameBase() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    /**
     * <pre>
     * 消息id
     * </pre>
     * <p>
     * Protobuf enum {@code OperationType}
     */
    public enum OperationType
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * 通用
         * </pre>
         * <p>
         * <code>ERROR = 0;</code>
         */
        ERROR(0),
        /**
         * <pre>
         * 大厅
         * </pre>
         * <p>
         * <code>LOGIN = 10;</code>
         */
        LOGIN(10),
        /**
         * <pre>
         * 创建房间
         * </pre>
         * <p>
         * <code>CREATE_ROOM = 11;</code>
         */
        CREATE_ROOM(11),
        /**
         * <pre>
         * 查询数据
         * </pre>
         * <p>
         * <code>QUERY = 12;</code>
         */
        QUERY(12),
        /**
         * <pre>
         * 麻将
         * </pre>
         * <p>
         * <code>CONNECTION = 20;</code>
         */
        CONNECTION(20),
        /**
         * <code>ROOM_INFO = 21;</code>
         */
        ROOM_INFO(21),
        /**
         * <code>SEAT_INFO = 22;</code>
         */
        SEAT_INFO(22),
        /**
         * <code>GAME_INFO = 23;</code>
         */
        GAME_INFO(23),
        /**
         * <pre>
         * 准备
         * </pre>
         * <p>
         * <code>READY = 24;</code>
         */
        READY(24),
        /**
         * <pre>
         * 就绪
         * </pre>
         * <p>
         * <code>COMPLETED = 25;</code>
         */
        COMPLETED(25),
        /**
         * <pre>
         * 通知
         * </pre>
         * <p>
         * <code>ACTION = 26;</code>
         */
        ACTION(26),
        /**
         * <pre>
         * 通知回合
         * </pre>
         * <p>
         * <code>ROUND = 27;</code>
         */
        ROUND(27),
        /**
         * <pre>
         * 询问
         * </pre>
         * <p>
         * <code>ASK = 28;</code>
         */
        ASK(28),
        /**
         * <pre>
         * 退出
         * </pre>
         * <p>
         * <code>EXIT = 29;</code>
         */
        EXIT(29),
        /**
         * <pre>
         * 结果
         * </pre>
         * <p>
         * <code>RESULT = 30;</code>
         */
        RESULT(30),
        /**
         * <pre>
         * 喇叭
         * </pre>
         * <p>
         * <code>MESSAGE = 31;</code>
         */
        MESSAGE(31),
        /**
         * <pre>
         * 回放
         * </pre>
         * <p>
         * <code>REPLAY = 32;</code>
         */
        REPLAY(32),
        UNRECOGNIZED(-1),;

        /**
         * <pre>
         * 通用
         * </pre>
         * <p>
         * <code>ERROR = 0;</code>
         */
        public static final int ERROR_VALUE = 0;
        /**
         * <pre>
         * 大厅
         * </pre>
         * <p>
         * <code>LOGIN = 10;</code>
         */
        public static final int LOGIN_VALUE = 10;
        /**
         * <pre>
         * 创建房间
         * </pre>
         * <p>
         * <code>CREATE_ROOM = 11;</code>
         */
        public static final int CREATE_ROOM_VALUE = 11;
        /**
         * <pre>
         * 查询数据
         * </pre>
         * <p>
         * <code>QUERY = 12;</code>
         */
        public static final int QUERY_VALUE = 12;
        /**
         * <pre>
         * 麻将
         * </pre>
         * <p>
         * <code>CONNECTION = 20;</code>
         */
        public static final int CONNECTION_VALUE = 20;
        /**
         * <code>ROOM_INFO = 21;</code>
         */
        public static final int ROOM_INFO_VALUE = 21;
        /**
         * <code>SEAT_INFO = 22;</code>
         */
        public static final int SEAT_INFO_VALUE = 22;
        /**
         * <code>GAME_INFO = 23;</code>
         */
        public static final int GAME_INFO_VALUE = 23;
        /**
         * <pre>
         * 准备
         * </pre>
         * <p>
         * <code>READY = 24;</code>
         */
        public static final int READY_VALUE = 24;
        /**
         * <pre>
         * 就绪
         * </pre>
         * <p>
         * <code>COMPLETED = 25;</code>
         */
        public static final int COMPLETED_VALUE = 25;
        /**
         * <pre>
         * 通知
         * </pre>
         * <p>
         * <code>ACTION = 26;</code>
         */
        public static final int ACTION_VALUE = 26;
        /**
         * <pre>
         * 通知回合
         * </pre>
         * <p>
         * <code>ROUND = 27;</code>
         */
        public static final int ROUND_VALUE = 27;
        /**
         * <pre>
         * 询问
         * </pre>
         * <p>
         * <code>ASK = 28;</code>
         */
        public static final int ASK_VALUE = 28;
        /**
         * <pre>
         * 退出
         * </pre>
         * <p>
         * <code>EXIT = 29;</code>
         */
        public static final int EXIT_VALUE = 29;
        /**
         * <pre>
         * 结果
         * </pre>
         * <p>
         * <code>RESULT = 30;</code>
         */
        public static final int RESULT_VALUE = 30;
        /**
         * <pre>
         * 喇叭
         * </pre>
         * <p>
         * <code>MESSAGE = 31;</code>
         */
        public static final int MESSAGE_VALUE = 31;
        /**
         * <pre>
         * 回放
         * </pre>
         * <p>
         * <code>REPLAY = 32;</code>
         */
        public static final int REPLAY_VALUE = 32;


        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static OperationType valueOf(int value) {
            return forNumber(value);
        }

        public static OperationType forNumber(int value) {
            switch (value) {
                case 0:
                    return ERROR;
                case 10:
                    return LOGIN;
                case 11:
                    return CREATE_ROOM;
                case 12:
                    return QUERY;
                case 20:
                    return CONNECTION;
                case 21:
                    return ROOM_INFO;
                case 22:
                    return SEAT_INFO;
                case 23:
                    return GAME_INFO;
                case 24:
                    return READY;
                case 25:
                    return COMPLETED;
                case 26:
                    return ACTION;
                case 27:
                    return ROUND;
                case 28:
                    return ASK;
                case 29:
                    return EXIT;
                case 30:
                    return RESULT;
                case 31:
                    return MESSAGE;
                case 32:
                    return REPLAY;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<OperationType>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                OperationType> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<OperationType>() {
                    public OperationType findValueByNumber(int number) {
                        return OperationType.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return game.mode.GameBase.getDescriptor().getEnumTypes().get(0);
        }

        private static final OperationType[] VALUES = values();

        public static OperationType valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private OperationType(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:OperationType)
    }

    /**
     * <pre>
     * 操作id
     * </pre>
     * <p>
     * Protobuf enum {@code OperationId}
     */
    public enum OperationId
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * 大厅
         * </pre>
         * <p>
         * <code>ROOM_LIST = 0;</code>
         */
        ROOM_LIST(0),
        /**
         * <pre>
         * 麻将
         * </pre>
         * <p>
         * <code>DEAL_CARD = 10;</code>
         */
        DEAL_CARD(10),
        /**
         * <pre>
         * 买马
         * </pre>
         * <p>
         * <code>BUY_HORSE = 11;</code>
         */
        BUY_HORSE(11),
        /**
         * <pre>
         * 摸牌
         * </pre>
         * <p>
         * <code>GET_CARD = 12;</code>
         */
        GET_CARD(12),
        /**
         * <pre>
         * 出牌
         * </pre>
         * <p>
         * <code>PLAY_CARD = 13;</code>
         */
        PLAY_CARD(13),
        /**
         * <pre>
         * 碰
         * </pre>
         * <p>
         * <code>TOUCH = 14;</code>
         */
        TOUCH(14),
        /**
         * <pre>
         * 暗杠
         * </pre>
         * <p>
         * <code>AN_GANG = 15;</code>
         */
        AN_GANG(15),
        /**
         * <pre>
         * 点杠
         * </pre>
         * <p>
         * <code>DIAN_GANG = 16;</code>
         */
        DIAN_GANG(16),
        /**
         * <pre>
         * 扒杠
         * </pre>
         * <p>
         * <code>BA_GANG = 17;</code>
         */
        BA_GANG(17),
        /**
         * <pre>
         * 胡
         * </pre>
         * <p>
         * <code>HU = 18;</code>
         */
        HU(18),
        /**
         * <pre>
         * 过
         * </pre>
         * <p>
         * <code>PASS = 19;</code>
         */
        PASS(19),
        UNRECOGNIZED(-1),;

        /**
         * <pre>
         * 大厅
         * </pre>
         * <p>
         * <code>ROOM_LIST = 0;</code>
         */
        public static final int ROOM_LIST_VALUE = 0;
        /**
         * <pre>
         * 麻将
         * </pre>
         * <p>
         * <code>DEAL_CARD = 10;</code>
         */
        public static final int DEAL_CARD_VALUE = 10;
        /**
         * <pre>
         * 买马
         * </pre>
         * <p>
         * <code>BUY_HORSE = 11;</code>
         */
        public static final int BUY_HORSE_VALUE = 11;
        /**
         * <pre>
         * 摸牌
         * </pre>
         * <p>
         * <code>GET_CARD = 12;</code>
         */
        public static final int GET_CARD_VALUE = 12;
        /**
         * <pre>
         * 出牌
         * </pre>
         * <p>
         * <code>PLAY_CARD = 13;</code>
         */
        public static final int PLAY_CARD_VALUE = 13;
        /**
         * <pre>
         * 碰
         * </pre>
         * <p>
         * <code>TOUCH = 14;</code>
         */
        public static final int TOUCH_VALUE = 14;
        /**
         * <pre>
         * 暗杠
         * </pre>
         * <p>
         * <code>AN_GANG = 15;</code>
         */
        public static final int AN_GANG_VALUE = 15;
        /**
         * <pre>
         * 点杠
         * </pre>
         * <p>
         * <code>DIAN_GANG = 16;</code>
         */
        public static final int DIAN_GANG_VALUE = 16;
        /**
         * <pre>
         * 扒杠
         * </pre>
         * <p>
         * <code>BA_GANG = 17;</code>
         */
        public static final int BA_GANG_VALUE = 17;
        /**
         * <pre>
         * 胡
         * </pre>
         * <p>
         * <code>HU = 18;</code>
         */
        public static final int HU_VALUE = 18;
        /**
         * <pre>
         * 过
         * </pre>
         * <p>
         * <code>PASS = 19;</code>
         */
        public static final int PASS_VALUE = 19;


        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static OperationId valueOf(int value) {
            return forNumber(value);
        }

        public static OperationId forNumber(int value) {
            switch (value) {
                case 0:
                    return ROOM_LIST;
                case 10:
                    return DEAL_CARD;
                case 11:
                    return BUY_HORSE;
                case 12:
                    return GET_CARD;
                case 13:
                    return PLAY_CARD;
                case 14:
                    return TOUCH;
                case 15:
                    return AN_GANG;
                case 16:
                    return DIAN_GANG;
                case 17:
                    return BA_GANG;
                case 18:
                    return HU;
                case 19:
                    return PASS;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<OperationId>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                OperationId> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<OperationId>() {
                    public OperationId findValueByNumber(int number) {
                        return OperationId.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return game.mode.GameBase.getDescriptor().getEnumTypes().get(1);
        }

        private static final OperationId[] VALUES = values();

        public static OperationId valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private OperationId(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:OperationId)
    }

    /**
     * <pre>
     * 错误码
     * </pre>
     * <p>
     * Protobuf enum {@code ErrorCode}
     */
    public enum ErrorCode
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * 通用
         * </pre>
         * <p>
         * <code>SUCCESS = 0;</code>
         */
        SUCCESS(0),
        /**
         * <pre>
         * 未知错误
         * </pre>
         * <p>
         * <code>ERROR_UNKNOW = 1;</code>
         */
        ERROR_UNKNOW(1),
        /**
         * <pre>
         * 登录
         * </pre>
         * <p>
         * <code>ERROR_UNKNOW_ACCOUNT = 10;</code>
         */
        ERROR_UNKNOW_ACCOUNT(10),
        /**
         * <pre>
         * 密码错误
         * </pre>
         * <p>
         * <code>ERROR_PASSWORD_INCORRECT = 11;</code>
         */
        ERROR_PASSWORD_INCORRECT(11),
        /**
         * <pre>
         * 游戏
         * </pre>
         * <p>
         * <code>ROOM_NOT_EXIST = 21;</code>
         */
        ROOM_NOT_EXIST(21),
        /**
         * <pre>
         * 人数已满
         * </pre>
         * <p>
         * <code>COUNT_FULL = 22;</code>
         */
        COUNT_FULL(22),
        /**
         * <pre>
         * 不允许的操作
         * </pre>
         * <p>
         * <code>SHOUND_NOT_OPERATION = 23;</code>
         */
        SHOUND_NOT_OPERATION(23),
        /**
         * <pre>
         * 金币不足
         * </pre>
         * <p>
         * <code>GOLD_TOO_LITTLE = 24;</code>
         */
        GOLD_TOO_LITTLE(24),
        /**
         * <pre>
         * 用户手中没有此牌
         * </pre>
         * <p>
         * <code>HASNOT_CARD = 25;</code>
         */
        HASNOT_CARD(25),
        UNRECOGNIZED(-1),;

        /**
         * <pre>
         * 通用
         * </pre>
         * <p>
         * <code>SUCCESS = 0;</code>
         */
        public static final int SUCCESS_VALUE = 0;
        /**
         * <pre>
         * 未知错误
         * </pre>
         * <p>
         * <code>ERROR_UNKNOW = 1;</code>
         */
        public static final int ERROR_UNKNOW_VALUE = 1;
        /**
         * <pre>
         * 登录
         * </pre>
         * <p>
         * <code>ERROR_UNKNOW_ACCOUNT = 10;</code>
         */
        public static final int ERROR_UNKNOW_ACCOUNT_VALUE = 10;
        /**
         * <pre>
         * 密码错误
         * </pre>
         * <p>
         * <code>ERROR_PASSWORD_INCORRECT = 11;</code>
         */
        public static final int ERROR_PASSWORD_INCORRECT_VALUE = 11;
        /**
         * <pre>
         * 游戏
         * </pre>
         * <p>
         * <code>ROOM_NOT_EXIST = 21;</code>
         */
        public static final int ROOM_NOT_EXIST_VALUE = 21;
        /**
         * <pre>
         * 人数已满
         * </pre>
         * <p>
         * <code>COUNT_FULL = 22;</code>
         */
        public static final int COUNT_FULL_VALUE = 22;
        /**
         * <pre>
         * 不允许的操作
         * </pre>
         * <p>
         * <code>SHOUND_NOT_OPERATION = 23;</code>
         */
        public static final int SHOUND_NOT_OPERATION_VALUE = 23;
        /**
         * <pre>
         * 金币不足
         * </pre>
         * <p>
         * <code>GOLD_TOO_LITTLE = 24;</code>
         */
        public static final int GOLD_TOO_LITTLE_VALUE = 24;
        /**
         * <pre>
         * 用户手中没有此牌
         * </pre>
         * <p>
         * <code>HASNOT_CARD = 25;</code>
         */
        public static final int HASNOT_CARD_VALUE = 25;


        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new java.lang.IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ErrorCode valueOf(int value) {
            return forNumber(value);
        }

        public static ErrorCode forNumber(int value) {
            switch (value) {
                case 0:
                    return SUCCESS;
                case 1:
                    return ERROR_UNKNOW;
                case 10:
                    return ERROR_UNKNOW_ACCOUNT;
                case 11:
                    return ERROR_PASSWORD_INCORRECT;
                case 21:
                    return ROOM_NOT_EXIST;
                case 22:
                    return COUNT_FULL;
                case 23:
                    return SHOUND_NOT_OPERATION;
                case 24:
                    return GOLD_TOO_LITTLE;
                case 25:
                    return HASNOT_CARD;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                ErrorCode> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
                    public ErrorCode findValueByNumber(int number) {
                        return ErrorCode.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return game.mode.GameBase.getDescriptor().getEnumTypes().get(2);
        }

        private static final ErrorCode[] VALUES = values();

        public static ErrorCode valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private ErrorCode(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ErrorCode)
    }

    public interface BaseConnectionOrBuilder extends
            // @@protoc_insertion_point(interface_extends:BaseConnection)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 操作类型
         * </pre>
         * <p>
         * <code>.OperationType operationType = 1;</code>
         */
        int getOperationTypeValue();

        /**
         * <pre>
         * 操作类型
         * </pre>
         * <p>
         * <code>.OperationType operationType = 1;</code>
         */
        game.mode.GameBase.OperationType getOperationType();

        /**
         * <pre>
         * 数据
         * </pre>
         * <p>
         * <code>bytes data = 2;</code>
         */
        com.google.protobuf.ByteString getData();
    }

    /**
     * <pre>
     * 通用请求
     * </pre>
     * <p>
     * Protobuf type {@code BaseConnection}
     */
    public static final class BaseConnection extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:BaseConnection)
            BaseConnectionOrBuilder {
        // Use BaseConnection.newBuilder() to construct.
        private BaseConnection(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private BaseConnection() {
            operationType_ = 0;
            data_ = com.google.protobuf.ByteString.EMPTY;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private BaseConnection(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            int rawValue = input.readEnum();

                            operationType_ = rawValue;
                            break;
                        }
                        case 18: {

                            data_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return game.mode.GameBase.internal_static_BaseConnection_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return game.mode.GameBase.internal_static_BaseConnection_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            game.mode.GameBase.BaseConnection.class, game.mode.GameBase.BaseConnection.Builder.class);
        }

        public static final int OPERATIONTYPE_FIELD_NUMBER = 1;
        private int operationType_;

        /**
         * <pre>
         * 操作类型
         * </pre>
         * <p>
         * <code>.OperationType operationType = 1;</code>
         */
        public int getOperationTypeValue() {
            return operationType_;
        }

        /**
         * <pre>
         * 操作类型
         * </pre>
         * <p>
         * <code>.OperationType operationType = 1;</code>
         */
        public game.mode.GameBase.OperationType getOperationType() {
            game.mode.GameBase.OperationType result = game.mode.GameBase.OperationType.valueOf(operationType_);
            return result == null ? game.mode.GameBase.OperationType.UNRECOGNIZED : result;
        }

        public static final int DATA_FIELD_NUMBER = 2;
        private com.google.protobuf.ByteString data_;

        /**
         * <pre>
         * 数据
         * </pre>
         * <p>
         * <code>bytes data = 2;</code>
         */
        public com.google.protobuf.ByteString getData() {
            return data_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (operationType_ != game.mode.GameBase.OperationType.ERROR.getNumber()) {
                output.writeEnum(1, operationType_);
            }
            if (!data_.isEmpty()) {
                output.writeBytes(2, data_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (operationType_ != game.mode.GameBase.OperationType.ERROR.getNumber()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(1, operationType_);
            }
            if (!data_.isEmpty()) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(2, data_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof game.mode.GameBase.BaseConnection)) {
                return super.equals(obj);
            }
            game.mode.GameBase.BaseConnection other = (game.mode.GameBase.BaseConnection) obj;

            boolean result = true;
            result = result && operationType_ == other.operationType_;
            result = result && getData()
                    .equals(other.getData());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + OPERATIONTYPE_FIELD_NUMBER;
            hash = (53 * hash) + operationType_;
            hash = (37 * hash) + DATA_FIELD_NUMBER;
            hash = (53 * hash) + getData().hashCode();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static game.mode.GameBase.BaseConnection parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static game.mode.GameBase.BaseConnection parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static game.mode.GameBase.BaseConnection parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(game.mode.GameBase.BaseConnection prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * 通用请求
         * </pre>
         * <p>
         * Protobuf type {@code BaseConnection}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:BaseConnection)
                game.mode.GameBase.BaseConnectionOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return game.mode.GameBase.internal_static_BaseConnection_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return game.mode.GameBase.internal_static_BaseConnection_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                game.mode.GameBase.BaseConnection.class, game.mode.GameBase.BaseConnection.Builder.class);
            }

            // Construct using game.mode.GameBase.BaseConnection.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                operationType_ = 0;

                data_ = com.google.protobuf.ByteString.EMPTY;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return game.mode.GameBase.internal_static_BaseConnection_descriptor;
            }

            public game.mode.GameBase.BaseConnection getDefaultInstanceForType() {
                return game.mode.GameBase.BaseConnection.getDefaultInstance();
            }

            public game.mode.GameBase.BaseConnection build() {
                game.mode.GameBase.BaseConnection result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public game.mode.GameBase.BaseConnection buildPartial() {
                game.mode.GameBase.BaseConnection result = new game.mode.GameBase.BaseConnection(this);
                result.operationType_ = operationType_;
                result.data_ = data_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof game.mode.GameBase.BaseConnection) {
                    return mergeFrom((game.mode.GameBase.BaseConnection) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(game.mode.GameBase.BaseConnection other) {
                if (other == game.mode.GameBase.BaseConnection.getDefaultInstance()) return this;
                if (other.operationType_ != 0) {
                    setOperationTypeValue(other.getOperationTypeValue());
                }
                if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
                    setData(other.getData());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                game.mode.GameBase.BaseConnection parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (game.mode.GameBase.BaseConnection) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int operationType_ = 0;

            /**
             * <pre>
             * 操作类型
             * </pre>
             * <p>
             * <code>.OperationType operationType = 1;</code>
             */
            public int getOperationTypeValue() {
                return operationType_;
            }

            /**
             * <pre>
             * 操作类型
             * </pre>
             * <p>
             * <code>.OperationType operationType = 1;</code>
             */
            public Builder setOperationTypeValue(int value) {
                operationType_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 操作类型
             * </pre>
             * <p>
             * <code>.OperationType operationType = 1;</code>
             */
            public game.mode.GameBase.OperationType getOperationType() {
                game.mode.GameBase.OperationType result = game.mode.GameBase.OperationType.valueOf(operationType_);
                return result == null ? game.mode.GameBase.OperationType.UNRECOGNIZED : result;
            }

            /**
             * <pre>
             * 操作类型
             * </pre>
             * <p>
             * <code>.OperationType operationType = 1;</code>
             */
            public Builder setOperationType(game.mode.GameBase.OperationType value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                operationType_ = value.getNumber();
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 操作类型
             * </pre>
             * <p>
             * <code>.OperationType operationType = 1;</code>
             */
            public Builder clearOperationType() {

                operationType_ = 0;
                onChanged();
                return this;
            }

            private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <pre>
             * 数据
             * </pre>
             * <p>
             * <code>bytes data = 2;</code>
             */
            public com.google.protobuf.ByteString getData() {
                return data_;
            }

            /**
             * <pre>
             * 数据
             * </pre>
             * <p>
             * <code>bytes data = 2;</code>
             */
            public Builder setData(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }

                data_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 数据
             * </pre>
             * <p>
             * <code>bytes data = 2;</code>
             */
            public Builder clearData() {

                data_ = getDefaultInstance().getData();
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:BaseConnection)
        }

        // @@protoc_insertion_point(class_scope:BaseConnection)
        private static final game.mode.GameBase.BaseConnection DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new game.mode.GameBase.BaseConnection();
        }

        public static game.mode.GameBase.BaseConnection getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<BaseConnection>
                PARSER = new com.google.protobuf.AbstractParser<BaseConnection>() {
            public BaseConnection parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new BaseConnection(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<BaseConnection> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<BaseConnection> getParserForType() {
            return PARSER;
        }

        public game.mode.GameBase.BaseConnection getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_BaseConnection_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_BaseConnection_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\016gameBase.proto\"E\n\016BaseConnection\022%\n\rop" +
                        "erationType\030\001 \001(\0162\016.OperationType\022\014\n\004dat" +
                        "a\030\002 \001(\014*\347\001\n\rOperationType\022\t\n\005ERROR\020\000\022\t\n\005" +
                        "LOGIN\020\n\022\017\n\013CREATE_ROOM\020\013\022\t\n\005QUERY\020\014\022\016\n\nC" +
                        "ONNECTION\020\024\022\r\n\tROOM_INFO\020\025\022\r\n\tSEAT_INFO\020" +
                        "\026\022\r\n\tGAME_INFO\020\027\022\t\n\005READY\020\030\022\r\n\tCOMPLETED" +
                        "\020\031\022\n\n\006ACTION\020\032\022\t\n\005ROUND\020\033\022\007\n\003ASK\020\034\022\010\n\004EX" +
                        "IT\020\035\022\n\n\006RESULT\020\036\022\013\n\007MESSAGE\020\037\022\n\n\006REPLAY\020" +
                        " *\235\001\n\013OperationId\022\r\n\tROOM_LIST\020\000\022\r\n\tDEAL" +
                        "_CARD\020\n\022\r\n\tBUY_HORSE\020\013\022\014\n\010GET_CARD\020\014\022\r\n\t",
                "PLAY_CARD\020\r\022\t\n\005TOUCH\020\016\022\013\n\007AN_GANG\020\017\022\r\n\tD" +
                        "IAN_GANG\020\020\022\013\n\007BA_GANG\020\021\022\006\n\002HU\020\022\022\010\n\004PASS\020" +
                        "\023*\306\001\n\tErrorCode\022\013\n\007SUCCESS\020\000\022\020\n\014ERROR_UN" +
                        "KNOW\020\001\022\030\n\024ERROR_UNKNOW_ACCOUNT\020\n\022\034\n\030ERRO" +
                        "R_PASSWORD_INCORRECT\020\013\022\022\n\016ROOM_NOT_EXIST" +
                        "\020\025\022\016\n\nCOUNT_FULL\020\026\022\030\n\024SHOUND_NOT_OPERATI" +
                        "ON\020\027\022\023\n\017GOLD_TOO_LITTLE\020\030\022\017\n\013HASNOT_CARD" +
                        "\020\031B\013\n\tgame.modeb\006proto3"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
        internal_static_BaseConnection_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_BaseConnection_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_BaseConnection_descriptor,
                new java.lang.String[]{"OperationType", "Data",});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
