// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

package game.mode;

public final class Mahjong {
  private Mahjong() {
  }

  public static void registerAllExtensions(
          com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
          com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
            (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  /**
   * Protobuf enum {@code ScoreType}
   */
  public enum ScoreType
          implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *平胡
     * </pre>
     *
     * <code>PING_HU = 0;</code>
     */
    PING_HU(0),
    /**
     * <pre>
     *自摸
     * </pre>
     *
     * <code>ZIMO_HU = 1;</code>
     */
    ZIMO_HU(1),
    /**
     * <pre>
     *门清
     * </pre>
     *
     * <code>MENQING_HU = 2;</code>
     */
    MENQING_HU(2),
    /**
     * <pre>
     *碰碰胡
     * </pre>
     *
     * <code>PENGPENG_HU = 3;</code>
     */
    PENGPENG_HU(3),
    /**
     * <pre>
     *混一色
     * </pre>
     *
     * <code>HUNYISE_HU = 4;</code>
     */
    HUNYISE_HU(4),
    /**
     * <pre>
     *清一色
     * </pre>
     *
     * <code>QINGYISE_HU = 5;</code>
     */
    QINGYISE_HU(5),
    /**
     * <pre>
     *七小对
     * </pre>
     *
     * <code>QIXIAODUI_HU = 6;</code>
     */
    QIXIAODUI_HU(6),
    /**
     * <pre>
     *混幺九
     * </pre>
     *
     * <code>HUNYAOJIU_HU = 7;</code>
     */
    HUNYAOJIU_HU(7),
    /**
     * <pre>
     *豪华七小对
     * </pre>
     *
     * <code>HAOHUAQIXIAODUI_HU = 8;</code>
     */
    HAOHUAQIXIAODUI_HU(8),
    /**
     * <pre>
     *十三幺
     * </pre>
     *
     * <code>SHISANYAO_HU = 9;</code>
     */
    SHISANYAO_HU(9),
    /**
     * <pre>
     *天胡
     * </pre>
     *
     * <code>TIAN_HU = 10;</code>
     */
    TIAN_HU(10),
    /**
     * <pre>
     *地胡
     * </pre>
     *
     * <code>DI_HU = 11;</code>
     */
    DI_HU(11),
    /**
     * <pre>
     *全幺九
     * </pre>
     *
     * <code>QUANYAOJIU_HU = 12;</code>
     */
    QUANYAOJIU_HU(12),
    /**
     * <pre>
     *全番
     * </pre>
     *
     * <code>QUANFAN_HU = 13;</code>
     */
    QUANFAN_HU(13),
    /**
     * <pre>
     *双豪华七小对
     * </pre>
     *
     * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
     */
    SHUANGHAOHUAQIXIAODUI_HU(14),
    /**
     * <pre>
     *三豪华七小对
     * </pre>
     *
     * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
     */
    SANHAOHUAQIXIAODUI_HU(15),
    /**
     * <pre>
     *十八罗汉
     * </pre>
     *
     * <code>SHIBALUOHAN_HU = 16;</code>
     */
    SHIBALUOHAN_HU(16),
    /**
     * <pre>
     *海底
     * </pre>
     *
     * <code>HAIDI = 17;</code>
     */
    HAIDI(17),
    /**
     * <pre>
     *杠爆
     * </pre>
     *
     * <code>GANGBAO = 18;</code>
     */
    GANGBAO(18),
    /**
     * <pre>
     *庄硬
     * </pre>
     *
     * <code>ZHUANGYING = 19;</code>
     */
    ZHUANGYING(19),
    /**
     * <pre>
     *飞
     * </pre>
     *
     * <code>FEI = 20;</code>
     */
    FEI(20),
    UNRECOGNIZED(-1),;

    /**
     * <pre>
     *平胡
     * </pre>
     *
     * <code>PING_HU = 0;</code>
     */
    public static final int PING_HU_VALUE = 0;
    /**
     * <pre>
     *自摸
     * </pre>
     *
     * <code>ZIMO_HU = 1;</code>
     */
    public static final int ZIMO_HU_VALUE = 1;
    /**
     * <pre>
     *门清
     * </pre>
     *
     * <code>MENQING_HU = 2;</code>
     */
    public static final int MENQING_HU_VALUE = 2;
    /**
     * <pre>
     *碰碰胡
     * </pre>
     *
     * <code>PENGPENG_HU = 3;</code>
     */
    public static final int PENGPENG_HU_VALUE = 3;
    /**
     * <pre>
     *混一色
     * </pre>
     *
     * <code>HUNYISE_HU = 4;</code>
     */
    public static final int HUNYISE_HU_VALUE = 4;
    /**
     * <pre>
     *清一色
     * </pre>
     *
     * <code>QINGYISE_HU = 5;</code>
     */
    public static final int QINGYISE_HU_VALUE = 5;
    /**
     * <pre>
     *七小对
     * </pre>
     *
     * <code>QIXIAODUI_HU = 6;</code>
     */
    public static final int QIXIAODUI_HU_VALUE = 6;
    /**
     * <pre>
     *混幺九
     * </pre>
     *
     * <code>HUNYAOJIU_HU = 7;</code>
     */
    public static final int HUNYAOJIU_HU_VALUE = 7;
    /**
     * <pre>
     *豪华七小对
     * </pre>
     *
     * <code>HAOHUAQIXIAODUI_HU = 8;</code>
     */
    public static final int HAOHUAQIXIAODUI_HU_VALUE = 8;
    /**
     * <pre>
     *十三幺
     * </pre>
     *
     * <code>SHISANYAO_HU = 9;</code>
     */
    public static final int SHISANYAO_HU_VALUE = 9;
    /**
     * <pre>
     *天胡
     * </pre>
     *
     * <code>TIAN_HU = 10;</code>
     */
    public static final int TIAN_HU_VALUE = 10;
    /**
     * <pre>
     *地胡
     * </pre>
     *
     * <code>DI_HU = 11;</code>
     */
    public static final int DI_HU_VALUE = 11;
    /**
     * <pre>
     *全幺九
     * </pre>
     *
     * <code>QUANYAOJIU_HU = 12;</code>
     */
    public static final int QUANYAOJIU_HU_VALUE = 12;
    /**
     * <pre>
     *全番
     * </pre>
     *
     * <code>QUANFAN_HU = 13;</code>
     */
    public static final int QUANFAN_HU_VALUE = 13;
    /**
     * <pre>
     *双豪华七小对
     * </pre>
     *
     * <code>SHUANGHAOHUAQIXIAODUI_HU = 14;</code>
     */
    public static final int SHUANGHAOHUAQIXIAODUI_HU_VALUE = 14;
    /**
     * <pre>
     *三豪华七小对
     * </pre>
     *
     * <code>SANHAOHUAQIXIAODUI_HU = 15;</code>
     */
    public static final int SANHAOHUAQIXIAODUI_HU_VALUE = 15;
    /**
     * <pre>
     *十八罗汉
     * </pre>
     *
     * <code>SHIBALUOHAN_HU = 16;</code>
     */
    public static final int SHIBALUOHAN_HU_VALUE = 16;
    /**
     * <pre>
     *海底
     * </pre>
     *
     * <code>HAIDI = 17;</code>
     */
    public static final int HAIDI_VALUE = 17;
    /**
     * <pre>
     *杠爆
     * </pre>
     *
     * <code>GANGBAO = 18;</code>
     */
    public static final int GANGBAO_VALUE = 18;
    /**
     * <pre>
     *庄硬
     * </pre>
     *
     * <code>ZHUANGYING = 19;</code>
     */
    public static final int ZHUANGYING_VALUE = 19;
    /**
     * <pre>
     *飞
     * </pre>
     *
     * <code>FEI = 20;</code>
     */
    public static final int FEI_VALUE = 20;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ScoreType valueOf(int value) {
      return forNumber(value);
    }

    public static ScoreType forNumber(int value) {
      switch (value) {
        case 0:
          return PING_HU;
        case 1:
          return ZIMO_HU;
        case 2:
          return MENQING_HU;
        case 3:
          return PENGPENG_HU;
        case 4:
          return HUNYISE_HU;
        case 5:
          return QINGYISE_HU;
        case 6:
          return QIXIAODUI_HU;
        case 7:
          return HUNYAOJIU_HU;
        case 8:
          return HAOHUAQIXIAODUI_HU;
        case 9:
          return SHISANYAO_HU;
        case 10:
          return TIAN_HU;
        case 11:
          return DI_HU;
        case 12:
          return QUANYAOJIU_HU;
        case 13:
          return QUANFAN_HU;
        case 14:
          return SHUANGHAOHUAQIXIAODUI_HU;
        case 15:
          return SANHAOHUAQIXIAODUI_HU;
        case 16:
          return SHIBALUOHAN_HU;
        case 17:
          return HAIDI;
        case 18:
          return GANGBAO;
        case 19:
          return ZHUANGYING;
        case 20:
          return FEI;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ScoreType>
        internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<
            ScoreType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScoreType>() {
              public ScoreType findValueByNumber(int number) {
                return ScoreType.forNumber(number);
              }
            };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return game.mode.Mahjong.getDescriptor().getEnumTypes().get(0);
    }

    private static final ScoreType[] VALUES = values();

    public static ScoreType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
                "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ScoreType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ScoreType)
  }

  public interface CardsDataOrBuilder extends
          // @@protoc_insertion_point(interface_extends:CardsData)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    int getCardsCount();

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    int getCards(int index);
  }

  /**
   * <pre>
   * 牌数据
   * </pre>
   * <p>
   * Protobuf type {@code CardsData}
   */
  public static final class CardsData extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:CardsData)
          CardsDataOrBuilder {
    // Use CardsData.newBuilder() to construct.
    private CardsData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private CardsData() {
      cards_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private CardsData(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_CardsData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_CardsData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.CardsData.class, game.mode.Mahjong.CardsData.Builder.class);
    }

    public static final int CARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cards_;

    /**
     * <pre>
     *牌
     * </pre>
     *
     * <code>repeated int32 cards = 1;</code>
     */
    public java.util.List<java.lang.Integer>
    getCardsList() {
      return cards_;
    }

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private int cardsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      if (getCardsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(cardsMemoizedSerializedSize);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32NoTag(cards_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        if (!getCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.CardsData)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.CardsData other = (game.mode.Mahjong.CardsData) obj;

      boolean result = true;
      result = result && getCardsList()
              .equals(other.getCardsList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.CardsData parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.CardsData parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.CardsData parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.CardsData parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.CardsData parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.CardsData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 牌数据
     * </pre>
     * <p>
     * Protobuf type {@code CardsData}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:CardsData)
            game.mode.Mahjong.CardsDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_CardsData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_CardsData_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.CardsData.class, game.mode.Mahjong.CardsData.Builder.class);
      }

      // Construct using game.mode.Mahjong.CardsData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_CardsData_descriptor;
      }

      public game.mode.Mahjong.CardsData getDefaultInstanceForType() {
        return game.mode.Mahjong.CardsData.getDefaultInstance();
      }

      public game.mode.Mahjong.CardsData build() {
        game.mode.Mahjong.CardsData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.CardsData buildPartial() {
        game.mode.Mahjong.CardsData result = new game.mode.Mahjong.CardsData(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cards_ = cards_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.CardsData) {
          return mergeFrom((game.mode.Mahjong.CardsData) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.CardsData other) {
        if (other == game.mode.Mahjong.CardsData.getDefaultInstance()) return this;
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.CardsData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.CardsData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();

      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000001;
        }
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public java.util.List<java.lang.Integer>
      getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder setCards(
              int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder addAllCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, cards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:CardsData)
    }

    // @@protoc_insertion_point(class_scope:CardsData)
    private static final game.mode.Mahjong.CardsData DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.CardsData();
    }

    public static game.mode.Mahjong.CardsData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CardsData>
            PARSER = new com.google.protobuf.AbstractParser<CardsData>() {
      public CardsData parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new CardsData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CardsData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CardsData> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.CardsData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongHuResponseOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongHuResponse)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    int getCardsCount();

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    int getCards(int index);

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    java.util.List<game.mode.Mahjong.ScoreType> getScoreTypeList();

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    int getScoreTypeCount();

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    game.mode.Mahjong.ScoreType getScoreType(int index);

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    java.util.List<java.lang.Integer>
    getScoreTypeValueList();

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    int getScoreTypeValue(int index);
  }

  /**
   * <pre>
   * 胡 HU
   * </pre>
   * <p>
   * Protobuf type {@code MahjongHuResponse}
   */
  public static final class MahjongHuResponse extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongHuResponse)
          MahjongHuResponseOrBuilder {
    // Use MahjongHuResponse.newBuilder() to construct.
    private MahjongHuResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongHuResponse() {
      cards_ = java.util.Collections.emptyList();
      scoreType_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongHuResponse(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                scoreType_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              scoreType_.add(rawValue);
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  scoreType_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                scoreType_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          scoreType_ = java.util.Collections.unmodifiableList(scoreType_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongHuResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongHuResponse_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongHuResponse.class, game.mode.Mahjong.MahjongHuResponse.Builder.class);
    }

    public static final int CARDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> cards_;

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    public java.util.List<java.lang.Integer>
    getCardsList() {
      return cards_;
    }

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 1;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private int cardsMemoizedSerializedSize = -1;

    public static final int SCORETYPE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> scoreType_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
            java.lang.Integer, game.mode.Mahjong.ScoreType> scoreType_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                    java.lang.Integer, game.mode.Mahjong.ScoreType>() {
              public game.mode.Mahjong.ScoreType convert(java.lang.Integer from) {
                game.mode.Mahjong.ScoreType result = game.mode.Mahjong.ScoreType.valueOf(from);
                return result == null ? game.mode.Mahjong.ScoreType.UNRECOGNIZED : result;
              }
            };

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    public java.util.List<game.mode.Mahjong.ScoreType> getScoreTypeList() {
      return new com.google.protobuf.Internal.ListAdapter<
              java.lang.Integer, game.mode.Mahjong.ScoreType>(scoreType_, scoreType_converter_);
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    public int getScoreTypeCount() {
      return scoreType_.size();
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    public game.mode.Mahjong.ScoreType getScoreType(int index) {
      return scoreType_converter_.convert(scoreType_.get(index));
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getScoreTypeValueList() {
      return scoreType_;
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreType = 2;</code>
     */
    public int getScoreTypeValue(int index) {
      return scoreType_.get(index);
    }

    private int scoreTypeMemoizedSerializedSize;

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      if (getCardsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(cardsMemoizedSerializedSize);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32NoTag(cards_.get(i));
      }
      if (getScoreTypeList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(scoreTypeMemoizedSerializedSize);
      }
      for (int i = 0; i < scoreType_.size(); i++) {
        output.writeEnumNoTag(scoreType_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        if (!getCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeEnumSizeNoTag(scoreType_.get(i));
        }
        size += dataSize;
        if (!getScoreTypeList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeUInt32SizeNoTag(dataSize);
        }
        scoreTypeMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongHuResponse)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongHuResponse other = (game.mode.Mahjong.MahjongHuResponse) obj;

      boolean result = true;
      result = result && getCardsList()
              .equals(other.getCardsList());
      result = result && scoreType_.equals(other.scoreType_);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      if (getScoreTypeCount() > 0) {
        hash = (37 * hash) + SCORETYPE_FIELD_NUMBER;
        hash = (53 * hash) + scoreType_.hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongHuResponse parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongHuResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 胡 HU
     * </pre>
     * <p>
     * Protobuf type {@code MahjongHuResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongHuResponse)
            game.mode.Mahjong.MahjongHuResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongHuResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongHuResponse_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongHuResponse.class, game.mode.Mahjong.MahjongHuResponse.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongHuResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        scoreType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongHuResponse_descriptor;
      }

      public game.mode.Mahjong.MahjongHuResponse getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongHuResponse.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongHuResponse build() {
        game.mode.Mahjong.MahjongHuResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongHuResponse buildPartial() {
        game.mode.Mahjong.MahjongHuResponse result = new game.mode.Mahjong.MahjongHuResponse(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.cards_ = cards_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          scoreType_ = java.util.Collections.unmodifiableList(scoreType_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.scoreType_ = scoreType_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongHuResponse) {
          return mergeFrom((game.mode.Mahjong.MahjongHuResponse) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongHuResponse other) {
        if (other == game.mode.Mahjong.MahjongHuResponse.getDefaultInstance()) return this;
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        if (!other.scoreType_.isEmpty()) {
          if (scoreType_.isEmpty()) {
            scoreType_ = other.scoreType_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureScoreTypeIsMutable();
            scoreType_.addAll(other.scoreType_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongHuResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongHuResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();

      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000001;
        }
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public java.util.List<java.lang.Integer>
      getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder setCards(
              int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder addAllCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, cards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌
       * </pre>
       * <p>
       * <code>repeated int32 cards = 1;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> scoreType_ =
              java.util.Collections.emptyList();

      private void ensureScoreTypeIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          scoreType_ = new java.util.ArrayList<java.lang.Integer>(scoreType_);
          bitField0_ |= 0x00000002;
        }
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public java.util.List<game.mode.Mahjong.ScoreType> getScoreTypeList() {
        return new com.google.protobuf.Internal.ListAdapter<
                java.lang.Integer, game.mode.Mahjong.ScoreType>(scoreType_, scoreType_converter_);
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public int getScoreTypeCount() {
        return scoreType_.size();
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public game.mode.Mahjong.ScoreType getScoreType(int index) {
        return scoreType_converter_.convert(scoreType_.get(index));
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public Builder setScoreType(
              int index, game.mode.Mahjong.ScoreType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureScoreTypeIsMutable();
        scoreType_.set(index, value.getNumber());
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public Builder addScoreType(game.mode.Mahjong.ScoreType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureScoreTypeIsMutable();
        scoreType_.add(value.getNumber());
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public Builder addAllScoreType(
              java.lang.Iterable<? extends game.mode.Mahjong.ScoreType> values) {
        ensureScoreTypeIsMutable();
        for (game.mode.Mahjong.ScoreType value : values) {
          scoreType_.add(value.getNumber());
        }
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public Builder clearScoreType() {
        scoreType_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public java.util.List<java.lang.Integer>
      getScoreTypeValueList() {
        return java.util.Collections.unmodifiableList(scoreType_);
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public int getScoreTypeValue(int index) {
        return scoreType_.get(index);
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public Builder setScoreTypeValue(
              int index, int value) {
        ensureScoreTypeIsMutable();
        scoreType_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public Builder addScoreTypeValue(int value) {
        ensureScoreTypeIsMutable();
        scoreType_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 牌型
       * </pre>
       * <p>
       * <code>repeated .ScoreType scoreType = 2;</code>
       */
      public Builder addAllScoreTypeValue(
              java.lang.Iterable<java.lang.Integer> values) {
        ensureScoreTypeIsMutable();
        for (int value : values) {
          scoreType_.add(value);
        }
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongHuResponse)
    }

    // @@protoc_insertion_point(class_scope:MahjongHuResponse)
    private static final game.mode.Mahjong.MahjongHuResponse DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongHuResponse();
    }

    public static game.mode.Mahjong.MahjongHuResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongHuResponse>
            PARSER = new com.google.protobuf.AbstractParser<MahjongHuResponse>() {
      public MahjongHuResponse parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongHuResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongHuResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongHuResponse> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongHuResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongStartResponseOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongStartResponse)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 庄家ID
     * </pre>
     * <p>
     * <code>uint32 banker = 1;</code>
     */
    int getBanker();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 2;</code>
     */
    java.util.List<java.lang.Integer> getDiceList();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 2;</code>
     */
    int getDiceCount();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 2;</code>
     */
    int getDice(int index);

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    int getCardsCount();

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    int getCards(int index);

    /**
     * <pre>
     * 剩余张数
     * </pre>
     * <p>
     * <code>uint32 surplusCardsSize = 4;</code>
     */
    int getSurplusCardsSize();

    /**
     * <pre>
     * 赖子
     * </pre>
     * <p>
     * <code>int32 rogue = 5;</code>
     */
    int getRogue();
  }

  /**
   * <pre>
   * 游戏开始 发牌 START
   * </pre>
   * <p>
   * Protobuf type {@code MahjongStartResponse}
   */
  public static final class MahjongStartResponse extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongStartResponse)
          MahjongStartResponseOrBuilder {
    // Use MahjongStartResponse.newBuilder() to construct.
    private MahjongStartResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongStartResponse() {
      banker_ = 0;
      dice_ = java.util.Collections.emptyList();
      cards_ = java.util.Collections.emptyList();
      surplusCardsSize_ = 0;
      rogue_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongStartResponse(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              banker_ = input.readUInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                dice_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              dice_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                dice_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                dice_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {

              surplusCardsSize_ = input.readUInt32();
              break;
            }
            case 40: {

              rogue_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          dice_ = java.util.Collections.unmodifiableList(dice_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongStartResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongStartResponse_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongStartResponse.class, game.mode.Mahjong.MahjongStartResponse.Builder.class);
    }

    private int bitField0_;
    public static final int BANKER_FIELD_NUMBER = 1;
    private int banker_;

    /**
     * <pre>
     * 庄家ID
     * </pre>
     * <p>
     * <code>uint32 banker = 1;</code>
     */
    public int getBanker() {
      return banker_;
    }

    public static final int DICE_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> dice_;

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getDiceList() {
      return dice_;
    }

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 2;</code>
     */
    public int getDiceCount() {
      return dice_.size();
    }

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 2;</code>
     */
    public int getDice(int index) {
      return dice_.get(index);
    }

    private int diceMemoizedSerializedSize = -1;

    public static final int CARDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cards_;

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getCardsList() {
      return cards_;
    }

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }

    /**
     * <pre>
     * 牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private int cardsMemoizedSerializedSize = -1;

    public static final int SURPLUSCARDSSIZE_FIELD_NUMBER = 4;
    private int surplusCardsSize_;

    /**
     * <pre>
     * 剩余张数
     * </pre>
     * <p>
     * <code>uint32 surplusCardsSize = 4;</code>
     */
    public int getSurplusCardsSize() {
      return surplusCardsSize_;
    }

    public static final int ROGUE_FIELD_NUMBER = 5;
    private int rogue_;

    /**
     * <pre>
     * 赖子
     * </pre>
     * <p>
     * <code>int32 rogue = 5;</code>
     */
    public int getRogue() {
      return rogue_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      if (banker_ != 0) {
        output.writeUInt32(1, banker_);
      }
      if (getDiceList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(diceMemoizedSerializedSize);
      }
      for (int i = 0; i < dice_.size(); i++) {
        output.writeUInt32NoTag(dice_.get(i));
      }
      if (getCardsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(cardsMemoizedSerializedSize);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32NoTag(cards_.get(i));
      }
      if (surplusCardsSize_ != 0) {
        output.writeUInt32(4, surplusCardsSize_);
      }
      if (rogue_ != 0) {
        output.writeInt32(5, rogue_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (banker_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(1, banker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dice_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeUInt32SizeNoTag(dice_.get(i));
        }
        size += dataSize;
        if (!getDiceList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        diceMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        if (!getCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      if (surplusCardsSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(4, surplusCardsSize_);
      }
      if (rogue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(5, rogue_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongStartResponse)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongStartResponse other = (game.mode.Mahjong.MahjongStartResponse) obj;

      boolean result = true;
      result = result && (getBanker()
              == other.getBanker());
      result = result && getDiceList()
              .equals(other.getDiceList());
      result = result && getCardsList()
              .equals(other.getCardsList());
      result = result && (getSurplusCardsSize()
              == other.getSurplusCardsSize());
      result = result && (getRogue()
              == other.getRogue());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BANKER_FIELD_NUMBER;
      hash = (53 * hash) + getBanker();
      if (getDiceCount() > 0) {
        hash = (37 * hash) + DICE_FIELD_NUMBER;
        hash = (53 * hash) + getDiceList().hashCode();
      }
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      hash = (37 * hash) + SURPLUSCARDSSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getSurplusCardsSize();
      hash = (37 * hash) + ROGUE_FIELD_NUMBER;
      hash = (53 * hash) + getRogue();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongStartResponse parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongStartResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 游戏开始 发牌 START
     * </pre>
     * <p>
     * Protobuf type {@code MahjongStartResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongStartResponse)
            game.mode.Mahjong.MahjongStartResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongStartResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongStartResponse_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongStartResponse.class, game.mode.Mahjong.MahjongStartResponse.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongStartResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        banker_ = 0;

        dice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        surplusCardsSize_ = 0;

        rogue_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongStartResponse_descriptor;
      }

      public game.mode.Mahjong.MahjongStartResponse getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongStartResponse.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongStartResponse build() {
        game.mode.Mahjong.MahjongStartResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongStartResponse buildPartial() {
        game.mode.Mahjong.MahjongStartResponse result = new game.mode.Mahjong.MahjongStartResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.banker_ = banker_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          dice_ = java.util.Collections.unmodifiableList(dice_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.dice_ = dice_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cards_ = cards_;
        result.surplusCardsSize_ = surplusCardsSize_;
        result.rogue_ = rogue_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongStartResponse) {
          return mergeFrom((game.mode.Mahjong.MahjongStartResponse) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongStartResponse other) {
        if (other == game.mode.Mahjong.MahjongStartResponse.getDefaultInstance()) return this;
        if (other.getBanker() != 0) {
          setBanker(other.getBanker());
        }
        if (!other.dice_.isEmpty()) {
          if (dice_.isEmpty()) {
            dice_ = other.dice_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureDiceIsMutable();
            dice_.addAll(other.dice_);
          }
          onChanged();
        }
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        if (other.getSurplusCardsSize() != 0) {
          setSurplusCardsSize(other.getSurplusCardsSize());
        }
        if (other.getRogue() != 0) {
          setRogue(other.getRogue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongStartResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongStartResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private int banker_;

      /**
       * <pre>
       *庄家ID
       * </pre>
       *
       * <code>uint32 banker = 1;</code>
       */
      public int getBanker() {
        return banker_;
      }

      /**
       * <pre>
       *庄家ID
       * </pre>
       *
       * <code>uint32 banker = 1;</code>
       */
      public Builder setBanker(int value) {

        banker_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *庄家ID
       * </pre>
       *
       * <code>uint32 banker = 1;</code>
       */
      public Builder clearBanker() {

        banker_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> dice_ = java.util.Collections.emptyList();

      private void ensureDiceIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          dice_ = new java.util.ArrayList<java.lang.Integer>(dice_);
          bitField0_ |= 0x00000002;
        }
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public java.util.List<java.lang.Integer>
      getDiceList() {
        return java.util.Collections.unmodifiableList(dice_);
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public int getDiceCount() {
        return dice_.size();
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public int getDice(int index) {
        return dice_.get(index);
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public Builder setDice(
              int index, int value) {
        ensureDiceIsMutable();
        dice_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public Builder addDice(int value) {
        ensureDiceIsMutable();
        dice_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public Builder addAllDice(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiceIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, dice_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *骰子
       * </pre>
       *
       * <code>repeated uint32 dice = 2;</code>
       */
      public Builder clearDice() {
        dice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();

      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000004;
        }
      }

      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public java.util.List<java.lang.Integer>
      getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }

      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }

      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }

      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder setCards(
              int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder addAllCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, cards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int surplusCardsSize_;

      /**
       * <pre>
       *剩余张数
       * </pre>
       *
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public int getSurplusCardsSize() {
        return surplusCardsSize_;
      }

      /**
       * <pre>
       *剩余张数
       * </pre>
       *
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public Builder setSurplusCardsSize(int value) {

        surplusCardsSize_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *剩余张数
       * </pre>
       *
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public Builder clearSurplusCardsSize() {

        surplusCardsSize_ = 0;
        onChanged();
        return this;
      }

      private int rogue_;

      /**
       * <pre>
       *赖子
       * </pre>
       *
       * <code>int32 rogue = 5;</code>
       */
      public int getRogue() {
        return rogue_;
      }

      /**
       * <pre>
       *赖子
       * </pre>
       *
       * <code>int32 rogue = 5;</code>
       */
      public Builder setRogue(int value) {

        rogue_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 赖子
       * </pre>
       * <p>
       * <code>int32 rogue = 5;</code>
       */
      public Builder clearRogue() {

        rogue_ = 0;
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongStartResponse)
    }

    // @@protoc_insertion_point(class_scope:MahjongStartResponse)
    private static final game.mode.Mahjong.MahjongStartResponse DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongStartResponse();
    }

    public static game.mode.Mahjong.MahjongStartResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongStartResponse>
            PARSER = new com.google.protobuf.AbstractParser<MahjongStartResponse>() {
      public MahjongStartResponse parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongStartResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongStartResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongStartResponse> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongStartResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongGameInfoOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongGameInfo)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    java.util.List<game.mode.Mahjong.MahjongSeatGameInfo>
    getSeatsList();

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    game.mode.Mahjong.MahjongSeatGameInfo getSeats(int index);

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    int getSeatsCount();

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    java.util.List<? extends game.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
    getSeatsOrBuilderList();

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    game.mode.Mahjong.MahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
            int index);

    /**
     * <pre>
     * 当前游戏局数
     * </pre>
     * <p>
     * <code>uint32 gameCount = 2;</code>
     */
    int getGameCount();

    /**
     * <pre>
     * 总局数
     * </pre>
     * <p>
     * <code>uint32 gameTimes = 3;</code>
     */
    int getGameTimes();

    /**
     * <pre>
     * 剩余张数
     * </pre>
     * <p>
     * <code>uint32 surplusCardsSize = 4;</code>
     */
    int getSurplusCardsSize();

    /**
     * <pre>
     * 庄家ID
     * </pre>
     * <p>
     * <code>uint32 banker = 5;</code>
     */
    int getBanker();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    java.util.List<java.lang.Integer> getDiceList();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    int getDiceCount();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    int getDice(int index);

    /**
     * <pre>
     * 赖子
     * </pre>
     * <p>
     * <code>int32 rogue = 7;</code>
     */
    int getRogue();

    /**
     * <pre>
     * 上一个出牌的人
     * </pre>
     * <p>
     * <code>uint32 lastPlayedUser = 8;</code>
     */
    int getLastPlayedUser();
  }

  /**
   * <pre>
   * 游戏信息  GAME_INFO
   * </pre>
   * <p>
   * Protobuf type {@code MahjongGameInfo}
   */
  public static final class MahjongGameInfo extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongGameInfo)
          MahjongGameInfoOrBuilder {
    // Use MahjongGameInfo.newBuilder() to construct.
    private MahjongGameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongGameInfo() {
      seats_ = java.util.Collections.emptyList();
      gameCount_ = 0;
      gameTimes_ = 0;
      surplusCardsSize_ = 0;
      banker_ = 0;
      dice_ = java.util.Collections.emptyList();
      rogue_ = 0;
      lastPlayedUser_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongGameInfo(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                seats_ = new java.util.ArrayList<game.mode.Mahjong.MahjongSeatGameInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              seats_.add(
                      input.readMessage(game.mode.Mahjong.MahjongSeatGameInfo.parser(), extensionRegistry));
              break;
            }
            case 16: {

              gameCount_ = input.readUInt32();
              break;
            }
            case 24: {

              gameTimes_ = input.readUInt32();
              break;
            }
            case 32: {

              surplusCardsSize_ = input.readUInt32();
              break;
            }
            case 40: {

              banker_ = input.readUInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                dice_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              dice_.add(input.readUInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                dice_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                dice_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {

              rogue_ = input.readInt32();
              break;
            }
            case 64: {

              lastPlayedUser_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          seats_ = java.util.Collections.unmodifiableList(seats_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          dice_ = java.util.Collections.unmodifiableList(dice_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongGameInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongGameInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongGameInfo.class, game.mode.Mahjong.MahjongGameInfo.Builder.class);
    }

    private int bitField0_;
    public static final int SEATS_FIELD_NUMBER = 1;
    private java.util.List<game.mode.Mahjong.MahjongSeatGameInfo> seats_;

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    public java.util.List<game.mode.Mahjong.MahjongSeatGameInfo> getSeatsList() {
      return seats_;
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    public java.util.List<? extends game.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
    getSeatsOrBuilderList() {
      return seats_;
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    public int getSeatsCount() {
      return seats_.size();
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    public game.mode.Mahjong.MahjongSeatGameInfo getSeats(int index) {
      return seats_.get(index);
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
     */
    public game.mode.Mahjong.MahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
            int index) {
      return seats_.get(index);
    }

    public static final int GAMECOUNT_FIELD_NUMBER = 2;
    private int gameCount_;

    /**
     * <pre>
     * 当前游戏局数
     * </pre>
     * <p>
     * <code>uint32 gameCount = 2;</code>
     */
    public int getGameCount() {
      return gameCount_;
    }

    public static final int GAMETIMES_FIELD_NUMBER = 3;
    private int gameTimes_;

    /**
     * <pre>
     * 总局数
     * </pre>
     * <p>
     * <code>uint32 gameTimes = 3;</code>
     */
    public int getGameTimes() {
      return gameTimes_;
    }

    public static final int SURPLUSCARDSSIZE_FIELD_NUMBER = 4;
    private int surplusCardsSize_;

    /**
     * <pre>
     * 剩余张数
     * </pre>
     * <p>
     * <code>uint32 surplusCardsSize = 4;</code>
     */
    public int getSurplusCardsSize() {
      return surplusCardsSize_;
    }

    public static final int BANKER_FIELD_NUMBER = 5;
    private int banker_;

    /**
     * <pre>
     * 庄家ID
     * </pre>
     * <p>
     * <code>uint32 banker = 5;</code>
     */
    public int getBanker() {
      return banker_;
    }

    public static final int DICE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> dice_;

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    public java.util.List<java.lang.Integer>
    getDiceList() {
      return dice_;
    }

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    public int getDiceCount() {
      return dice_.size();
    }

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    public int getDice(int index) {
      return dice_.get(index);
    }

    private int diceMemoizedSerializedSize = -1;

    public static final int ROGUE_FIELD_NUMBER = 7;
    private int rogue_;

    /**
     * <pre>
     * 赖子
     * </pre>
     * <p>
     * <code>int32 rogue = 7;</code>
     */
    public int getRogue() {
      return rogue_;
    }

    public static final int LASTPLAYEDUSER_FIELD_NUMBER = 8;
    private int lastPlayedUser_;

    /**
     * <pre>
     * 上一个出牌的人
     * </pre>
     * <p>
     * <code>uint32 lastPlayedUser = 8;</code>
     */
    public int getLastPlayedUser() {
      return lastPlayedUser_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < seats_.size(); i++) {
        output.writeMessage(1, seats_.get(i));
      }
      if (gameCount_ != 0) {
        output.writeUInt32(2, gameCount_);
      }
      if (gameTimes_ != 0) {
        output.writeUInt32(3, gameTimes_);
      }
      if (surplusCardsSize_ != 0) {
        output.writeUInt32(4, surplusCardsSize_);
      }
      if (banker_ != 0) {
        output.writeUInt32(5, banker_);
      }
      if (getDiceList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(diceMemoizedSerializedSize);
      }
      for (int i = 0; i < dice_.size(); i++) {
        output.writeUInt32NoTag(dice_.get(i));
      }
      if (rogue_ != 0) {
        output.writeInt32(7, rogue_);
      }
      if (lastPlayedUser_ != 0) {
        output.writeUInt32(8, lastPlayedUser_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < seats_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(1, seats_.get(i));
      }
      if (gameCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(2, gameCount_);
      }
      if (gameTimes_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(3, gameTimes_);
      }
      if (surplusCardsSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(4, surplusCardsSize_);
      }
      if (banker_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(5, banker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dice_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeUInt32SizeNoTag(dice_.get(i));
        }
        size += dataSize;
        if (!getDiceList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        diceMemoizedSerializedSize = dataSize;
      }
      if (rogue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(7, rogue_);
      }
      if (lastPlayedUser_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(8, lastPlayedUser_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongGameInfo)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongGameInfo other = (game.mode.Mahjong.MahjongGameInfo) obj;

      boolean result = true;
      result = result && getSeatsList()
              .equals(other.getSeatsList());
      result = result && (getGameCount()
              == other.getGameCount());
      result = result && (getGameTimes()
              == other.getGameTimes());
      result = result && (getSurplusCardsSize()
              == other.getSurplusCardsSize());
      result = result && (getBanker()
              == other.getBanker());
      result = result && getDiceList()
              .equals(other.getDiceList());
      result = result && (getRogue()
              == other.getRogue());
      result = result && (getLastPlayedUser()
              == other.getLastPlayedUser());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSeatsCount() > 0) {
        hash = (37 * hash) + SEATS_FIELD_NUMBER;
        hash = (53 * hash) + getSeatsList().hashCode();
      }
      hash = (37 * hash) + GAMECOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getGameCount();
      hash = (37 * hash) + GAMETIMES_FIELD_NUMBER;
      hash = (53 * hash) + getGameTimes();
      hash = (37 * hash) + SURPLUSCARDSSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getSurplusCardsSize();
      hash = (37 * hash) + BANKER_FIELD_NUMBER;
      hash = (53 * hash) + getBanker();
      if (getDiceCount() > 0) {
        hash = (37 * hash) + DICE_FIELD_NUMBER;
        hash = (53 * hash) + getDiceList().hashCode();
      }
      hash = (37 * hash) + ROGUE_FIELD_NUMBER;
      hash = (53 * hash) + getRogue();
      hash = (37 * hash) + LASTPLAYEDUSER_FIELD_NUMBER;
      hash = (53 * hash) + getLastPlayedUser();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongGameInfo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongGameInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 游戏信息  GAME_INFO
     * </pre>
     * <p>
     * Protobuf type {@code MahjongGameInfo}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongGameInfo)
            game.mode.Mahjong.MahjongGameInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongGameInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongGameInfo_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongGameInfo.class, game.mode.Mahjong.MahjongGameInfo.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongGameInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSeatsFieldBuilder();
        }
      }

      public Builder clear() {
        super.clear();
        if (seatsBuilder_ == null) {
          seats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          seatsBuilder_.clear();
        }
        gameCount_ = 0;

        gameTimes_ = 0;

        surplusCardsSize_ = 0;

        banker_ = 0;

        dice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        rogue_ = 0;

        lastPlayedUser_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongGameInfo_descriptor;
      }

      public game.mode.Mahjong.MahjongGameInfo getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongGameInfo.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongGameInfo build() {
        game.mode.Mahjong.MahjongGameInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongGameInfo buildPartial() {
        game.mode.Mahjong.MahjongGameInfo result = new game.mode.Mahjong.MahjongGameInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (seatsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            seats_ = java.util.Collections.unmodifiableList(seats_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.seats_ = seats_;
        } else {
          result.seats_ = seatsBuilder_.build();
        }
        result.gameCount_ = gameCount_;
        result.gameTimes_ = gameTimes_;
        result.surplusCardsSize_ = surplusCardsSize_;
        result.banker_ = banker_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          dice_ = java.util.Collections.unmodifiableList(dice_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.dice_ = dice_;
        result.rogue_ = rogue_;
        result.lastPlayedUser_ = lastPlayedUser_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongGameInfo) {
          return mergeFrom((game.mode.Mahjong.MahjongGameInfo) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongGameInfo other) {
        if (other == game.mode.Mahjong.MahjongGameInfo.getDefaultInstance()) return this;
        if (seatsBuilder_ == null) {
          if (!other.seats_.isEmpty()) {
            if (seats_.isEmpty()) {
              seats_ = other.seats_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSeatsIsMutable();
              seats_.addAll(other.seats_);
            }
            onChanged();
          }
        } else {
          if (!other.seats_.isEmpty()) {
            if (seatsBuilder_.isEmpty()) {
              seatsBuilder_.dispose();
              seatsBuilder_ = null;
              seats_ = other.seats_;
              bitField0_ = (bitField0_ & ~0x00000001);
              seatsBuilder_ =
                      com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                              getSeatsFieldBuilder() : null;
            } else {
              seatsBuilder_.addAllMessages(other.seats_);
            }
          }
        }
        if (other.getGameCount() != 0) {
          setGameCount(other.getGameCount());
        }
        if (other.getGameTimes() != 0) {
          setGameTimes(other.getGameTimes());
        }
        if (other.getSurplusCardsSize() != 0) {
          setSurplusCardsSize(other.getSurplusCardsSize());
        }
        if (other.getBanker() != 0) {
          setBanker(other.getBanker());
        }
        if (!other.dice_.isEmpty()) {
          if (dice_.isEmpty()) {
            dice_ = other.dice_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDiceIsMutable();
            dice_.addAll(other.dice_);
          }
          onChanged();
        }
        if (other.getRogue() != 0) {
          setRogue(other.getRogue());
        }
        if (other.getLastPlayedUser() != 0) {
          setLastPlayedUser(other.getLastPlayedUser());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongGameInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongGameInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private java.util.List<game.mode.Mahjong.MahjongSeatGameInfo> seats_ =
              java.util.Collections.emptyList();

      private void ensureSeatsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          seats_ = new java.util.ArrayList<game.mode.Mahjong.MahjongSeatGameInfo>(seats_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongSeatGameInfo, game.mode.Mahjong.MahjongSeatGameInfo.Builder, game.mode.Mahjong.MahjongSeatGameInfoOrBuilder> seatsBuilder_;

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongSeatGameInfo> getSeatsList() {
        if (seatsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(seats_);
        } else {
          return seatsBuilder_.getMessageList();
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public int getSeatsCount() {
        if (seatsBuilder_ == null) {
          return seats_.size();
        } else {
          return seatsBuilder_.getCount();
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInfo getSeats(int index) {
        if (seatsBuilder_ == null) {
          return seats_.get(index);
        } else {
          return seatsBuilder_.getMessage(index);
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder setSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInfo value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.set(index, value);
          onChanged();
        } else {
          seatsBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder setSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInfo.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.set(index, builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder addSeats(game.mode.Mahjong.MahjongSeatGameInfo value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.add(value);
          onChanged();
        } else {
          seatsBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder addSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInfo value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.add(index, value);
          onChanged();
        } else {
          seatsBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder addSeats(
              game.mode.Mahjong.MahjongSeatGameInfo.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.add(builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder addSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInfo.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.add(index, builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder addAllSeats(
              java.lang.Iterable<? extends game.mode.Mahjong.MahjongSeatGameInfo> values) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, seats_);
          onChanged();
        } else {
          seatsBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder clearSeats() {
        if (seatsBuilder_ == null) {
          seats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          seatsBuilder_.clear();
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public Builder removeSeats(int index) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.remove(index);
          onChanged();
        } else {
          seatsBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInfo.Builder getSeatsBuilder(
              int index) {
        return getSeatsFieldBuilder().getBuilder(index);
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInfoOrBuilder getSeatsOrBuilder(
              int index) {
        if (seatsBuilder_ == null) {
          return seats_.get(index);
        } else {
          return seatsBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public java.util.List<? extends game.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
      getSeatsOrBuilderList() {
        if (seatsBuilder_ != null) {
          return seatsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(seats_);
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInfo.Builder addSeatsBuilder() {
        return getSeatsFieldBuilder().addBuilder(
                game.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance());
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInfo.Builder addSeatsBuilder(
              int index) {
        return getSeatsFieldBuilder().addBuilder(
                index, game.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance());
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInfo seats = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongSeatGameInfo.Builder>
      getSeatsBuilderList() {
        return getSeatsFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongSeatGameInfo, game.mode.Mahjong.MahjongSeatGameInfo.Builder, game.mode.Mahjong.MahjongSeatGameInfoOrBuilder>
      getSeatsFieldBuilder() {
        if (seatsBuilder_ == null) {
          seatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  game.mode.Mahjong.MahjongSeatGameInfo, game.mode.Mahjong.MahjongSeatGameInfo.Builder, game.mode.Mahjong.MahjongSeatGameInfoOrBuilder>(
                  seats_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          seats_ = null;
        }
        return seatsBuilder_;
      }

      private int gameCount_;

      /**
       * <pre>
       * 当前游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameCount = 2;</code>
       */
      public int getGameCount() {
        return gameCount_;
      }

      /**
       * <pre>
       * 当前游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameCount = 2;</code>
       */
      public Builder setGameCount(int value) {

        gameCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 当前游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameCount = 2;</code>
       */
      public Builder clearGameCount() {

        gameCount_ = 0;
        onChanged();
        return this;
      }

      private int gameTimes_;

      /**
       * <pre>
       * 总局数
       * </pre>
       * <p>
       * <code>uint32 gameTimes = 3;</code>
       */
      public int getGameTimes() {
        return gameTimes_;
      }

      /**
       * <pre>
       * 总局数
       * </pre>
       * <p>
       * <code>uint32 gameTimes = 3;</code>
       */
      public Builder setGameTimes(int value) {

        gameTimes_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 总局数
       * </pre>
       * <p>
       * <code>uint32 gameTimes = 3;</code>
       */
      public Builder clearGameTimes() {

        gameTimes_ = 0;
        onChanged();
        return this;
      }

      private int surplusCardsSize_;

      /**
       * <pre>
       * 剩余张数
       * </pre>
       * <p>
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public int getSurplusCardsSize() {
        return surplusCardsSize_;
      }

      /**
       * <pre>
       * 剩余张数
       * </pre>
       * <p>
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public Builder setSurplusCardsSize(int value) {

        surplusCardsSize_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 剩余张数
       * </pre>
       * <p>
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public Builder clearSurplusCardsSize() {

        surplusCardsSize_ = 0;
        onChanged();
        return this;
      }

      private int banker_;

      /**
       * <pre>
       * 庄家ID
       * </pre>
       * <p>
       * <code>uint32 banker = 5;</code>
       */
      public int getBanker() {
        return banker_;
      }

      /**
       * <pre>
       * 庄家ID
       * </pre>
       * <p>
       * <code>uint32 banker = 5;</code>
       */
      public Builder setBanker(int value) {

        banker_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 庄家ID
       * </pre>
       * <p>
       * <code>uint32 banker = 5;</code>
       */
      public Builder clearBanker() {

        banker_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> dice_ = java.util.Collections.emptyList();

      private void ensureDiceIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          dice_ = new java.util.ArrayList<java.lang.Integer>(dice_);
          bitField0_ |= 0x00000020;
        }
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public java.util.List<java.lang.Integer>
      getDiceList() {
        return java.util.Collections.unmodifiableList(dice_);
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public int getDiceCount() {
        return dice_.size();
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public int getDice(int index) {
        return dice_.get(index);
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder setDice(
              int index, int value) {
        ensureDiceIsMutable();
        dice_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder addDice(int value) {
        ensureDiceIsMutable();
        dice_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder addAllDice(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiceIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, dice_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder clearDice() {
        dice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private int rogue_;

      /**
       * <pre>
       * 赖子
       * </pre>
       * <p>
       * <code>int32 rogue = 7;</code>
       */
      public int getRogue() {
        return rogue_;
      }

      /**
       * <pre>
       * 赖子
       * </pre>
       * <p>
       * <code>int32 rogue = 7;</code>
       */
      public Builder setRogue(int value) {

        rogue_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 赖子
       * </pre>
       * <p>
       * <code>int32 rogue = 7;</code>
       */
      public Builder clearRogue() {

        rogue_ = 0;
        onChanged();
        return this;
      }

      private int lastPlayedUser_;

      /**
       * <pre>
       * 上一个出牌的人
       * </pre>
       * <p>
       * <code>uint32 lastPlayedUser = 8;</code>
       */
      public int getLastPlayedUser() {
        return lastPlayedUser_;
      }

      /**
       * <pre>
       * 上一个出牌的人
       * </pre>
       * <p>
       * <code>uint32 lastPlayedUser = 8;</code>
       */
      public Builder setLastPlayedUser(int value) {

        lastPlayedUser_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 上一个出牌的人
       * </pre>
       * <p>
       * <code>uint32 lastPlayedUser = 8;</code>
       */
      public Builder clearLastPlayedUser() {

        lastPlayedUser_ = 0;
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongGameInfo)
    }

    // @@protoc_insertion_point(class_scope:MahjongGameInfo)
    private static final game.mode.Mahjong.MahjongGameInfo DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongGameInfo();
    }

    public static game.mode.Mahjong.MahjongGameInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongGameInfo>
            PARSER = new com.google.protobuf.AbstractParser<MahjongGameInfo>() {
      public MahjongGameInfo parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongGameInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongGameInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongGameInfo> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongGameInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongSeatGameInfoOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongSeatGameInfo)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID
     * </pre>
     * <p>
     * <code>uint32 ID = 1;</code>
     */
    int getID();

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    java.util.List<java.lang.Integer> getInitialCardsList();

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    int getInitialCardsCount();

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    int getInitialCards(int index);

    /**
     * <pre>
     * 当前手牌(如果是其他玩家的,就没有)
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();

    /**
     * <pre>
     * 当前手牌(如果是其他玩家的,就没有)
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    int getCardsCount();

    /**
     * <pre>
     * 当前手牌(如果是其他玩家的,就没有)
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    int getCards(int index);

    /**
     * <pre>
     * 其他玩家手牌数量
     * </pre>
     * <p>
     * <code>uint32 cardsSize = 4;</code>
     */
    int getCardsSize();

    /**
     * <pre>
     * 碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 5;</code>
     */
    java.util.List<java.lang.Integer> getPengCardsList();

    /**
     * <pre>
     * 碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 5;</code>
     */
    int getPengCardsCount();

    /**
     * <pre>
     * 碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 5;</code>
     */
    int getPengCards(int index);

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 6;</code>
     */
    java.util.List<java.lang.Integer> getAnGangCardsList();

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 6;</code>
     */
    int getAnGangCardsCount();

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 6;</code>
     */
    int getAnGangCards(int index);

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 7;</code>
     */
    java.util.List<java.lang.Integer> getMingGangCardsList();

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 7;</code>
     */
    int getMingGangCardsCount();

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 7;</code>
     */
    int getMingGangCards(int index);

    /**
     * <pre>
     * 吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    java.util.List<java.lang.Integer> getChiCardsList();

    /**
     * <pre>
     * 吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    int getChiCardsCount();

    /**
     * <pre>
     * 吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    int getChiCards(int index);

    /**
     * <pre>
     * 出过的牌
     * </pre>
     * <p>
     * <code>repeated int32 playedCards = 9;</code>
     */
    java.util.List<java.lang.Integer> getPlayedCardsList();

    /**
     * <pre>
     * 出过的牌
     * </pre>
     * <p>
     * <code>repeated int32 playedCards = 9;</code>
     */
    int getPlayedCardsCount();

    /**
     * <pre>
     * 出过的牌
     * </pre>
     * <p>
     * <code>repeated int32 playedCards = 9;</code>
     */
    int getPlayedCards(int index);
  }

  /**
   * <pre>
   * 玩家游戏信息
   * </pre>
   * <p>
   * Protobuf type {@code MahjongSeatGameInfo}
   */
  public static final class MahjongSeatGameInfo extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongSeatGameInfo)
          MahjongSeatGameInfoOrBuilder {
    // Use MahjongSeatGameInfo.newBuilder() to construct.
    private MahjongSeatGameInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongSeatGameInfo() {
      iD_ = 0;
      initialCards_ = java.util.Collections.emptyList();
      cards_ = java.util.Collections.emptyList();
      cardsSize_ = 0;
      pengCards_ = java.util.Collections.emptyList();
      anGangCards_ = java.util.Collections.emptyList();
      mingGangCards_ = java.util.Collections.emptyList();
      chiCards_ = java.util.Collections.emptyList();
      playedCards_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongSeatGameInfo(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              iD_ = input.readUInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              initialCards_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                initialCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {

              cardsSize_ = input.readUInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              pengCards_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                pengCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              anGangCards_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                anGangCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              mingGangCards_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                mingGangCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              chiCards_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                chiCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              playedCards_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                playedCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                playedCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongSeatGameInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongSeatGameInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongSeatGameInfo.class, game.mode.Mahjong.MahjongSeatGameInfo.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int iD_;

    /**
     * <pre>
     * ID
     * </pre>
     * <p>
     * <code>uint32 ID = 1;</code>
     */
    public int getID() {
      return iD_;
    }

    public static final int INITIALCARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> initialCards_;

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getInitialCardsList() {
      return initialCards_;
    }

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    public int getInitialCardsCount() {
      return initialCards_.size();
    }

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    public int getInitialCards(int index) {
      return initialCards_.get(index);
    }

    private int initialCardsMemoizedSerializedSize = -1;

    public static final int CARDS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> cards_;

    /**
     * <pre>
     * 当前手牌(如果是其他玩家的,就没有)
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getCardsList() {
      return cards_;
    }

    /**
     * <pre>
     * 当前手牌(如果是其他玩家的,就没有)
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }

    /**
     * <pre>
     * 当前手牌(如果是其他玩家的,就没有)
     * </pre>
     * <p>
     * <code>repeated int32 cards = 3;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private int cardsMemoizedSerializedSize = -1;

    public static final int CARDSSIZE_FIELD_NUMBER = 4;
    private int cardsSize_;

    /**
     * <pre>
     * 其他玩家手牌数量
     * </pre>
     * <p>
     * <code>uint32 cardsSize = 4;</code>
     */
    public int getCardsSize() {
      return cardsSize_;
    }

    public static final int PENGCARDS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> pengCards_;

    /**
     * <pre>
     * 碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 5;</code>
     */
    public java.util.List<java.lang.Integer>
    getPengCardsList() {
      return pengCards_;
    }

    /**
     * <pre>
     * 碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 5;</code>
     */
    public int getPengCardsCount() {
      return pengCards_.size();
    }

    /**
     * <pre>
     * 碰的牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 5;</code>
     */
    public int getPengCards(int index) {
      return pengCards_.get(index);
    }

    private int pengCardsMemoizedSerializedSize = -1;

    public static final int ANGANGCARDS_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> anGangCards_;

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 6;</code>
     */
    public java.util.List<java.lang.Integer>
    getAnGangCardsList() {
      return anGangCards_;
    }

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 6;</code>
     */
    public int getAnGangCardsCount() {
      return anGangCards_.size();
    }

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 6;</code>
     */
    public int getAnGangCards(int index) {
      return anGangCards_.get(index);
    }

    private int anGangCardsMemoizedSerializedSize = -1;

    public static final int MINGGANGCARDS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> mingGangCards_;

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 7;</code>
     */
    public java.util.List<java.lang.Integer>
    getMingGangCardsList() {
      return mingGangCards_;
    }

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 7;</code>
     */
    public int getMingGangCardsCount() {
      return mingGangCards_.size();
    }

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 7;</code>
     */
    public int getMingGangCards(int index) {
      return mingGangCards_.get(index);
    }

    private int mingGangCardsMemoizedSerializedSize = -1;

    public static final int CHICARDS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> chiCards_;

    /**
     * <pre>
     * 吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    public java.util.List<java.lang.Integer>
    getChiCardsList() {
      return chiCards_;
    }

    /**
     * <pre>
     * 吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    public int getChiCardsCount() {
      return chiCards_.size();
    }

    /**
     * <pre>
     * 吃的牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    public int getChiCards(int index) {
      return chiCards_.get(index);
    }

    private int chiCardsMemoizedSerializedSize = -1;

    public static final int PLAYEDCARDS_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> playedCards_;

    /**
     * <pre>
     * 出过的牌
     * </pre>
     * <p>
     * <code>repeated int32 playedCards = 9;</code>
     */
    public java.util.List<java.lang.Integer>
    getPlayedCardsList() {
      return playedCards_;
    }

    /**
     * <pre>
     * 出过的牌
     * </pre>
     * <p>
     * <code>repeated int32 playedCards = 9;</code>
     */
    public int getPlayedCardsCount() {
      return playedCards_.size();
    }

    /**
     * <pre>
     * 出过的牌
     * </pre>
     * <p>
     * <code>repeated int32 playedCards = 9;</code>
     */
    public int getPlayedCards(int index) {
      return playedCards_.get(index);
    }

    private int playedCardsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      if (iD_ != 0) {
        output.writeUInt32(1, iD_);
      }
      if (getInitialCardsList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(initialCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < initialCards_.size(); i++) {
        output.writeInt32NoTag(initialCards_.get(i));
      }
      if (getCardsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(cardsMemoizedSerializedSize);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32NoTag(cards_.get(i));
      }
      if (cardsSize_ != 0) {
        output.writeUInt32(4, cardsSize_);
      }
      if (getPengCardsList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(pengCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < pengCards_.size(); i++) {
        output.writeInt32NoTag(pengCards_.get(i));
      }
      if (getAnGangCardsList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(anGangCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < anGangCards_.size(); i++) {
        output.writeInt32NoTag(anGangCards_.get(i));
      }
      if (getMingGangCardsList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(mingGangCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < mingGangCards_.size(); i++) {
        output.writeInt32NoTag(mingGangCards_.get(i));
      }
      if (getChiCardsList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(chiCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < chiCards_.size(); i++) {
        output.writeInt32NoTag(chiCards_.get(i));
      }
      if (getPlayedCardsList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(playedCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < playedCards_.size(); i++) {
        output.writeInt32NoTag(playedCards_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (iD_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(1, iD_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < initialCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(initialCards_.get(i));
        }
        size += dataSize;
        if (!getInitialCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        initialCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        if (!getCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      if (cardsSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(4, cardsSize_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pengCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(pengCards_.get(i));
        }
        size += dataSize;
        if (!getPengCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        pengCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < anGangCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(anGangCards_.get(i));
        }
        size += dataSize;
        if (!getAnGangCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        anGangCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mingGangCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(mingGangCards_.get(i));
        }
        size += dataSize;
        if (!getMingGangCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        mingGangCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chiCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(chiCards_.get(i));
        }
        size += dataSize;
        if (!getChiCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        chiCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playedCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(playedCards_.get(i));
        }
        size += dataSize;
        if (!getPlayedCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        playedCardsMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongSeatGameInfo)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongSeatGameInfo other = (game.mode.Mahjong.MahjongSeatGameInfo) obj;

      boolean result = true;
      result = result && (getID()
              == other.getID());
      result = result && getInitialCardsList()
              .equals(other.getInitialCardsList());
      result = result && getCardsList()
              .equals(other.getCardsList());
      result = result && (getCardsSize()
              == other.getCardsSize());
      result = result && getPengCardsList()
              .equals(other.getPengCardsList());
      result = result && getAnGangCardsList()
              .equals(other.getAnGangCardsList());
      result = result && getMingGangCardsList()
              .equals(other.getMingGangCardsList());
      result = result && getChiCardsList()
              .equals(other.getChiCardsList());
      result = result && getPlayedCardsList()
              .equals(other.getPlayedCardsList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getID();
      if (getInitialCardsCount() > 0) {
        hash = (37 * hash) + INITIALCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getInitialCardsList().hashCode();
      }
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      hash = (37 * hash) + CARDSSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getCardsSize();
      if (getPengCardsCount() > 0) {
        hash = (37 * hash) + PENGCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getPengCardsList().hashCode();
      }
      if (getAnGangCardsCount() > 0) {
        hash = (37 * hash) + ANGANGCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getAnGangCardsList().hashCode();
      }
      if (getMingGangCardsCount() > 0) {
        hash = (37 * hash) + MINGGANGCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getMingGangCardsList().hashCode();
      }
      if (getChiCardsCount() > 0) {
        hash = (37 * hash) + CHICARDS_FIELD_NUMBER;
        hash = (53 * hash) + getChiCardsList().hashCode();
      }
      if (getPlayedCardsCount() > 0) {
        hash = (37 * hash) + PLAYEDCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getPlayedCardsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongSeatGameInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 玩家游戏信息
     * </pre>
     * <p>
     * Protobuf type {@code MahjongSeatGameInfo}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongSeatGameInfo)
            game.mode.Mahjong.MahjongSeatGameInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameInfo_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongSeatGameInfo.class, game.mode.Mahjong.MahjongSeatGameInfo.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongSeatGameInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        iD_ = 0;

        initialCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        cardsSize_ = 0;

        pengCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        anGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        mingGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        chiCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        playedCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameInfo_descriptor;
      }

      public game.mode.Mahjong.MahjongSeatGameInfo getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongSeatGameInfo build() {
        game.mode.Mahjong.MahjongSeatGameInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongSeatGameInfo buildPartial() {
        game.mode.Mahjong.MahjongSeatGameInfo result = new game.mode.Mahjong.MahjongSeatGameInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.iD_ = iD_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.initialCards_ = initialCards_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.cards_ = cards_;
        result.cardsSize_ = cardsSize_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.pengCards_ = pengCards_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.anGangCards_ = anGangCards_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.mingGangCards_ = mingGangCards_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.chiCards_ = chiCards_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          playedCards_ = java.util.Collections.unmodifiableList(playedCards_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.playedCards_ = playedCards_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongSeatGameInfo) {
          return mergeFrom((game.mode.Mahjong.MahjongSeatGameInfo) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongSeatGameInfo other) {
        if (other == game.mode.Mahjong.MahjongSeatGameInfo.getDefaultInstance()) return this;
        if (other.getID() != 0) {
          setID(other.getID());
        }
        if (!other.initialCards_.isEmpty()) {
          if (initialCards_.isEmpty()) {
            initialCards_ = other.initialCards_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureInitialCardsIsMutable();
            initialCards_.addAll(other.initialCards_);
          }
          onChanged();
        }
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        if (other.getCardsSize() != 0) {
          setCardsSize(other.getCardsSize());
        }
        if (!other.pengCards_.isEmpty()) {
          if (pengCards_.isEmpty()) {
            pengCards_ = other.pengCards_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensurePengCardsIsMutable();
            pengCards_.addAll(other.pengCards_);
          }
          onChanged();
        }
        if (!other.anGangCards_.isEmpty()) {
          if (anGangCards_.isEmpty()) {
            anGangCards_ = other.anGangCards_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureAnGangCardsIsMutable();
            anGangCards_.addAll(other.anGangCards_);
          }
          onChanged();
        }
        if (!other.mingGangCards_.isEmpty()) {
          if (mingGangCards_.isEmpty()) {
            mingGangCards_ = other.mingGangCards_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureMingGangCardsIsMutable();
            mingGangCards_.addAll(other.mingGangCards_);
          }
          onChanged();
        }
        if (!other.chiCards_.isEmpty()) {
          if (chiCards_.isEmpty()) {
            chiCards_ = other.chiCards_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureChiCardsIsMutable();
            chiCards_.addAll(other.chiCards_);
          }
          onChanged();
        }
        if (!other.playedCards_.isEmpty()) {
          if (playedCards_.isEmpty()) {
            playedCards_ = other.playedCards_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePlayedCardsIsMutable();
            playedCards_.addAll(other.playedCards_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongSeatGameInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongSeatGameInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private int iD_;

      /**
       * <pre>
       *ID
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public int getID() {
        return iD_;
      }

      /**
       * <pre>
       *ID
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public Builder setID(int value) {

        iD_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *ID
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public Builder clearID() {

        iD_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> initialCards_ = java.util.Collections.emptyList();

      private void ensureInitialCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          initialCards_ = new java.util.ArrayList<java.lang.Integer>(initialCards_);
          bitField0_ |= 0x00000002;
        }
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public java.util.List<java.lang.Integer>
      getInitialCardsList() {
        return java.util.Collections.unmodifiableList(initialCards_);
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public int getInitialCardsCount() {
        return initialCards_.size();
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public int getInitialCards(int index) {
        return initialCards_.get(index);
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder setInitialCards(
              int index, int value) {
        ensureInitialCardsIsMutable();
        initialCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder addInitialCards(int value) {
        ensureInitialCardsIsMutable();
        initialCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder addAllInitialCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInitialCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, initialCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder clearInitialCards() {
        initialCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();

      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000004;
        }
      }

      /**
       * <pre>
       *当前手牌(如果是其他玩家的,就没有)
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public java.util.List<java.lang.Integer>
      getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }

      /**
       * <pre>
       *当前手牌(如果是其他玩家的,就没有)
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }

      /**
       * <pre>
       *当前手牌(如果是其他玩家的,就没有)
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }

      /**
       * <pre>
       *当前手牌(如果是其他玩家的,就没有)
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder setCards(
              int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *当前手牌(如果是其他玩家的,就没有)
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *当前手牌(如果是其他玩家的,就没有)
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder addAllCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, cards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *当前手牌(如果是其他玩家的,就没有)
       * </pre>
       *
       * <code>repeated int32 cards = 3;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int cardsSize_;

      /**
       * <pre>
       *其他玩家手牌数量
       * </pre>
       *
       * <code>uint32 cardsSize = 4;</code>
       */
      public int getCardsSize() {
        return cardsSize_;
      }

      /**
       * <pre>
       *其他玩家手牌数量
       * </pre>
       *
       * <code>uint32 cardsSize = 4;</code>
       */
      public Builder setCardsSize(int value) {

        cardsSize_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *其他玩家手牌数量
       * </pre>
       *
       * <code>uint32 cardsSize = 4;</code>
       */
      public Builder clearCardsSize() {

        cardsSize_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> pengCards_ = java.util.Collections.emptyList();

      private void ensurePengCardsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          pengCards_ = new java.util.ArrayList<java.lang.Integer>(pengCards_);
          bitField0_ |= 0x00000010;
        }
      }

      /**
       * <pre>
       *碰的牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 5;</code>
       */
      public java.util.List<java.lang.Integer>
      getPengCardsList() {
        return java.util.Collections.unmodifiableList(pengCards_);
      }

      /**
       * <pre>
       *碰的牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 5;</code>
       */
      public int getPengCardsCount() {
        return pengCards_.size();
      }

      /**
       * <pre>
       *碰的牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 5;</code>
       */
      public int getPengCards(int index) {
        return pengCards_.get(index);
      }

      /**
       * <pre>
       *碰的牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 5;</code>
       */
      public Builder setPengCards(
              int index, int value) {
        ensurePengCardsIsMutable();
        pengCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *碰的牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 5;</code>
       */
      public Builder addPengCards(int value) {
        ensurePengCardsIsMutable();
        pengCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *碰的牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 5;</code>
       */
      public Builder addAllPengCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePengCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, pengCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *碰的牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 5;</code>
       */
      public Builder clearPengCards() {
        pengCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> anGangCards_ = java.util.Collections.emptyList();

      private void ensureAnGangCardsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          anGangCards_ = new java.util.ArrayList<java.lang.Integer>(anGangCards_);
          bitField0_ |= 0x00000020;
        }
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 6;</code>
       */
      public java.util.List<java.lang.Integer>
      getAnGangCardsList() {
        return java.util.Collections.unmodifiableList(anGangCards_);
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 6;</code>
       */
      public int getAnGangCardsCount() {
        return anGangCards_.size();
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 6;</code>
       */
      public int getAnGangCards(int index) {
        return anGangCards_.get(index);
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 6;</code>
       */
      public Builder setAnGangCards(
              int index, int value) {
        ensureAnGangCardsIsMutable();
        anGangCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 6;</code>
       */
      public Builder addAnGangCards(int value) {
        ensureAnGangCardsIsMutable();
        anGangCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 6;</code>
       */
      public Builder addAllAnGangCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAnGangCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, anGangCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 6;</code>
       */
      public Builder clearAnGangCards() {
        anGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> mingGangCards_ = java.util.Collections.emptyList();

      private void ensureMingGangCardsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          mingGangCards_ = new java.util.ArrayList<java.lang.Integer>(mingGangCards_);
          bitField0_ |= 0x00000040;
        }
      }

      /**
       * <pre>
       *明杠的牌
       * </pre>
       *
       * <code>repeated int32 mingGangCards = 7;</code>
       */
      public java.util.List<java.lang.Integer>
      getMingGangCardsList() {
        return java.util.Collections.unmodifiableList(mingGangCards_);
      }

      /**
       * <pre>
       *明杠的牌
       * </pre>
       *
       * <code>repeated int32 mingGangCards = 7;</code>
       */
      public int getMingGangCardsCount() {
        return mingGangCards_.size();
      }

      /**
       * <pre>
       *明杠的牌
       * </pre>
       *
       * <code>repeated int32 mingGangCards = 7;</code>
       */
      public int getMingGangCards(int index) {
        return mingGangCards_.get(index);
      }

      /**
       * <pre>
       *明杠的牌
       * </pre>
       *
       * <code>repeated int32 mingGangCards = 7;</code>
       */
      public Builder setMingGangCards(
              int index, int value) {
        ensureMingGangCardsIsMutable();
        mingGangCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *明杠的牌
       * </pre>
       *
       * <code>repeated int32 mingGangCards = 7;</code>
       */
      public Builder addMingGangCards(int value) {
        ensureMingGangCardsIsMutable();
        mingGangCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *明杠的牌
       * </pre>
       *
       * <code>repeated int32 mingGangCards = 7;</code>
       */
      public Builder addAllMingGangCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMingGangCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, mingGangCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *明杠的牌
       * </pre>
       *
       * <code>repeated int32 mingGangCards = 7;</code>
       */
      public Builder clearMingGangCards() {
        mingGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> chiCards_ = java.util.Collections.emptyList();

      private void ensureChiCardsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          chiCards_ = new java.util.ArrayList<java.lang.Integer>(chiCards_);
          bitField0_ |= 0x00000080;
        }
      }

      /**
       * <pre>
       *吃的牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public java.util.List<java.lang.Integer>
      getChiCardsList() {
        return java.util.Collections.unmodifiableList(chiCards_);
      }

      /**
       * <pre>
       * 吃的牌
       * </pre>
       * <p>
       * <code>repeated int32 chiCards = 8;</code>
       */
      public int getChiCardsCount() {
        return chiCards_.size();
      }

      /**
       * <pre>
       *吃的牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public int getChiCards(int index) {
        return chiCards_.get(index);
      }

      /**
       * <pre>
       *吃的牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder setChiCards(
              int index, int value) {
        ensureChiCardsIsMutable();
        chiCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 吃的牌
       * </pre>
       * <p>
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder addChiCards(int value) {
        ensureChiCardsIsMutable();
        chiCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 吃的牌
       * </pre>
       * <p>
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder addAllChiCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChiCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, chiCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 吃的牌
       * </pre>
       * <p>
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder clearChiCards() {
        chiCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> playedCards_ = java.util.Collections.emptyList();

      private void ensurePlayedCardsIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          playedCards_ = new java.util.ArrayList<java.lang.Integer>(playedCards_);
          bitField0_ |= 0x00000100;
        }
      }

      /**
       * <pre>
       * 出过的牌
       * </pre>
       * <p>
       * <code>repeated int32 playedCards = 9;</code>
       */
      public java.util.List<java.lang.Integer>
      getPlayedCardsList() {
        return java.util.Collections.unmodifiableList(playedCards_);
      }

      /**
       * <pre>
       * 出过的牌
       * </pre>
       * <p>
       * <code>repeated int32 playedCards = 9;</code>
       */
      public int getPlayedCardsCount() {
        return playedCards_.size();
      }

      /**
       * <pre>
       * 出过的牌
       * </pre>
       * <p>
       * <code>repeated int32 playedCards = 9;</code>
       */
      public int getPlayedCards(int index) {
        return playedCards_.get(index);
      }

      /**
       * <pre>
       * 出过的牌
       * </pre>
       * <p>
       * <code>repeated int32 playedCards = 9;</code>
       */
      public Builder setPlayedCards(
              int index, int value) {
        ensurePlayedCardsIsMutable();
        playedCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 出过的牌
       * </pre>
       * <p>
       * <code>repeated int32 playedCards = 9;</code>
       */
      public Builder addPlayedCards(int value) {
        ensurePlayedCardsIsMutable();
        playedCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 出过的牌
       * </pre>
       * <p>
       * <code>repeated int32 playedCards = 9;</code>
       */
      public Builder addAllPlayedCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayedCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, playedCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 出过的牌
       * </pre>
       * <p>
       * <code>repeated int32 playedCards = 9;</code>
       */
      public Builder clearPlayedCards() {
        playedCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongSeatGameInfo)
    }

    // @@protoc_insertion_point(class_scope:MahjongSeatGameInfo)
    private static final game.mode.Mahjong.MahjongSeatGameInfo DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongSeatGameInfo();
    }

    public static game.mode.Mahjong.MahjongSeatGameInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongSeatGameInfo>
            PARSER = new com.google.protobuf.AbstractParser<MahjongSeatGameInfo>() {
      public MahjongSeatGameInfo parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongSeatGameInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongSeatGameInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongSeatGameInfo> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongSeatGameInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongResultResponseOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongResultResponse)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    java.util.List<game.mode.Mahjong.MahjongUserResult>
    getUserResultList();

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    game.mode.Mahjong.MahjongUserResult getUserResult(int index);

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    int getUserResultCount();

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    java.util.List<? extends game.mode.Mahjong.MahjongUserResultOrBuilder>
    getUserResultOrBuilderList();

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    game.mode.Mahjong.MahjongUserResultOrBuilder getUserResultOrBuilder(
            int index);

    /**
     * <pre>
     * 准备倒计时
     * </pre>
     * <p>
     * <code>int32 readyTimeCounter = 2;</code>
     */
    int getReadyTimeCounter();

    /**
     * <pre>
     * 买的马
     * </pre>
     * <p>
     * <code>repeated int32 maCard = 3;</code>
     */
    java.util.List<java.lang.Integer> getMaCardList();

    /**
     * <pre>
     * 买的马
     * </pre>
     * <p>
     * <code>repeated int32 maCard = 3;</code>
     */
    int getMaCardCount();

    /**
     * <pre>
     * 买的马
     * </pre>
     * <p>
     * <code>repeated int32 maCard = 3;</code>
     */
    int getMaCard(int index);

    /**
     * <code>uint64 dateTime = 4;</code>
     */
    long getDateTime();
  }

  /**
   * <pre>
   * 当局游戏结果 RESULT
   * </pre>
   * <p>
   * Protobuf type {@code MahjongResultResponse}
   */
  public static final class MahjongResultResponse extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongResultResponse)
          MahjongResultResponseOrBuilder {
    // Use MahjongResultResponse.newBuilder() to construct.
    private MahjongResultResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongResultResponse() {
      userResult_ = java.util.Collections.emptyList();
      readyTimeCounter_ = 0;
      maCard_ = java.util.Collections.emptyList();
      dateTime_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongResultResponse(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                userResult_ = new java.util.ArrayList<game.mode.Mahjong.MahjongUserResult>();
                mutable_bitField0_ |= 0x00000001;
              }
              userResult_.add(
                      input.readMessage(game.mode.Mahjong.MahjongUserResult.parser(), extensionRegistry));
              break;
            }
            case 16: {

              readyTimeCounter_ = input.readInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                maCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              maCard_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                maCard_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                maCard_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {

              dateTime_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          userResult_ = java.util.Collections.unmodifiableList(userResult_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          maCard_ = java.util.Collections.unmodifiableList(maCard_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongResultResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongResultResponse_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongResultResponse.class, game.mode.Mahjong.MahjongResultResponse.Builder.class);
    }

    private int bitField0_;
    public static final int USERRESULT_FIELD_NUMBER = 1;
    private java.util.List<game.mode.Mahjong.MahjongUserResult> userResult_;

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    public java.util.List<game.mode.Mahjong.MahjongUserResult> getUserResultList() {
      return userResult_;
    }

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    public java.util.List<? extends game.mode.Mahjong.MahjongUserResultOrBuilder>
    getUserResultOrBuilderList() {
      return userResult_;
    }

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    public int getUserResultCount() {
      return userResult_.size();
    }

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    public game.mode.Mahjong.MahjongUserResult getUserResult(int index) {
      return userResult_.get(index);
    }

    /**
     * <pre>
     * 用户结算
     * </pre>
     * <p>
     * <code>repeated .MahjongUserResult userResult = 1;</code>
     */
    public game.mode.Mahjong.MahjongUserResultOrBuilder getUserResultOrBuilder(
            int index) {
      return userResult_.get(index);
    }

    public static final int READYTIMECOUNTER_FIELD_NUMBER = 2;
    private int readyTimeCounter_;

    /**
     * <pre>
     * 准备倒计时
     * </pre>
     * <p>
     * <code>int32 readyTimeCounter = 2;</code>
     */
    public int getReadyTimeCounter() {
      return readyTimeCounter_;
    }

    public static final int MACARD_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> maCard_;

    /**
     * <pre>
     * 买的马
     * </pre>
     * <p>
     * <code>repeated int32 maCard = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getMaCardList() {
      return maCard_;
    }

    /**
     * <pre>
     * 买的马
     * </pre>
     * <p>
     * <code>repeated int32 maCard = 3;</code>
     */
    public int getMaCardCount() {
      return maCard_.size();
    }

    /**
     * <pre>
     * 买的马
     * </pre>
     * <p>
     * <code>repeated int32 maCard = 3;</code>
     */
    public int getMaCard(int index) {
      return maCard_.get(index);
    }

    private int maCardMemoizedSerializedSize = -1;

    public static final int DATETIME_FIELD_NUMBER = 4;
    private long dateTime_;

    /**
     * <code>uint64 dateTime = 4;</code>
     */
    public long getDateTime() {
      return dateTime_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < userResult_.size(); i++) {
        output.writeMessage(1, userResult_.get(i));
      }
      if (readyTimeCounter_ != 0) {
        output.writeInt32(2, readyTimeCounter_);
      }
      if (getMaCardList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(maCardMemoizedSerializedSize);
      }
      for (int i = 0; i < maCard_.size(); i++) {
        output.writeInt32NoTag(maCard_.get(i));
      }
      if (dateTime_ != 0L) {
        output.writeUInt64(4, dateTime_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < userResult_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(1, userResult_.get(i));
      }
      if (readyTimeCounter_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(2, readyTimeCounter_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < maCard_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(maCard_.get(i));
        }
        size += dataSize;
        if (!getMaCardList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        maCardMemoizedSerializedSize = dataSize;
      }
      if (dateTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt64Size(4, dateTime_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongResultResponse)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongResultResponse other = (game.mode.Mahjong.MahjongResultResponse) obj;

      boolean result = true;
      result = result && getUserResultList()
              .equals(other.getUserResultList());
      result = result && (getReadyTimeCounter()
              == other.getReadyTimeCounter());
      result = result && getMaCardList()
              .equals(other.getMaCardList());
      result = result && (getDateTime()
              == other.getDateTime());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getUserResultCount() > 0) {
        hash = (37 * hash) + USERRESULT_FIELD_NUMBER;
        hash = (53 * hash) + getUserResultList().hashCode();
      }
      hash = (37 * hash) + READYTIMECOUNTER_FIELD_NUMBER;
      hash = (53 * hash) + getReadyTimeCounter();
      if (getMaCardCount() > 0) {
        hash = (37 * hash) + MACARD_FIELD_NUMBER;
        hash = (53 * hash) + getMaCardList().hashCode();
      }
      hash = (37 * hash) + DATETIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getDateTime());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongResultResponse parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongResultResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 当局游戏结果 RESULT
     * </pre>
     * <p>
     * Protobuf type {@code MahjongResultResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongResultResponse)
            game.mode.Mahjong.MahjongResultResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongResultResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongResultResponse_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongResultResponse.class, game.mode.Mahjong.MahjongResultResponse.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongResultResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getUserResultFieldBuilder();
        }
      }

      public Builder clear() {
        super.clear();
        if (userResultBuilder_ == null) {
          userResult_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          userResultBuilder_.clear();
        }
        readyTimeCounter_ = 0;

        maCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        dateTime_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongResultResponse_descriptor;
      }

      public game.mode.Mahjong.MahjongResultResponse getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongResultResponse.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongResultResponse build() {
        game.mode.Mahjong.MahjongResultResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongResultResponse buildPartial() {
        game.mode.Mahjong.MahjongResultResponse result = new game.mode.Mahjong.MahjongResultResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (userResultBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            userResult_ = java.util.Collections.unmodifiableList(userResult_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.userResult_ = userResult_;
        } else {
          result.userResult_ = userResultBuilder_.build();
        }
        result.readyTimeCounter_ = readyTimeCounter_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          maCard_ = java.util.Collections.unmodifiableList(maCard_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.maCard_ = maCard_;
        result.dateTime_ = dateTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongResultResponse) {
          return mergeFrom((game.mode.Mahjong.MahjongResultResponse) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongResultResponse other) {
        if (other == game.mode.Mahjong.MahjongResultResponse.getDefaultInstance()) return this;
        if (userResultBuilder_ == null) {
          if (!other.userResult_.isEmpty()) {
            if (userResult_.isEmpty()) {
              userResult_ = other.userResult_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureUserResultIsMutable();
              userResult_.addAll(other.userResult_);
            }
            onChanged();
          }
        } else {
          if (!other.userResult_.isEmpty()) {
            if (userResultBuilder_.isEmpty()) {
              userResultBuilder_.dispose();
              userResultBuilder_ = null;
              userResult_ = other.userResult_;
              bitField0_ = (bitField0_ & ~0x00000001);
              userResultBuilder_ =
                      com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                              getUserResultFieldBuilder() : null;
            } else {
              userResultBuilder_.addAllMessages(other.userResult_);
            }
          }
        }
        if (other.getReadyTimeCounter() != 0) {
          setReadyTimeCounter(other.getReadyTimeCounter());
        }
        if (!other.maCard_.isEmpty()) {
          if (maCard_.isEmpty()) {
            maCard_ = other.maCard_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureMaCardIsMutable();
            maCard_.addAll(other.maCard_);
          }
          onChanged();
        }
        if (other.getDateTime() != 0L) {
          setDateTime(other.getDateTime());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongResultResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongResultResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private java.util.List<game.mode.Mahjong.MahjongUserResult> userResult_ =
              java.util.Collections.emptyList();

      private void ensureUserResultIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          userResult_ = new java.util.ArrayList<game.mode.Mahjong.MahjongUserResult>(userResult_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongUserResult, game.mode.Mahjong.MahjongUserResult.Builder, game.mode.Mahjong.MahjongUserResultOrBuilder> userResultBuilder_;

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongUserResult> getUserResultList() {
        if (userResultBuilder_ == null) {
          return java.util.Collections.unmodifiableList(userResult_);
        } else {
          return userResultBuilder_.getMessageList();
        }
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public int getUserResultCount() {
        if (userResultBuilder_ == null) {
          return userResult_.size();
        } else {
          return userResultBuilder_.getCount();
        }
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public game.mode.Mahjong.MahjongUserResult getUserResult(int index) {
        if (userResultBuilder_ == null) {
          return userResult_.get(index);
        } else {
          return userResultBuilder_.getMessage(index);
        }
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder setUserResult(
              int index, game.mode.Mahjong.MahjongUserResult value) {
        if (userResultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserResultIsMutable();
          userResult_.set(index, value);
          onChanged();
        } else {
          userResultBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder setUserResult(
              int index, game.mode.Mahjong.MahjongUserResult.Builder builderForValue) {
        if (userResultBuilder_ == null) {
          ensureUserResultIsMutable();
          userResult_.set(index, builderForValue.build());
          onChanged();
        } else {
          userResultBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder addUserResult(game.mode.Mahjong.MahjongUserResult value) {
        if (userResultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserResultIsMutable();
          userResult_.add(value);
          onChanged();
        } else {
          userResultBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder addUserResult(
              int index, game.mode.Mahjong.MahjongUserResult value) {
        if (userResultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUserResultIsMutable();
          userResult_.add(index, value);
          onChanged();
        } else {
          userResultBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder addUserResult(
              game.mode.Mahjong.MahjongUserResult.Builder builderForValue) {
        if (userResultBuilder_ == null) {
          ensureUserResultIsMutable();
          userResult_.add(builderForValue.build());
          onChanged();
        } else {
          userResultBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder addUserResult(
              int index, game.mode.Mahjong.MahjongUserResult.Builder builderForValue) {
        if (userResultBuilder_ == null) {
          ensureUserResultIsMutable();
          userResult_.add(index, builderForValue.build());
          onChanged();
        } else {
          userResultBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder addAllUserResult(
              java.lang.Iterable<? extends game.mode.Mahjong.MahjongUserResult> values) {
        if (userResultBuilder_ == null) {
          ensureUserResultIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, userResult_);
          onChanged();
        } else {
          userResultBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder clearUserResult() {
        if (userResultBuilder_ == null) {
          userResult_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          userResultBuilder_.clear();
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public Builder removeUserResult(int index) {
        if (userResultBuilder_ == null) {
          ensureUserResultIsMutable();
          userResult_.remove(index);
          onChanged();
        } else {
          userResultBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public game.mode.Mahjong.MahjongUserResult.Builder getUserResultBuilder(
              int index) {
        return getUserResultFieldBuilder().getBuilder(index);
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public game.mode.Mahjong.MahjongUserResultOrBuilder getUserResultOrBuilder(
              int index) {
        if (userResultBuilder_ == null) {
          return userResult_.get(index);
        } else {
          return userResultBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public java.util.List<? extends game.mode.Mahjong.MahjongUserResultOrBuilder>
      getUserResultOrBuilderList() {
        if (userResultBuilder_ != null) {
          return userResultBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(userResult_);
        }
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public game.mode.Mahjong.MahjongUserResult.Builder addUserResultBuilder() {
        return getUserResultFieldBuilder().addBuilder(
                game.mode.Mahjong.MahjongUserResult.getDefaultInstance());
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public game.mode.Mahjong.MahjongUserResult.Builder addUserResultBuilder(
              int index) {
        return getUserResultFieldBuilder().addBuilder(
                index, game.mode.Mahjong.MahjongUserResult.getDefaultInstance());
      }

      /**
       * <pre>
       * 用户结算
       * </pre>
       * <p>
       * <code>repeated .MahjongUserResult userResult = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongUserResult.Builder>
      getUserResultBuilderList() {
        return getUserResultFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongUserResult, game.mode.Mahjong.MahjongUserResult.Builder, game.mode.Mahjong.MahjongUserResultOrBuilder>
      getUserResultFieldBuilder() {
        if (userResultBuilder_ == null) {
          userResultBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  game.mode.Mahjong.MahjongUserResult, game.mode.Mahjong.MahjongUserResult.Builder, game.mode.Mahjong.MahjongUserResultOrBuilder>(
                  userResult_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          userResult_ = null;
        }
        return userResultBuilder_;
      }

      private int readyTimeCounter_;

      /**
       * <pre>
       * 准备倒计时
       * </pre>
       * <p>
       * <code>int32 readyTimeCounter = 2;</code>
       */
      public int getReadyTimeCounter() {
        return readyTimeCounter_;
      }

      /**
       * <pre>
       * 准备倒计时
       * </pre>
       * <p>
       * <code>int32 readyTimeCounter = 2;</code>
       */
      public Builder setReadyTimeCounter(int value) {

        readyTimeCounter_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 准备倒计时
       * </pre>
       * <p>
       * <code>int32 readyTimeCounter = 2;</code>
       */
      public Builder clearReadyTimeCounter() {

        readyTimeCounter_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> maCard_ = java.util.Collections.emptyList();

      private void ensureMaCardIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          maCard_ = new java.util.ArrayList<java.lang.Integer>(maCard_);
          bitField0_ |= 0x00000004;
        }
      }

      /**
       * <pre>
       * 买的马
       * </pre>
       * <p>
       * <code>repeated int32 maCard = 3;</code>
       */
      public java.util.List<java.lang.Integer>
      getMaCardList() {
        return java.util.Collections.unmodifiableList(maCard_);
      }

      /**
       * <pre>
       * 买的马
       * </pre>
       * <p>
       * <code>repeated int32 maCard = 3;</code>
       */
      public int getMaCardCount() {
        return maCard_.size();
      }

      /**
       * <pre>
       * 买的马
       * </pre>
       * <p>
       * <code>repeated int32 maCard = 3;</code>
       */
      public int getMaCard(int index) {
        return maCard_.get(index);
      }

      /**
       * <pre>
       * 买的马
       * </pre>
       * <p>
       * <code>repeated int32 maCard = 3;</code>
       */
      public Builder setMaCard(
              int index, int value) {
        ensureMaCardIsMutable();
        maCard_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 买的马
       * </pre>
       * <p>
       * <code>repeated int32 maCard = 3;</code>
       */
      public Builder addMaCard(int value) {
        ensureMaCardIsMutable();
        maCard_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 买的马
       * </pre>
       * <p>
       * <code>repeated int32 maCard = 3;</code>
       */
      public Builder addAllMaCard(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMaCardIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, maCard_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 买的马
       * </pre>
       * <p>
       * <code>repeated int32 maCard = 3;</code>
       */
      public Builder clearMaCard() {
        maCard_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private long dateTime_;

      /**
       * <code>uint64 dateTime = 4;</code>
       */
      public long getDateTime() {
        return dateTime_;
      }

      /**
       * <code>uint64 dateTime = 4;</code>
       */
      public Builder setDateTime(long value) {

        dateTime_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>uint64 dateTime = 4;</code>
       */
      public Builder clearDateTime() {

        dateTime_ = 0L;
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongResultResponse)
    }

    // @@protoc_insertion_point(class_scope:MahjongResultResponse)
    private static final game.mode.Mahjong.MahjongResultResponse DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongResultResponse();
    }

    public static game.mode.Mahjong.MahjongResultResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongResultResponse>
            PARSER = new com.google.protobuf.AbstractParser<MahjongResultResponse>() {
      public MahjongResultResponse parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongResultResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongResultResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongResultResponse> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongResultResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongUserResultOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongUserResult)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 人
     * </pre>
     * <p>
     * <code>uint32 ID = 1;</code>
     */
    int getID();

    /**
     * <pre>
     * 牌型输赢
     * </pre>
     * <p>
     * <code>int32 cardScore = 2;</code>
     */
    int getCardScore();

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    java.util.List<game.mode.Mahjong.ScoreType> getScoreTypesList();

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    int getScoreTypesCount();

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    game.mode.Mahjong.ScoreType getScoreTypes(int index);

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    java.util.List<java.lang.Integer>
    getScoreTypesValueList();

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    int getScoreTypesValue(int index);

    /**
     * <pre>
     * 杠牌输赢
     * </pre>
     * <p>
     * <code>int32 anGangScore = 4;</code>
     */
    int getAnGangScore();

    /**
     * <pre>
     * 杠牌输赢
     * </pre>
     * <p>
     * <code>int32 mingGangScore = 5;</code>
     */
    int getMingGangScore();

    /**
     * <pre>
     * 卖马输赢
     * </pre>
     * <p>
     * <code>int32 maScore = 6;</code>
     */
    int getMaScore();

    /**
     * <pre>
     * 手牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 7;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();

    /**
     * <pre>
     * 手牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 7;</code>
     */
    int getCardsCount();

    /**
     * <pre>
     * 手牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 7;</code>
     */
    int getCards(int index);

    /**
     * <pre>
     * 吃牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    java.util.List<java.lang.Integer> getChiCardsList();

    /**
     * <pre>
     * 吃牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    int getChiCardsCount();

    /**
     * <pre>
     * 吃牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    int getChiCards(int index);

    /**
     * <pre>
     * 碰牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 9;</code>
     */
    java.util.List<java.lang.Integer> getPengCardsList();

    /**
     * <pre>
     * 碰牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 9;</code>
     */
    int getPengCardsCount();

    /**
     * <pre>
     * 碰牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 9;</code>
     */
    int getPengCards(int index);

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 10;</code>
     */
    java.util.List<java.lang.Integer> getAnGangCardsList();

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 10;</code>
     */
    int getAnGangCardsCount();

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 10;</code>
     */
    int getAnGangCards(int index);

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 11;</code>
     */
    java.util.List<java.lang.Integer> getMingGangCardsList();

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 11;</code>
     */
    int getMingGangCardsCount();

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 11;</code>
     */
    int getMingGangCards(int index);

    /**
     * <pre>
     * 胡的牌
     * </pre>
     * <p>
     * <code>int32 huCard = 12;</code>
     */
    int getHuCard();

    /**
     * <pre>
     * 当局输赢
     * </pre>
     * <p>
     * <code>int32 winOrLose = 13;</code>
     */
    int getWinOrLose();

    /**
     * <pre>
     * 总输赢分数
     * </pre>
     * <p>
     * <code>int32 score = 14;</code>
     */
    int getScore();
  }

  /**
   * <pre>
   * 单个人结算
   * </pre>
   * <p>
   * Protobuf type {@code MahjongUserResult}
   */
  public static final class MahjongUserResult extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongUserResult)
          MahjongUserResultOrBuilder {
    // Use MahjongUserResult.newBuilder() to construct.
    private MahjongUserResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongUserResult() {
      iD_ = 0;
      cardScore_ = 0;
      scoreTypes_ = java.util.Collections.emptyList();
      anGangScore_ = 0;
      mingGangScore_ = 0;
      maScore_ = 0;
      cards_ = java.util.Collections.emptyList();
      chiCards_ = java.util.Collections.emptyList();
      pengCards_ = java.util.Collections.emptyList();
      anGangCards_ = java.util.Collections.emptyList();
      mingGangCards_ = java.util.Collections.emptyList();
      huCard_ = 0;
      winOrLose_ = 0;
      score_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongUserResult(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              iD_ = input.readUInt32();
              break;
            }
            case 16: {

              cardScore_ = input.readInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              scoreTypes_.add(rawValue);
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  scoreTypes_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                scoreTypes_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 32: {

              anGangScore_ = input.readInt32();
              break;
            }
            case 40: {

              mingGangScore_ = input.readInt32();
              break;
            }
            case 48: {

              maScore_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              chiCards_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                chiCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                chiCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              pengCards_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                pengCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                pengCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              anGangCards_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                anGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                anGangCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              mingGangCards_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                mingGangCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                mingGangCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {

              huCard_ = input.readInt32();
              break;
            }
            case 104: {

              winOrLose_ = input.readInt32();
              break;
            }
            case 112: {

              score_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongUserResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongUserResult_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongUserResult.class, game.mode.Mahjong.MahjongUserResult.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int iD_;

    /**
     * <pre>
     * 人
     * </pre>
     * <p>
     * <code>uint32 ID = 1;</code>
     */
    public int getID() {
      return iD_;
    }

    public static final int CARDSCORE_FIELD_NUMBER = 2;
    private int cardScore_;

    /**
     * <pre>
     * 牌型输赢
     * </pre>
     * <p>
     * <code>int32 cardScore = 2;</code>
     */
    public int getCardScore() {
      return cardScore_;
    }

    public static final int SCORETYPES_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> scoreTypes_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
            java.lang.Integer, game.mode.Mahjong.ScoreType> scoreTypes_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                    java.lang.Integer, game.mode.Mahjong.ScoreType>() {
              public game.mode.Mahjong.ScoreType convert(java.lang.Integer from) {
                game.mode.Mahjong.ScoreType result = game.mode.Mahjong.ScoreType.valueOf(from);
                return result == null ? game.mode.Mahjong.ScoreType.UNRECOGNIZED : result;
              }
            };

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    public java.util.List<game.mode.Mahjong.ScoreType> getScoreTypesList() {
      return new com.google.protobuf.Internal.ListAdapter<
              java.lang.Integer, game.mode.Mahjong.ScoreType>(scoreTypes_, scoreTypes_converter_);
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    public int getScoreTypesCount() {
      return scoreTypes_.size();
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    public game.mode.Mahjong.ScoreType getScoreTypes(int index) {
      return scoreTypes_converter_.convert(scoreTypes_.get(index));
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    public java.util.List<java.lang.Integer>
    getScoreTypesValueList() {
      return scoreTypes_;
    }

    /**
     * <pre>
     * 牌型
     * </pre>
     * <p>
     * <code>repeated .ScoreType scoreTypes = 3;</code>
     */
    public int getScoreTypesValue(int index) {
      return scoreTypes_.get(index);
    }

    private int scoreTypesMemoizedSerializedSize;

    public static final int ANGANGSCORE_FIELD_NUMBER = 4;
    private int anGangScore_;

    /**
     * <pre>
     * 杠牌输赢
     * </pre>
     * <p>
     * <code>int32 anGangScore = 4;</code>
     */
    public int getAnGangScore() {
      return anGangScore_;
    }

    public static final int MINGGANGSCORE_FIELD_NUMBER = 5;
    private int mingGangScore_;

    /**
     * <pre>
     * 杠牌输赢
     * </pre>
     * <p>
     * <code>int32 mingGangScore = 5;</code>
     */
    public int getMingGangScore() {
      return mingGangScore_;
    }

    public static final int MASCORE_FIELD_NUMBER = 6;
    private int maScore_;

    /**
     * <pre>
     * 卖马输赢
     * </pre>
     * <p>
     * <code>int32 maScore = 6;</code>
     */
    public int getMaScore() {
      return maScore_;
    }

    public static final int CARDS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> cards_;

    /**
     * <pre>
     * 手牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 7;</code>
     */
    public java.util.List<java.lang.Integer>
    getCardsList() {
      return cards_;
    }

    /**
     * <pre>
     * 手牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 7;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }

    /**
     * <pre>
     * 手牌
     * </pre>
     * <p>
     * <code>repeated int32 cards = 7;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private int cardsMemoizedSerializedSize = -1;

    public static final int CHICARDS_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> chiCards_;

    /**
     * <pre>
     * 吃牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    public java.util.List<java.lang.Integer>
    getChiCardsList() {
      return chiCards_;
    }

    /**
     * <pre>
     * 吃牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    public int getChiCardsCount() {
      return chiCards_.size();
    }

    /**
     * <pre>
     * 吃牌
     * </pre>
     * <p>
     * <code>repeated int32 chiCards = 8;</code>
     */
    public int getChiCards(int index) {
      return chiCards_.get(index);
    }

    private int chiCardsMemoizedSerializedSize = -1;

    public static final int PENGCARDS_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> pengCards_;

    /**
     * <pre>
     * 碰牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 9;</code>
     */
    public java.util.List<java.lang.Integer>
    getPengCardsList() {
      return pengCards_;
    }

    /**
     * <pre>
     * 碰牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 9;</code>
     */
    public int getPengCardsCount() {
      return pengCards_.size();
    }

    /**
     * <pre>
     * 碰牌
     * </pre>
     * <p>
     * <code>repeated int32 pengCards = 9;</code>
     */
    public int getPengCards(int index) {
      return pengCards_.get(index);
    }

    private int pengCardsMemoizedSerializedSize = -1;

    public static final int ANGANGCARDS_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> anGangCards_;

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 10;</code>
     */
    public java.util.List<java.lang.Integer>
    getAnGangCardsList() {
      return anGangCards_;
    }

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 10;</code>
     */
    public int getAnGangCardsCount() {
      return anGangCards_.size();
    }

    /**
     * <pre>
     * 暗杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 anGangCards = 10;</code>
     */
    public int getAnGangCards(int index) {
      return anGangCards_.get(index);
    }

    private int anGangCardsMemoizedSerializedSize = -1;

    public static final int MINGGANGCARDS_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> mingGangCards_;

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 11;</code>
     */
    public java.util.List<java.lang.Integer>
    getMingGangCardsList() {
      return mingGangCards_;
    }

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 11;</code>
     */
    public int getMingGangCardsCount() {
      return mingGangCards_.size();
    }

    /**
     * <pre>
     * 明杠的牌
     * </pre>
     * <p>
     * <code>repeated int32 mingGangCards = 11;</code>
     */
    public int getMingGangCards(int index) {
      return mingGangCards_.get(index);
    }

    private int mingGangCardsMemoizedSerializedSize = -1;

    public static final int HUCARD_FIELD_NUMBER = 12;
    private int huCard_;

    /**
     * <pre>
     * 胡的牌
     * </pre>
     * <p>
     * <code>int32 huCard = 12;</code>
     */
    public int getHuCard() {
      return huCard_;
    }

    public static final int WINORLOSE_FIELD_NUMBER = 13;
    private int winOrLose_;

    /**
     * <pre>
     * 当局输赢
     * </pre>
     * <p>
     * <code>int32 winOrLose = 13;</code>
     */
    public int getWinOrLose() {
      return winOrLose_;
    }

    public static final int SCORE_FIELD_NUMBER = 14;
    private int score_;

    /**
     * <pre>
     * 总输赢分数
     * </pre>
     * <p>
     * <code>int32 score = 14;</code>
     */
    public int getScore() {
      return score_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      if (iD_ != 0) {
        output.writeUInt32(1, iD_);
      }
      if (cardScore_ != 0) {
        output.writeInt32(2, cardScore_);
      }
      if (getScoreTypesList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(scoreTypesMemoizedSerializedSize);
      }
      for (int i = 0; i < scoreTypes_.size(); i++) {
        output.writeEnumNoTag(scoreTypes_.get(i));
      }
      if (anGangScore_ != 0) {
        output.writeInt32(4, anGangScore_);
      }
      if (mingGangScore_ != 0) {
        output.writeInt32(5, mingGangScore_);
      }
      if (maScore_ != 0) {
        output.writeInt32(6, maScore_);
      }
      if (getCardsList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(cardsMemoizedSerializedSize);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32NoTag(cards_.get(i));
      }
      if (getChiCardsList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(chiCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < chiCards_.size(); i++) {
        output.writeInt32NoTag(chiCards_.get(i));
      }
      if (getPengCardsList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(pengCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < pengCards_.size(); i++) {
        output.writeInt32NoTag(pengCards_.get(i));
      }
      if (getAnGangCardsList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(anGangCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < anGangCards_.size(); i++) {
        output.writeInt32NoTag(anGangCards_.get(i));
      }
      if (getMingGangCardsList().size() > 0) {
        output.writeUInt32NoTag(90);
        output.writeUInt32NoTag(mingGangCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < mingGangCards_.size(); i++) {
        output.writeInt32NoTag(mingGangCards_.get(i));
      }
      if (huCard_ != 0) {
        output.writeInt32(12, huCard_);
      }
      if (winOrLose_ != 0) {
        output.writeInt32(13, winOrLose_);
      }
      if (score_ != 0) {
        output.writeInt32(14, score_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (iD_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(1, iD_);
      }
      if (cardScore_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(2, cardScore_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < scoreTypes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeEnumSizeNoTag(scoreTypes_.get(i));
        }
        size += dataSize;
        if (!getScoreTypesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeUInt32SizeNoTag(dataSize);
        }
        scoreTypesMemoizedSerializedSize = dataSize;
      }
      if (anGangScore_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(4, anGangScore_);
      }
      if (mingGangScore_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(5, mingGangScore_);
      }
      if (maScore_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(6, maScore_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        if (!getCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chiCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(chiCards_.get(i));
        }
        size += dataSize;
        if (!getChiCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        chiCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pengCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(pengCards_.get(i));
        }
        size += dataSize;
        if (!getPengCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        pengCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < anGangCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(anGangCards_.get(i));
        }
        size += dataSize;
        if (!getAnGangCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        anGangCardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < mingGangCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(mingGangCards_.get(i));
        }
        size += dataSize;
        if (!getMingGangCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        mingGangCardsMemoizedSerializedSize = dataSize;
      }
      if (huCard_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(12, huCard_);
      }
      if (winOrLose_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(13, winOrLose_);
      }
      if (score_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(14, score_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongUserResult)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongUserResult other = (game.mode.Mahjong.MahjongUserResult) obj;

      boolean result = true;
      result = result && (getID()
              == other.getID());
      result = result && (getCardScore()
              == other.getCardScore());
      result = result && scoreTypes_.equals(other.scoreTypes_);
      result = result && (getAnGangScore()
              == other.getAnGangScore());
      result = result && (getMingGangScore()
              == other.getMingGangScore());
      result = result && (getMaScore()
              == other.getMaScore());
      result = result && getCardsList()
              .equals(other.getCardsList());
      result = result && getChiCardsList()
              .equals(other.getChiCardsList());
      result = result && getPengCardsList()
              .equals(other.getPengCardsList());
      result = result && getAnGangCardsList()
              .equals(other.getAnGangCardsList());
      result = result && getMingGangCardsList()
              .equals(other.getMingGangCardsList());
      result = result && (getHuCard()
              == other.getHuCard());
      result = result && (getWinOrLose()
              == other.getWinOrLose());
      result = result && (getScore()
              == other.getScore());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getID();
      hash = (37 * hash) + CARDSCORE_FIELD_NUMBER;
      hash = (53 * hash) + getCardScore();
      if (getScoreTypesCount() > 0) {
        hash = (37 * hash) + SCORETYPES_FIELD_NUMBER;
        hash = (53 * hash) + scoreTypes_.hashCode();
      }
      hash = (37 * hash) + ANGANGSCORE_FIELD_NUMBER;
      hash = (53 * hash) + getAnGangScore();
      hash = (37 * hash) + MINGGANGSCORE_FIELD_NUMBER;
      hash = (53 * hash) + getMingGangScore();
      hash = (37 * hash) + MASCORE_FIELD_NUMBER;
      hash = (53 * hash) + getMaScore();
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      if (getChiCardsCount() > 0) {
        hash = (37 * hash) + CHICARDS_FIELD_NUMBER;
        hash = (53 * hash) + getChiCardsList().hashCode();
      }
      if (getPengCardsCount() > 0) {
        hash = (37 * hash) + PENGCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getPengCardsList().hashCode();
      }
      if (getAnGangCardsCount() > 0) {
        hash = (37 * hash) + ANGANGCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getAnGangCardsList().hashCode();
      }
      if (getMingGangCardsCount() > 0) {
        hash = (37 * hash) + MINGGANGCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getMingGangCardsList().hashCode();
      }
      hash = (37 * hash) + HUCARD_FIELD_NUMBER;
      hash = (53 * hash) + getHuCard();
      hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
      hash = (53 * hash) + getWinOrLose();
      hash = (37 * hash) + SCORE_FIELD_NUMBER;
      hash = (53 * hash) + getScore();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongUserResult parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongUserResult parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongUserResult parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongUserResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 单个人结算
     * </pre>
     * <p>
     * Protobuf type {@code MahjongUserResult}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongUserResult)
            game.mode.Mahjong.MahjongUserResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongUserResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongUserResult_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongUserResult.class, game.mode.Mahjong.MahjongUserResult.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongUserResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        iD_ = 0;

        cardScore_ = 0;

        scoreTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        anGangScore_ = 0;

        mingGangScore_ = 0;

        maScore_ = 0;

        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        chiCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        pengCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        anGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        mingGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        huCard_ = 0;

        winOrLose_ = 0;

        score_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongUserResult_descriptor;
      }

      public game.mode.Mahjong.MahjongUserResult getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongUserResult.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongUserResult build() {
        game.mode.Mahjong.MahjongUserResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongUserResult buildPartial() {
        game.mode.Mahjong.MahjongUserResult result = new game.mode.Mahjong.MahjongUserResult(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.iD_ = iD_;
        result.cardScore_ = cardScore_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          scoreTypes_ = java.util.Collections.unmodifiableList(scoreTypes_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.scoreTypes_ = scoreTypes_;
        result.anGangScore_ = anGangScore_;
        result.mingGangScore_ = mingGangScore_;
        result.maScore_ = maScore_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.cards_ = cards_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          chiCards_ = java.util.Collections.unmodifiableList(chiCards_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.chiCards_ = chiCards_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          pengCards_ = java.util.Collections.unmodifiableList(pengCards_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.pengCards_ = pengCards_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          anGangCards_ = java.util.Collections.unmodifiableList(anGangCards_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.anGangCards_ = anGangCards_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          mingGangCards_ = java.util.Collections.unmodifiableList(mingGangCards_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.mingGangCards_ = mingGangCards_;
        result.huCard_ = huCard_;
        result.winOrLose_ = winOrLose_;
        result.score_ = score_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongUserResult) {
          return mergeFrom((game.mode.Mahjong.MahjongUserResult) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongUserResult other) {
        if (other == game.mode.Mahjong.MahjongUserResult.getDefaultInstance()) return this;
        if (other.getID() != 0) {
          setID(other.getID());
        }
        if (other.getCardScore() != 0) {
          setCardScore(other.getCardScore());
        }
        if (!other.scoreTypes_.isEmpty()) {
          if (scoreTypes_.isEmpty()) {
            scoreTypes_ = other.scoreTypes_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureScoreTypesIsMutable();
            scoreTypes_.addAll(other.scoreTypes_);
          }
          onChanged();
        }
        if (other.getAnGangScore() != 0) {
          setAnGangScore(other.getAnGangScore());
        }
        if (other.getMingGangScore() != 0) {
          setMingGangScore(other.getMingGangScore());
        }
        if (other.getMaScore() != 0) {
          setMaScore(other.getMaScore());
        }
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        if (!other.chiCards_.isEmpty()) {
          if (chiCards_.isEmpty()) {
            chiCards_ = other.chiCards_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureChiCardsIsMutable();
            chiCards_.addAll(other.chiCards_);
          }
          onChanged();
        }
        if (!other.pengCards_.isEmpty()) {
          if (pengCards_.isEmpty()) {
            pengCards_ = other.pengCards_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensurePengCardsIsMutable();
            pengCards_.addAll(other.pengCards_);
          }
          onChanged();
        }
        if (!other.anGangCards_.isEmpty()) {
          if (anGangCards_.isEmpty()) {
            anGangCards_ = other.anGangCards_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureAnGangCardsIsMutable();
            anGangCards_.addAll(other.anGangCards_);
          }
          onChanged();
        }
        if (!other.mingGangCards_.isEmpty()) {
          if (mingGangCards_.isEmpty()) {
            mingGangCards_ = other.mingGangCards_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureMingGangCardsIsMutable();
            mingGangCards_.addAll(other.mingGangCards_);
          }
          onChanged();
        }
        if (other.getHuCard() != 0) {
          setHuCard(other.getHuCard());
        }
        if (other.getWinOrLose() != 0) {
          setWinOrLose(other.getWinOrLose());
        }
        if (other.getScore() != 0) {
          setScore(other.getScore());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongUserResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongUserResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private int iD_;

      /**
       * <pre>
       *人
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public int getID() {
        return iD_;
      }

      /**
       * <pre>
       *人
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public Builder setID(int value) {

        iD_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *人
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public Builder clearID() {

        iD_ = 0;
        onChanged();
        return this;
      }

      private int cardScore_;

      /**
       * <pre>
       *牌型输赢
       * </pre>
       *
       * <code>int32 cardScore = 2;</code>
       */
      public int getCardScore() {
        return cardScore_;
      }

      /**
       * <pre>
       *牌型输赢
       * </pre>
       *
       * <code>int32 cardScore = 2;</code>
       */
      public Builder setCardScore(int value) {

        cardScore_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌型输赢
       * </pre>
       *
       * <code>int32 cardScore = 2;</code>
       */
      public Builder clearCardScore() {

        cardScore_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> scoreTypes_ =
              java.util.Collections.emptyList();

      private void ensureScoreTypesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          scoreTypes_ = new java.util.ArrayList<java.lang.Integer>(scoreTypes_);
          bitField0_ |= 0x00000004;
        }
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public java.util.List<game.mode.Mahjong.ScoreType> getScoreTypesList() {
        return new com.google.protobuf.Internal.ListAdapter<
                java.lang.Integer, game.mode.Mahjong.ScoreType>(scoreTypes_, scoreTypes_converter_);
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public int getScoreTypesCount() {
        return scoreTypes_.size();
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public game.mode.Mahjong.ScoreType getScoreTypes(int index) {
        return scoreTypes_converter_.convert(scoreTypes_.get(index));
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public Builder setScoreTypes(
              int index, game.mode.Mahjong.ScoreType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureScoreTypesIsMutable();
        scoreTypes_.set(index, value.getNumber());
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public Builder addScoreTypes(game.mode.Mahjong.ScoreType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureScoreTypesIsMutable();
        scoreTypes_.add(value.getNumber());
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public Builder addAllScoreTypes(
              java.lang.Iterable<? extends game.mode.Mahjong.ScoreType> values) {
        ensureScoreTypesIsMutable();
        for (game.mode.Mahjong.ScoreType value : values) {
          scoreTypes_.add(value.getNumber());
        }
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public Builder clearScoreTypes() {
        scoreTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public java.util.List<java.lang.Integer>
      getScoreTypesValueList() {
        return java.util.Collections.unmodifiableList(scoreTypes_);
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public int getScoreTypesValue(int index) {
        return scoreTypes_.get(index);
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public Builder setScoreTypesValue(
              int index, int value) {
        ensureScoreTypesIsMutable();
        scoreTypes_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public Builder addScoreTypesValue(int value) {
        ensureScoreTypesIsMutable();
        scoreTypes_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *牌型
       * </pre>
       *
       * <code>repeated .ScoreType scoreTypes = 3;</code>
       */
      public Builder addAllScoreTypesValue(
              java.lang.Iterable<java.lang.Integer> values) {
        ensureScoreTypesIsMutable();
        for (int value : values) {
          scoreTypes_.add(value);
        }
        onChanged();
        return this;
      }

      private int anGangScore_;

      /**
       * <pre>
       *杠牌输赢
       * </pre>
       *
       * <code>int32 anGangScore = 4;</code>
       */
      public int getAnGangScore() {
        return anGangScore_;
      }

      /**
       * <pre>
       *杠牌输赢
       * </pre>
       *
       * <code>int32 anGangScore = 4;</code>
       */
      public Builder setAnGangScore(int value) {

        anGangScore_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *杠牌输赢
       * </pre>
       *
       * <code>int32 anGangScore = 4;</code>
       */
      public Builder clearAnGangScore() {

        anGangScore_ = 0;
        onChanged();
        return this;
      }

      private int mingGangScore_;

      /**
       * <pre>
       *杠牌输赢
       * </pre>
       *
       * <code>int32 mingGangScore = 5;</code>
       */
      public int getMingGangScore() {
        return mingGangScore_;
      }

      /**
       * <pre>
       *杠牌输赢
       * </pre>
       *
       * <code>int32 mingGangScore = 5;</code>
       */
      public Builder setMingGangScore(int value) {

        mingGangScore_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *杠牌输赢
       * </pre>
       *
       * <code>int32 mingGangScore = 5;</code>
       */
      public Builder clearMingGangScore() {

        mingGangScore_ = 0;
        onChanged();
        return this;
      }

      private int maScore_;

      /**
       * <pre>
       *卖马输赢
       * </pre>
       *
       * <code>int32 maScore = 6;</code>
       */
      public int getMaScore() {
        return maScore_;
      }

      /**
       * <pre>
       *卖马输赢
       * </pre>
       *
       * <code>int32 maScore = 6;</code>
       */
      public Builder setMaScore(int value) {

        maScore_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *卖马输赢
       * </pre>
       *
       * <code>int32 maScore = 6;</code>
       */
      public Builder clearMaScore() {

        maScore_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();

      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000040;
        }
      }

      /**
       * <pre>
       *手牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public java.util.List<java.lang.Integer>
      getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }

      /**
       * <pre>
       *手牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }

      /**
       * <pre>
       *手牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }

      /**
       * <pre>
       *手牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder setCards(
              int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *手牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *手牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder addAllCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, cards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *手牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> chiCards_ = java.util.Collections.emptyList();

      private void ensureChiCardsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          chiCards_ = new java.util.ArrayList<java.lang.Integer>(chiCards_);
          bitField0_ |= 0x00000080;
        }
      }

      /**
       * <pre>
       *吃牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public java.util.List<java.lang.Integer>
      getChiCardsList() {
        return java.util.Collections.unmodifiableList(chiCards_);
      }

      /**
       * <pre>
       *吃牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public int getChiCardsCount() {
        return chiCards_.size();
      }

      /**
       * <pre>
       *吃牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public int getChiCards(int index) {
        return chiCards_.get(index);
      }

      /**
       * <pre>
       *吃牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder setChiCards(
              int index, int value) {
        ensureChiCardsIsMutable();
        chiCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *吃牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder addChiCards(int value) {
        ensureChiCardsIsMutable();
        chiCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *吃牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder addAllChiCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChiCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, chiCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *吃牌
       * </pre>
       *
       * <code>repeated int32 chiCards = 8;</code>
       */
      public Builder clearChiCards() {
        chiCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> pengCards_ = java.util.Collections.emptyList();

      private void ensurePengCardsIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          pengCards_ = new java.util.ArrayList<java.lang.Integer>(pengCards_);
          bitField0_ |= 0x00000100;
        }
      }

      /**
       * <pre>
       *碰牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 9;</code>
       */
      public java.util.List<java.lang.Integer>
      getPengCardsList() {
        return java.util.Collections.unmodifiableList(pengCards_);
      }

      /**
       * <pre>
       *碰牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 9;</code>
       */
      public int getPengCardsCount() {
        return pengCards_.size();
      }

      /**
       * <pre>
       *碰牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 9;</code>
       */
      public int getPengCards(int index) {
        return pengCards_.get(index);
      }

      /**
       * <pre>
       *碰牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 9;</code>
       */
      public Builder setPengCards(
              int index, int value) {
        ensurePengCardsIsMutable();
        pengCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *碰牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 9;</code>
       */
      public Builder addPengCards(int value) {
        ensurePengCardsIsMutable();
        pengCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *碰牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 9;</code>
       */
      public Builder addAllPengCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePengCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, pengCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *碰牌
       * </pre>
       *
       * <code>repeated int32 pengCards = 9;</code>
       */
      public Builder clearPengCards() {
        pengCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> anGangCards_ = java.util.Collections.emptyList();

      private void ensureAnGangCardsIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          anGangCards_ = new java.util.ArrayList<java.lang.Integer>(anGangCards_);
          bitField0_ |= 0x00000200;
        }
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 10;</code>
       */
      public java.util.List<java.lang.Integer>
      getAnGangCardsList() {
        return java.util.Collections.unmodifiableList(anGangCards_);
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 10;</code>
       */
      public int getAnGangCardsCount() {
        return anGangCards_.size();
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 10;</code>
       */
      public int getAnGangCards(int index) {
        return anGangCards_.get(index);
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 10;</code>
       */
      public Builder setAnGangCards(
              int index, int value) {
        ensureAnGangCardsIsMutable();
        anGangCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 10;</code>
       */
      public Builder addAnGangCards(int value) {
        ensureAnGangCardsIsMutable();
        anGangCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 10;</code>
       */
      public Builder addAllAnGangCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAnGangCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, anGangCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       *暗杠的牌
       * </pre>
       *
       * <code>repeated int32 anGangCards = 10;</code>
       */
      public Builder clearAnGangCards() {
        anGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> mingGangCards_ = java.util.Collections.emptyList();

      private void ensureMingGangCardsIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          mingGangCards_ = new java.util.ArrayList<java.lang.Integer>(mingGangCards_);
          bitField0_ |= 0x00000400;
        }
      }

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 11;</code>
       */
      public java.util.List<java.lang.Integer>
      getMingGangCardsList() {
        return java.util.Collections.unmodifiableList(mingGangCards_);
      }

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 11;</code>
       */
      public int getMingGangCardsCount() {
        return mingGangCards_.size();
      }

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 11;</code>
       */
      public int getMingGangCards(int index) {
        return mingGangCards_.get(index);
      }

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 11;</code>
       */
      public Builder setMingGangCards(
              int index, int value) {
        ensureMingGangCardsIsMutable();
        mingGangCards_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 11;</code>
       */
      public Builder addMingGangCards(int value) {
        ensureMingGangCardsIsMutable();
        mingGangCards_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 11;</code>
       */
      public Builder addAllMingGangCards(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMingGangCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, mingGangCards_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 明杠的牌
       * </pre>
       * <p>
       * <code>repeated int32 mingGangCards = 11;</code>
       */
      public Builder clearMingGangCards() {
        mingGangCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private int huCard_;

      /**
       * <pre>
       * 胡的牌
       * </pre>
       * <p>
       * <code>int32 huCard = 12;</code>
       */
      public int getHuCard() {
        return huCard_;
      }

      /**
       * <pre>
       * 胡的牌
       * </pre>
       * <p>
       * <code>int32 huCard = 12;</code>
       */
      public Builder setHuCard(int value) {

        huCard_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 胡的牌
       * </pre>
       * <p>
       * <code>int32 huCard = 12;</code>
       */
      public Builder clearHuCard() {

        huCard_ = 0;
        onChanged();
        return this;
      }

      private int winOrLose_;

      /**
       * <pre>
       * 当局输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 13;</code>
       */
      public int getWinOrLose() {
        return winOrLose_;
      }

      /**
       * <pre>
       * 当局输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 13;</code>
       */
      public Builder setWinOrLose(int value) {

        winOrLose_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 当局输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 13;</code>
       */
      public Builder clearWinOrLose() {

        winOrLose_ = 0;
        onChanged();
        return this;
      }

      private int score_;

      /**
       * <pre>
       * 总输赢分数
       * </pre>
       * <p>
       * <code>int32 score = 14;</code>
       */
      public int getScore() {
        return score_;
      }

      /**
       * <pre>
       * 总输赢分数
       * </pre>
       * <p>
       * <code>int32 score = 14;</code>
       */
      public Builder setScore(int value) {

        score_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 总输赢分数
       * </pre>
       * <p>
       * <code>int32 score = 14;</code>
       */
      public Builder clearScore() {

        score_ = 0;
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongUserResult)
    }

    // @@protoc_insertion_point(class_scope:MahjongUserResult)
    private static final game.mode.Mahjong.MahjongUserResult DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongUserResult();
    }

    public static game.mode.Mahjong.MahjongUserResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongUserResult>
            PARSER = new com.google.protobuf.AbstractParser<MahjongUserResult>() {
      public MahjongUserResult parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongUserResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongUserResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongUserResult> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongUserResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongBalanceResponseOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongBalanceResponse)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    java.util.List<game.mode.Mahjong.MahjongSeatGameBalance>
    getGameBalanceList();

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    game.mode.Mahjong.MahjongSeatGameBalance getGameBalance(int index);

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    int getGameBalanceCount();

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    java.util.List<? extends game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder>
    getGameBalanceOrBuilderList();

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder getGameBalanceOrBuilder(
            int index);

    /**
     * <code>uint64 dateTime = 2;</code>
     */
    long getDateTime();
  }

  /**
   * <pre>
   * 结束 BALANCE
   * </pre>
   * <p>
   * Protobuf type {@code MahjongBalanceResponse}
   */
  public static final class MahjongBalanceResponse extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongBalanceResponse)
          MahjongBalanceResponseOrBuilder {
    // Use MahjongBalanceResponse.newBuilder() to construct.
    private MahjongBalanceResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongBalanceResponse() {
      gameBalance_ = java.util.Collections.emptyList();
      dateTime_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongBalanceResponse(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                gameBalance_ = new java.util.ArrayList<game.mode.Mahjong.MahjongSeatGameBalance>();
                mutable_bitField0_ |= 0x00000001;
              }
              gameBalance_.add(
                      input.readMessage(game.mode.Mahjong.MahjongSeatGameBalance.parser(), extensionRegistry));
              break;
            }
            case 16: {

              dateTime_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          gameBalance_ = java.util.Collections.unmodifiableList(gameBalance_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongBalanceResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongBalanceResponse_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongBalanceResponse.class, game.mode.Mahjong.MahjongBalanceResponse.Builder.class);
    }

    private int bitField0_;
    public static final int GAMEBALANCE_FIELD_NUMBER = 1;
    private java.util.List<game.mode.Mahjong.MahjongSeatGameBalance> gameBalance_;

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    public java.util.List<game.mode.Mahjong.MahjongSeatGameBalance> getGameBalanceList() {
      return gameBalance_;
    }

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    public java.util.List<? extends game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder>
    getGameBalanceOrBuilderList() {
      return gameBalance_;
    }

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    public int getGameBalanceCount() {
      return gameBalance_.size();
    }

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    public game.mode.Mahjong.MahjongSeatGameBalance getGameBalance(int index) {
      return gameBalance_.get(index);
    }

    /**
     * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
     */
    public game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder getGameBalanceOrBuilder(
            int index) {
      return gameBalance_.get(index);
    }

    public static final int DATETIME_FIELD_NUMBER = 2;
    private long dateTime_;

    /**
     * <code>uint64 dateTime = 2;</code>
     */
    public long getDateTime() {
      return dateTime_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      for (int i = 0; i < gameBalance_.size(); i++) {
        output.writeMessage(1, gameBalance_.get(i));
      }
      if (dateTime_ != 0L) {
        output.writeUInt64(2, dateTime_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < gameBalance_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(1, gameBalance_.get(i));
      }
      if (dateTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt64Size(2, dateTime_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongBalanceResponse)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongBalanceResponse other = (game.mode.Mahjong.MahjongBalanceResponse) obj;

      boolean result = true;
      result = result && getGameBalanceList()
              .equals(other.getGameBalanceList());
      result = result && (getDateTime()
              == other.getDateTime());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getGameBalanceCount() > 0) {
        hash = (37 * hash) + GAMEBALANCE_FIELD_NUMBER;
        hash = (53 * hash) + getGameBalanceList().hashCode();
      }
      hash = (37 * hash) + DATETIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getDateTime());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongBalanceResponse parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongBalanceResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     *结束 BALANCE
     * </pre>
     *
     * Protobuf type {@code MahjongBalanceResponse}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongBalanceResponse)
            game.mode.Mahjong.MahjongBalanceResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongBalanceResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongBalanceResponse_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongBalanceResponse.class, game.mode.Mahjong.MahjongBalanceResponse.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongBalanceResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getGameBalanceFieldBuilder();
        }
      }

      public Builder clear() {
        super.clear();
        if (gameBalanceBuilder_ == null) {
          gameBalance_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          gameBalanceBuilder_.clear();
        }
        dateTime_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongBalanceResponse_descriptor;
      }

      public game.mode.Mahjong.MahjongBalanceResponse getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongBalanceResponse.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongBalanceResponse build() {
        game.mode.Mahjong.MahjongBalanceResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongBalanceResponse buildPartial() {
        game.mode.Mahjong.MahjongBalanceResponse result = new game.mode.Mahjong.MahjongBalanceResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (gameBalanceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            gameBalance_ = java.util.Collections.unmodifiableList(gameBalance_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.gameBalance_ = gameBalance_;
        } else {
          result.gameBalance_ = gameBalanceBuilder_.build();
        }
        result.dateTime_ = dateTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongBalanceResponse) {
          return mergeFrom((game.mode.Mahjong.MahjongBalanceResponse) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongBalanceResponse other) {
        if (other == game.mode.Mahjong.MahjongBalanceResponse.getDefaultInstance()) return this;
        if (gameBalanceBuilder_ == null) {
          if (!other.gameBalance_.isEmpty()) {
            if (gameBalance_.isEmpty()) {
              gameBalance_ = other.gameBalance_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureGameBalanceIsMutable();
              gameBalance_.addAll(other.gameBalance_);
            }
            onChanged();
          }
        } else {
          if (!other.gameBalance_.isEmpty()) {
            if (gameBalanceBuilder_.isEmpty()) {
              gameBalanceBuilder_.dispose();
              gameBalanceBuilder_ = null;
              gameBalance_ = other.gameBalance_;
              bitField0_ = (bitField0_ & ~0x00000001);
              gameBalanceBuilder_ =
                      com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                              getGameBalanceFieldBuilder() : null;
            } else {
              gameBalanceBuilder_.addAllMessages(other.gameBalance_);
            }
          }
        }
        if (other.getDateTime() != 0L) {
          setDateTime(other.getDateTime());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongBalanceResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongBalanceResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private java.util.List<game.mode.Mahjong.MahjongSeatGameBalance> gameBalance_ =
              java.util.Collections.emptyList();

      private void ensureGameBalanceIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          gameBalance_ = new java.util.ArrayList<game.mode.Mahjong.MahjongSeatGameBalance>(gameBalance_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongSeatGameBalance, game.mode.Mahjong.MahjongSeatGameBalance.Builder, game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder> gameBalanceBuilder_;

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongSeatGameBalance> getGameBalanceList() {
        if (gameBalanceBuilder_ == null) {
          return java.util.Collections.unmodifiableList(gameBalance_);
        } else {
          return gameBalanceBuilder_.getMessageList();
        }
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public int getGameBalanceCount() {
        if (gameBalanceBuilder_ == null) {
          return gameBalance_.size();
        } else {
          return gameBalanceBuilder_.getCount();
        }
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameBalance getGameBalance(int index) {
        if (gameBalanceBuilder_ == null) {
          return gameBalance_.get(index);
        } else {
          return gameBalanceBuilder_.getMessage(index);
        }
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder setGameBalance(
              int index, game.mode.Mahjong.MahjongSeatGameBalance value) {
        if (gameBalanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGameBalanceIsMutable();
          gameBalance_.set(index, value);
          onChanged();
        } else {
          gameBalanceBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder setGameBalance(
              int index, game.mode.Mahjong.MahjongSeatGameBalance.Builder builderForValue) {
        if (gameBalanceBuilder_ == null) {
          ensureGameBalanceIsMutable();
          gameBalance_.set(index, builderForValue.build());
          onChanged();
        } else {
          gameBalanceBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder addGameBalance(game.mode.Mahjong.MahjongSeatGameBalance value) {
        if (gameBalanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGameBalanceIsMutable();
          gameBalance_.add(value);
          onChanged();
        } else {
          gameBalanceBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder addGameBalance(
              int index, game.mode.Mahjong.MahjongSeatGameBalance value) {
        if (gameBalanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGameBalanceIsMutable();
          gameBalance_.add(index, value);
          onChanged();
        } else {
          gameBalanceBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder addGameBalance(
              game.mode.Mahjong.MahjongSeatGameBalance.Builder builderForValue) {
        if (gameBalanceBuilder_ == null) {
          ensureGameBalanceIsMutable();
          gameBalance_.add(builderForValue.build());
          onChanged();
        } else {
          gameBalanceBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder addGameBalance(
              int index, game.mode.Mahjong.MahjongSeatGameBalance.Builder builderForValue) {
        if (gameBalanceBuilder_ == null) {
          ensureGameBalanceIsMutable();
          gameBalance_.add(index, builderForValue.build());
          onChanged();
        } else {
          gameBalanceBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder addAllGameBalance(
              java.lang.Iterable<? extends game.mode.Mahjong.MahjongSeatGameBalance> values) {
        if (gameBalanceBuilder_ == null) {
          ensureGameBalanceIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, gameBalance_);
          onChanged();
        } else {
          gameBalanceBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder clearGameBalance() {
        if (gameBalanceBuilder_ == null) {
          gameBalance_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          gameBalanceBuilder_.clear();
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public Builder removeGameBalance(int index) {
        if (gameBalanceBuilder_ == null) {
          ensureGameBalanceIsMutable();
          gameBalance_.remove(index);
          onChanged();
        } else {
          gameBalanceBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameBalance.Builder getGameBalanceBuilder(
              int index) {
        return getGameBalanceFieldBuilder().getBuilder(index);
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder getGameBalanceOrBuilder(
              int index) {
        if (gameBalanceBuilder_ == null) {
          return gameBalance_.get(index);
        } else {
          return gameBalanceBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public java.util.List<? extends game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder>
      getGameBalanceOrBuilderList() {
        if (gameBalanceBuilder_ != null) {
          return gameBalanceBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(gameBalance_);
        }
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameBalance.Builder addGameBalanceBuilder() {
        return getGameBalanceFieldBuilder().addBuilder(
                game.mode.Mahjong.MahjongSeatGameBalance.getDefaultInstance());
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameBalance.Builder addGameBalanceBuilder(
              int index) {
        return getGameBalanceFieldBuilder().addBuilder(
                index, game.mode.Mahjong.MahjongSeatGameBalance.getDefaultInstance());
      }

      /**
       * <code>repeated .MahjongSeatGameBalance gameBalance = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongSeatGameBalance.Builder>
      getGameBalanceBuilderList() {
        return getGameBalanceFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongSeatGameBalance, game.mode.Mahjong.MahjongSeatGameBalance.Builder, game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder>
      getGameBalanceFieldBuilder() {
        if (gameBalanceBuilder_ == null) {
          gameBalanceBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  game.mode.Mahjong.MahjongSeatGameBalance, game.mode.Mahjong.MahjongSeatGameBalance.Builder, game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder>(
                  gameBalance_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          gameBalance_ = null;
        }
        return gameBalanceBuilder_;
      }

      private long dateTime_;

      /**
       * <code>uint64 dateTime = 2;</code>
       */
      public long getDateTime() {
        return dateTime_;
      }

      /**
       * <code>uint64 dateTime = 2;</code>
       */
      public Builder setDateTime(long value) {

        dateTime_ = value;
        onChanged();
        return this;
      }

      /**
       * <code>uint64 dateTime = 2;</code>
       */
      public Builder clearDateTime() {

        dateTime_ = 0L;
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongBalanceResponse)
    }

    // @@protoc_insertion_point(class_scope:MahjongBalanceResponse)
    private static final game.mode.Mahjong.MahjongBalanceResponse DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongBalanceResponse();
    }

    public static game.mode.Mahjong.MahjongBalanceResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongBalanceResponse>
            PARSER = new com.google.protobuf.AbstractParser<MahjongBalanceResponse>() {
      public MahjongBalanceResponse parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongBalanceResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongBalanceResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongBalanceResponse> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongBalanceResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongSeatGameBalanceOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongSeatGameBalance)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 人
     * </pre>
     * <p>
     * <code>uint32 ID = 1;</code>
     */
    int getID();

    /**
     * <pre>
     * 总输赢
     * </pre>
     * <p>
     * <code>int32 winOrLose = 2;</code>
     */
    int getWinOrLose();

    /**
     * <pre>
     * 胡牌次数
     * </pre>
     * <p>
     * <code>uint32 huCount = 3;</code>
     */
    int getHuCount();

    /**
     * <pre>
     * 自摸次数
     * </pre>
     * <p>
     * <code>uint32 zimoCount = 4;</code>
     */
    int getZimoCount();

    /**
     * <pre>
     * 点炮次数
     * </pre>
     * <p>
     * <code>uint32 dianpaoCount = 5;</code>
     */
    int getDianpaoCount();

    /**
     * <pre>
     * 暗杠次数
     * </pre>
     * <p>
     * <code>uint32 angang = 6;</code>
     */
    int getAngang();

    /**
     * <pre>
     * 明杠次数
     * </pre>
     * <p>
     * <code>uint32 minggang = 7;</code>
     */
    int getMinggang();
  }

  /**
   * Protobuf type {@code MahjongSeatGameBalance}
   */
  public static final class MahjongSeatGameBalance extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongSeatGameBalance)
          MahjongSeatGameBalanceOrBuilder {
    // Use MahjongSeatGameBalance.newBuilder() to construct.
    private MahjongSeatGameBalance(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongSeatGameBalance() {
      iD_ = 0;
      winOrLose_ = 0;
      huCount_ = 0;
      zimoCount_ = 0;
      dianpaoCount_ = 0;
      angang_ = 0;
      minggang_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongSeatGameBalance(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              iD_ = input.readUInt32();
              break;
            }
            case 16: {

              winOrLose_ = input.readInt32();
              break;
            }
            case 24: {

              huCount_ = input.readUInt32();
              break;
            }
            case 32: {

              zimoCount_ = input.readUInt32();
              break;
            }
            case 40: {

              dianpaoCount_ = input.readUInt32();
              break;
            }
            case 48: {

              angang_ = input.readUInt32();
              break;
            }
            case 56: {

              minggang_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongSeatGameBalance_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongSeatGameBalance_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongSeatGameBalance.class, game.mode.Mahjong.MahjongSeatGameBalance.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private int iD_;

    /**
     * <pre>
     * 人
     * </pre>
     * <p>
     * <code>uint32 ID = 1;</code>
     */
    public int getID() {
      return iD_;
    }

    public static final int WINORLOSE_FIELD_NUMBER = 2;
    private int winOrLose_;

    /**
     * <pre>
     * 总输赢
     * </pre>
     * <p>
     * <code>int32 winOrLose = 2;</code>
     */
    public int getWinOrLose() {
      return winOrLose_;
    }

    public static final int HUCOUNT_FIELD_NUMBER = 3;
    private int huCount_;

    /**
     * <pre>
     * 胡牌次数
     * </pre>
     * <p>
     * <code>uint32 huCount = 3;</code>
     */
    public int getHuCount() {
      return huCount_;
    }

    public static final int ZIMOCOUNT_FIELD_NUMBER = 4;
    private int zimoCount_;

    /**
     * <pre>
     * 自摸次数
     * </pre>
     * <p>
     * <code>uint32 zimoCount = 4;</code>
     */
    public int getZimoCount() {
      return zimoCount_;
    }

    public static final int DIANPAOCOUNT_FIELD_NUMBER = 5;
    private int dianpaoCount_;

    /**
     * <pre>
     * 点炮次数
     * </pre>
     * <p>
     * <code>uint32 dianpaoCount = 5;</code>
     */
    public int getDianpaoCount() {
      return dianpaoCount_;
    }

    public static final int ANGANG_FIELD_NUMBER = 6;
    private int angang_;

    /**
     * <pre>
     * 暗杠次数
     * </pre>
     * <p>
     * <code>uint32 angang = 6;</code>
     */
    public int getAngang() {
      return angang_;
    }

    public static final int MINGGANG_FIELD_NUMBER = 7;
    private int minggang_;

    /**
     * <pre>
     * 明杠次数
     * </pre>
     * <p>
     * <code>uint32 minggang = 7;</code>
     */
    public int getMinggang() {
      return minggang_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      if (iD_ != 0) {
        output.writeUInt32(1, iD_);
      }
      if (winOrLose_ != 0) {
        output.writeInt32(2, winOrLose_);
      }
      if (huCount_ != 0) {
        output.writeUInt32(3, huCount_);
      }
      if (zimoCount_ != 0) {
        output.writeUInt32(4, zimoCount_);
      }
      if (dianpaoCount_ != 0) {
        output.writeUInt32(5, dianpaoCount_);
      }
      if (angang_ != 0) {
        output.writeUInt32(6, angang_);
      }
      if (minggang_ != 0) {
        output.writeUInt32(7, minggang_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (iD_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(1, iD_);
      }
      if (winOrLose_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(2, winOrLose_);
      }
      if (huCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(3, huCount_);
      }
      if (zimoCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(4, zimoCount_);
      }
      if (dianpaoCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(5, dianpaoCount_);
      }
      if (angang_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(6, angang_);
      }
      if (minggang_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(7, minggang_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongSeatGameBalance)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongSeatGameBalance other = (game.mode.Mahjong.MahjongSeatGameBalance) obj;

      boolean result = true;
      result = result && (getID()
              == other.getID());
      result = result && (getWinOrLose()
              == other.getWinOrLose());
      result = result && (getHuCount()
              == other.getHuCount());
      result = result && (getZimoCount()
              == other.getZimoCount());
      result = result && (getDianpaoCount()
              == other.getDianpaoCount());
      result = result && (getAngang()
              == other.getAngang());
      result = result && (getMinggang()
              == other.getMinggang());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getID();
      hash = (37 * hash) + WINORLOSE_FIELD_NUMBER;
      hash = (53 * hash) + getWinOrLose();
      hash = (37 * hash) + HUCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getHuCount();
      hash = (37 * hash) + ZIMOCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getZimoCount();
      hash = (37 * hash) + DIANPAOCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getDianpaoCount();
      hash = (37 * hash) + ANGANG_FIELD_NUMBER;
      hash = (53 * hash) + getAngang();
      hash = (37 * hash) + MINGGANG_FIELD_NUMBER;
      hash = (53 * hash) + getMinggang();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongSeatGameBalance prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * Protobuf type {@code MahjongSeatGameBalance}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongSeatGameBalance)
            game.mode.Mahjong.MahjongSeatGameBalanceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameBalance_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameBalance_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongSeatGameBalance.class, game.mode.Mahjong.MahjongSeatGameBalance.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongSeatGameBalance.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        iD_ = 0;

        winOrLose_ = 0;

        huCount_ = 0;

        zimoCount_ = 0;

        dianpaoCount_ = 0;

        angang_ = 0;

        minggang_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameBalance_descriptor;
      }

      public game.mode.Mahjong.MahjongSeatGameBalance getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongSeatGameBalance.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongSeatGameBalance build() {
        game.mode.Mahjong.MahjongSeatGameBalance result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongSeatGameBalance buildPartial() {
        game.mode.Mahjong.MahjongSeatGameBalance result = new game.mode.Mahjong.MahjongSeatGameBalance(this);
        result.iD_ = iD_;
        result.winOrLose_ = winOrLose_;
        result.huCount_ = huCount_;
        result.zimoCount_ = zimoCount_;
        result.dianpaoCount_ = dianpaoCount_;
        result.angang_ = angang_;
        result.minggang_ = minggang_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongSeatGameBalance) {
          return mergeFrom((game.mode.Mahjong.MahjongSeatGameBalance) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongSeatGameBalance other) {
        if (other == game.mode.Mahjong.MahjongSeatGameBalance.getDefaultInstance()) return this;
        if (other.getID() != 0) {
          setID(other.getID());
        }
        if (other.getWinOrLose() != 0) {
          setWinOrLose(other.getWinOrLose());
        }
        if (other.getHuCount() != 0) {
          setHuCount(other.getHuCount());
        }
        if (other.getZimoCount() != 0) {
          setZimoCount(other.getZimoCount());
        }
        if (other.getDianpaoCount() != 0) {
          setDianpaoCount(other.getDianpaoCount());
        }
        if (other.getAngang() != 0) {
          setAngang(other.getAngang());
        }
        if (other.getMinggang() != 0) {
          setMinggang(other.getMinggang());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongSeatGameBalance parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongSeatGameBalance) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int iD_;

      /**
       * <pre>
       * 人
       * </pre>
       * <p>
       * <code>uint32 ID = 1;</code>
       */
      public int getID() {
        return iD_;
      }

      /**
       * <pre>
       * 人
       * </pre>
       * <p>
       * <code>uint32 ID = 1;</code>
       */
      public Builder setID(int value) {

        iD_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 人
       * </pre>
       * <p>
       * <code>uint32 ID = 1;</code>
       */
      public Builder clearID() {

        iD_ = 0;
        onChanged();
        return this;
      }

      private int winOrLose_;

      /**
       * <pre>
       * 总输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 2;</code>
       */
      public int getWinOrLose() {
        return winOrLose_;
      }

      /**
       * <pre>
       * 总输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 2;</code>
       */
      public Builder setWinOrLose(int value) {

        winOrLose_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 总输赢
       * </pre>
       * <p>
       * <code>int32 winOrLose = 2;</code>
       */
      public Builder clearWinOrLose() {

        winOrLose_ = 0;
        onChanged();
        return this;
      }

      private int huCount_;

      /**
       * <pre>
       * 胡牌次数
       * </pre>
       * <p>
       * <code>uint32 huCount = 3;</code>
       */
      public int getHuCount() {
        return huCount_;
      }

      /**
       * <pre>
       * 胡牌次数
       * </pre>
       * <p>
       * <code>uint32 huCount = 3;</code>
       */
      public Builder setHuCount(int value) {

        huCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 胡牌次数
       * </pre>
       * <p>
       * <code>uint32 huCount = 3;</code>
       */
      public Builder clearHuCount() {

        huCount_ = 0;
        onChanged();
        return this;
      }

      private int zimoCount_;

      /**
       * <pre>
       * 自摸次数
       * </pre>
       * <p>
       * <code>uint32 zimoCount = 4;</code>
       */
      public int getZimoCount() {
        return zimoCount_;
      }

      /**
       * <pre>
       * 自摸次数
       * </pre>
       * <p>
       * <code>uint32 zimoCount = 4;</code>
       */
      public Builder setZimoCount(int value) {

        zimoCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 自摸次数
       * </pre>
       * <p>
       * <code>uint32 zimoCount = 4;</code>
       */
      public Builder clearZimoCount() {

        zimoCount_ = 0;
        onChanged();
        return this;
      }

      private int dianpaoCount_;

      /**
       * <pre>
       * 点炮次数
       * </pre>
       * <p>
       * <code>uint32 dianpaoCount = 5;</code>
       */
      public int getDianpaoCount() {
        return dianpaoCount_;
      }

      /**
       * <pre>
       * 点炮次数
       * </pre>
       * <p>
       * <code>uint32 dianpaoCount = 5;</code>
       */
      public Builder setDianpaoCount(int value) {

        dianpaoCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 点炮次数
       * </pre>
       * <p>
       * <code>uint32 dianpaoCount = 5;</code>
       */
      public Builder clearDianpaoCount() {

        dianpaoCount_ = 0;
        onChanged();
        return this;
      }

      private int angang_;

      /**
       * <pre>
       * 暗杠次数
       * </pre>
       * <p>
       * <code>uint32 angang = 6;</code>
       */
      public int getAngang() {
        return angang_;
      }

      /**
       * <pre>
       * 暗杠次数
       * </pre>
       * <p>
       * <code>uint32 angang = 6;</code>
       */
      public Builder setAngang(int value) {

        angang_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 暗杠次数
       * </pre>
       * <p>
       * <code>uint32 angang = 6;</code>
       */
      public Builder clearAngang() {

        angang_ = 0;
        onChanged();
        return this;
      }

      private int minggang_;

      /**
       * <pre>
       * 明杠次数
       * </pre>
       * <p>
       * <code>uint32 minggang = 7;</code>
       */
      public int getMinggang() {
        return minggang_;
      }

      /**
       * <pre>
       * 明杠次数
       * </pre>
       * <p>
       * <code>uint32 minggang = 7;</code>
       */
      public Builder setMinggang(int value) {

        minggang_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 明杠次数
       * </pre>
       * <p>
       * <code>uint32 minggang = 7;</code>
       */
      public Builder clearMinggang() {

        minggang_ = 0;
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongSeatGameBalance)
    }

    // @@protoc_insertion_point(class_scope:MahjongSeatGameBalance)
    private static final game.mode.Mahjong.MahjongSeatGameBalance DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongSeatGameBalance();
    }

    public static game.mode.Mahjong.MahjongSeatGameBalance getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongSeatGameBalance>
            PARSER = new com.google.protobuf.AbstractParser<MahjongSeatGameBalance>() {
      public MahjongSeatGameBalance parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongSeatGameBalance(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongSeatGameBalance> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongSeatGameBalance> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongSeatGameBalance getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongReplayDataOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongReplayData)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.GameInitInfo gameInitInfo = 1;</code>
     */
    boolean hasGameInitInfo();

    /**
     * <code>.GameInitInfo gameInitInfo = 1;</code>
     */
    game.mode.Mahjong.GameInitInfo getGameInitInfo();

    /**
     * <code>.GameInitInfo gameInitInfo = 1;</code>
     */
    game.mode.Mahjong.GameInitInfoOrBuilder getGameInitInfoOrBuilder();

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    java.util.List<game.mode.GameBase.BaseAction>
    getHistoryList();

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    game.mode.GameBase.BaseAction getHistory(int index);

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    int getHistoryCount();

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    java.util.List<? extends game.mode.GameBase.BaseActionOrBuilder>
    getHistoryOrBuilderList();

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    game.mode.GameBase.BaseActionOrBuilder getHistoryOrBuilder(
            int index);

    /**
     * <code>.MahjongResultResponse result = 3;</code>
     */
    boolean hasResult();

    /**
     * <code>.MahjongResultResponse result = 3;</code>
     */
    game.mode.Mahjong.MahjongResultResponse getResult();

    /**
     * <code>.MahjongResultResponse result = 3;</code>
     */
    game.mode.Mahjong.MahjongResultResponseOrBuilder getResultOrBuilder();
  }

  /**
   * <pre>
   * 回放数据
   * </pre>
   * <p>
   * Protobuf type {@code MahjongReplayData}
   */
  public static final class MahjongReplayData extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongReplayData)
          MahjongReplayDataOrBuilder {
    // Use MahjongReplayData.newBuilder() to construct.
    private MahjongReplayData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongReplayData() {
      history_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongReplayData(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              game.mode.Mahjong.GameInitInfo.Builder subBuilder = null;
              if (gameInitInfo_ != null) {
                subBuilder = gameInitInfo_.toBuilder();
              }
              gameInitInfo_ = input.readMessage(game.mode.Mahjong.GameInitInfo.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gameInitInfo_);
                gameInitInfo_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                history_ = new java.util.ArrayList<game.mode.GameBase.BaseAction>();
                mutable_bitField0_ |= 0x00000002;
              }
              history_.add(
                      input.readMessage(game.mode.GameBase.BaseAction.parser(), extensionRegistry));
              break;
            }
            case 26: {
              game.mode.Mahjong.MahjongResultResponse.Builder subBuilder = null;
              if (result_ != null) {
                subBuilder = result_.toBuilder();
              }
              result_ = input.readMessage(game.mode.Mahjong.MahjongResultResponse.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(result_);
                result_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          history_ = java.util.Collections.unmodifiableList(history_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongReplayData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongReplayData_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongReplayData.class, game.mode.Mahjong.MahjongReplayData.Builder.class);
    }

    private int bitField0_;
    public static final int GAMEINITINFO_FIELD_NUMBER = 1;
    private game.mode.Mahjong.GameInitInfo gameInitInfo_;

    /**
     * <code>.GameInitInfo gameInitInfo = 1;</code>
     */
    public boolean hasGameInitInfo() {
      return gameInitInfo_ != null;
    }

    /**
     * <code>.GameInitInfo gameInitInfo = 1;</code>
     */
    public game.mode.Mahjong.GameInitInfo getGameInitInfo() {
      return gameInitInfo_ == null ? game.mode.Mahjong.GameInitInfo.getDefaultInstance() : gameInitInfo_;
    }

    /**
     * <code>.GameInitInfo gameInitInfo = 1;</code>
     */
    public game.mode.Mahjong.GameInitInfoOrBuilder getGameInitInfoOrBuilder() {
      return getGameInitInfo();
    }

    public static final int HISTORY_FIELD_NUMBER = 2;
    private java.util.List<game.mode.GameBase.BaseAction> history_;

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    public java.util.List<game.mode.GameBase.BaseAction> getHistoryList() {
      return history_;
    }

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    public java.util.List<? extends game.mode.GameBase.BaseActionOrBuilder>
    getHistoryOrBuilderList() {
      return history_;
    }

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    public int getHistoryCount() {
      return history_.size();
    }

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    public game.mode.GameBase.BaseAction getHistory(int index) {
      return history_.get(index);
    }

    /**
     * <pre>
     * 操作记录
     * </pre>
     * <p>
     * <code>repeated .BaseAction history = 2;</code>
     */
    public game.mode.GameBase.BaseActionOrBuilder getHistoryOrBuilder(
            int index) {
      return history_.get(index);
    }

    public static final int RESULT_FIELD_NUMBER = 3;
    private game.mode.Mahjong.MahjongResultResponse result_;

    /**
     * <code>.MahjongResultResponse result = 3;</code>
     */
    public boolean hasResult() {
      return result_ != null;
    }

    /**
     * <code>.MahjongResultResponse result = 3;</code>
     */
    public game.mode.Mahjong.MahjongResultResponse getResult() {
      return result_ == null ? game.mode.Mahjong.MahjongResultResponse.getDefaultInstance() : result_;
    }

    /**
     * <code>.MahjongResultResponse result = 3;</code>
     */
    public game.mode.Mahjong.MahjongResultResponseOrBuilder getResultOrBuilder() {
      return getResult();
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      if (gameInitInfo_ != null) {
        output.writeMessage(1, getGameInitInfo());
      }
      for (int i = 0; i < history_.size(); i++) {
        output.writeMessage(2, history_.get(i));
      }
      if (result_ != null) {
        output.writeMessage(3, getResult());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (gameInitInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(1, getGameInitInfo());
      }
      for (int i = 0; i < history_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(2, history_.get(i));
      }
      if (result_ != null) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(3, getResult());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongReplayData)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongReplayData other = (game.mode.Mahjong.MahjongReplayData) obj;

      boolean result = true;
      result = result && (hasGameInitInfo() == other.hasGameInitInfo());
      if (hasGameInitInfo()) {
        result = result && getGameInitInfo()
                .equals(other.getGameInitInfo());
      }
      result = result && getHistoryList()
              .equals(other.getHistoryList());
      result = result && (hasResult() == other.hasResult());
      if (hasResult()) {
        result = result && getResult()
                .equals(other.getResult());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasGameInitInfo()) {
        hash = (37 * hash) + GAMEINITINFO_FIELD_NUMBER;
        hash = (53 * hash) + getGameInitInfo().hashCode();
      }
      if (getHistoryCount() > 0) {
        hash = (37 * hash) + HISTORY_FIELD_NUMBER;
        hash = (53 * hash) + getHistoryList().hashCode();
      }
      if (hasResult()) {
        hash = (37 * hash) + RESULT_FIELD_NUMBER;
        hash = (53 * hash) + getResult().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongReplayData parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongReplayData parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongReplayData parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongReplayData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 回放数据
     * </pre>
     * <p>
     * Protobuf type {@code MahjongReplayData}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongReplayData)
            game.mode.Mahjong.MahjongReplayDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongReplayData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongReplayData_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongReplayData.class, game.mode.Mahjong.MahjongReplayData.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongReplayData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHistoryFieldBuilder();
        }
      }

      public Builder clear() {
        super.clear();
        if (gameInitInfoBuilder_ == null) {
          gameInitInfo_ = null;
        } else {
          gameInitInfo_ = null;
          gameInitInfoBuilder_ = null;
        }
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          historyBuilder_.clear();
        }
        if (resultBuilder_ == null) {
          result_ = null;
        } else {
          result_ = null;
          resultBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongReplayData_descriptor;
      }

      public game.mode.Mahjong.MahjongReplayData getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongReplayData.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongReplayData build() {
        game.mode.Mahjong.MahjongReplayData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongReplayData buildPartial() {
        game.mode.Mahjong.MahjongReplayData result = new game.mode.Mahjong.MahjongReplayData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (gameInitInfoBuilder_ == null) {
          result.gameInitInfo_ = gameInitInfo_;
        } else {
          result.gameInitInfo_ = gameInitInfoBuilder_.build();
        }
        if (historyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            history_ = java.util.Collections.unmodifiableList(history_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.history_ = history_;
        } else {
          result.history_ = historyBuilder_.build();
        }
        if (resultBuilder_ == null) {
          result.result_ = result_;
        } else {
          result.result_ = resultBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongReplayData) {
          return mergeFrom((game.mode.Mahjong.MahjongReplayData) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongReplayData other) {
        if (other == game.mode.Mahjong.MahjongReplayData.getDefaultInstance()) return this;
        if (other.hasGameInitInfo()) {
          mergeGameInitInfo(other.getGameInitInfo());
        }
        if (historyBuilder_ == null) {
          if (!other.history_.isEmpty()) {
            if (history_.isEmpty()) {
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureHistoryIsMutable();
              history_.addAll(other.history_);
            }
            onChanged();
          }
        } else {
          if (!other.history_.isEmpty()) {
            if (historyBuilder_.isEmpty()) {
              historyBuilder_.dispose();
              historyBuilder_ = null;
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000002);
              historyBuilder_ =
                      com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                              getHistoryFieldBuilder() : null;
            } else {
              historyBuilder_.addAllMessages(other.history_);
            }
          }
        }
        if (other.hasResult()) {
          mergeResult(other.getResult());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongReplayData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongReplayData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private game.mode.Mahjong.GameInitInfo gameInitInfo_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
              game.mode.Mahjong.GameInitInfo, game.mode.Mahjong.GameInitInfo.Builder, game.mode.Mahjong.GameInitInfoOrBuilder> gameInitInfoBuilder_;

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public boolean hasGameInitInfo() {
        return gameInitInfoBuilder_ != null || gameInitInfo_ != null;
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public game.mode.Mahjong.GameInitInfo getGameInitInfo() {
        if (gameInitInfoBuilder_ == null) {
          return gameInitInfo_ == null ? game.mode.Mahjong.GameInitInfo.getDefaultInstance() : gameInitInfo_;
        } else {
          return gameInitInfoBuilder_.getMessage();
        }
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public Builder setGameInitInfo(game.mode.Mahjong.GameInitInfo value) {
        if (gameInitInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gameInitInfo_ = value;
          onChanged();
        } else {
          gameInitInfoBuilder_.setMessage(value);
        }

        return this;
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public Builder setGameInitInfo(
              game.mode.Mahjong.GameInitInfo.Builder builderForValue) {
        if (gameInitInfoBuilder_ == null) {
          gameInitInfo_ = builderForValue.build();
          onChanged();
        } else {
          gameInitInfoBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public Builder mergeGameInitInfo(game.mode.Mahjong.GameInitInfo value) {
        if (gameInitInfoBuilder_ == null) {
          if (gameInitInfo_ != null) {
            gameInitInfo_ =
                    game.mode.Mahjong.GameInitInfo.newBuilder(gameInitInfo_).mergeFrom(value).buildPartial();
          } else {
            gameInitInfo_ = value;
          }
          onChanged();
        } else {
          gameInitInfoBuilder_.mergeFrom(value);
        }

        return this;
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public Builder clearGameInitInfo() {
        if (gameInitInfoBuilder_ == null) {
          gameInitInfo_ = null;
          onChanged();
        } else {
          gameInitInfo_ = null;
          gameInitInfoBuilder_ = null;
        }

        return this;
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public game.mode.Mahjong.GameInitInfo.Builder getGameInitInfoBuilder() {

        onChanged();
        return getGameInitInfoFieldBuilder().getBuilder();
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      public game.mode.Mahjong.GameInitInfoOrBuilder getGameInitInfoOrBuilder() {
        if (gameInitInfoBuilder_ != null) {
          return gameInitInfoBuilder_.getMessageOrBuilder();
        } else {
          return gameInitInfo_ == null ?
                  game.mode.Mahjong.GameInitInfo.getDefaultInstance() : gameInitInfo_;
        }
      }

      /**
       * <code>.GameInitInfo gameInitInfo = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              game.mode.Mahjong.GameInitInfo, game.mode.Mahjong.GameInitInfo.Builder, game.mode.Mahjong.GameInitInfoOrBuilder>
      getGameInitInfoFieldBuilder() {
        if (gameInitInfoBuilder_ == null) {
          gameInitInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  game.mode.Mahjong.GameInitInfo, game.mode.Mahjong.GameInitInfo.Builder, game.mode.Mahjong.GameInitInfoOrBuilder>(
                  getGameInitInfo(),
                  getParentForChildren(),
                  isClean());
          gameInitInfo_ = null;
        }
        return gameInitInfoBuilder_;
      }

      private java.util.List<game.mode.GameBase.BaseAction> history_ =
              java.util.Collections.emptyList();

      private void ensureHistoryIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          history_ = new java.util.ArrayList<game.mode.GameBase.BaseAction>(history_);
          bitField0_ |= 0x00000002;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.GameBase.BaseAction, game.mode.GameBase.BaseAction.Builder, game.mode.GameBase.BaseActionOrBuilder> historyBuilder_;

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public java.util.List<game.mode.GameBase.BaseAction> getHistoryList() {
        if (historyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(history_);
        } else {
          return historyBuilder_.getMessageList();
        }
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public int getHistoryCount() {
        if (historyBuilder_ == null) {
          return history_.size();
        } else {
          return historyBuilder_.getCount();
        }
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public game.mode.GameBase.BaseAction getHistory(int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessage(index);
        }
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder setHistory(
              int index, game.mode.GameBase.BaseAction value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.set(index, value);
          onChanged();
        } else {
          historyBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder setHistory(
              int index, game.mode.GameBase.BaseAction.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.set(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder addHistory(game.mode.GameBase.BaseAction value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(value);
          onChanged();
        } else {
          historyBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder addHistory(
              int index, game.mode.GameBase.BaseAction value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(index, value);
          onChanged();
        } else {
          historyBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder addHistory(
              game.mode.GameBase.BaseAction.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder addHistory(
              int index, game.mode.GameBase.BaseAction.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder addAllHistory(
              java.lang.Iterable<? extends game.mode.GameBase.BaseAction> values) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, history_);
          onChanged();
        } else {
          historyBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder clearHistory() {
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          historyBuilder_.clear();
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public Builder removeHistory(int index) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.remove(index);
          onChanged();
        } else {
          historyBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public game.mode.GameBase.BaseAction.Builder getHistoryBuilder(
              int index) {
        return getHistoryFieldBuilder().getBuilder(index);
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public game.mode.GameBase.BaseActionOrBuilder getHistoryOrBuilder(
              int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public java.util.List<? extends game.mode.GameBase.BaseActionOrBuilder>
      getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public game.mode.GameBase.BaseAction.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
                game.mode.GameBase.BaseAction.getDefaultInstance());
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public game.mode.GameBase.BaseAction.Builder addHistoryBuilder(
              int index) {
        return getHistoryFieldBuilder().addBuilder(
                index, game.mode.GameBase.BaseAction.getDefaultInstance());
      }

      /**
       * <pre>
       * 操作记录
       * </pre>
       * <p>
       * <code>repeated .BaseAction history = 2;</code>
       */
      public java.util.List<game.mode.GameBase.BaseAction.Builder>
      getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.GameBase.BaseAction, game.mode.GameBase.BaseAction.Builder, game.mode.GameBase.BaseActionOrBuilder>
      getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  game.mode.GameBase.BaseAction, game.mode.GameBase.BaseAction.Builder, game.mode.GameBase.BaseActionOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      private game.mode.Mahjong.MahjongResultResponse result_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
              game.mode.Mahjong.MahjongResultResponse, game.mode.Mahjong.MahjongResultResponse.Builder, game.mode.Mahjong.MahjongResultResponseOrBuilder> resultBuilder_;

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public boolean hasResult() {
        return resultBuilder_ != null || result_ != null;
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public game.mode.Mahjong.MahjongResultResponse getResult() {
        if (resultBuilder_ == null) {
          return result_ == null ? game.mode.Mahjong.MahjongResultResponse.getDefaultInstance() : result_;
        } else {
          return resultBuilder_.getMessage();
        }
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public Builder setResult(game.mode.Mahjong.MahjongResultResponse value) {
        if (resultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          resultBuilder_.setMessage(value);
        }

        return this;
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public Builder setResult(
              game.mode.Mahjong.MahjongResultResponse.Builder builderForValue) {
        if (resultBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          resultBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public Builder mergeResult(game.mode.Mahjong.MahjongResultResponse value) {
        if (resultBuilder_ == null) {
          if (result_ != null) {
            result_ =
                    game.mode.Mahjong.MahjongResultResponse.newBuilder(result_).mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          resultBuilder_.mergeFrom(value);
        }

        return this;
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public Builder clearResult() {
        if (resultBuilder_ == null) {
          result_ = null;
          onChanged();
        } else {
          result_ = null;
          resultBuilder_ = null;
        }

        return this;
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public game.mode.Mahjong.MahjongResultResponse.Builder getResultBuilder() {

        onChanged();
        return getResultFieldBuilder().getBuilder();
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      public game.mode.Mahjong.MahjongResultResponseOrBuilder getResultOrBuilder() {
        if (resultBuilder_ != null) {
          return resultBuilder_.getMessageOrBuilder();
        } else {
          return result_ == null ?
                  game.mode.Mahjong.MahjongResultResponse.getDefaultInstance() : result_;
        }
      }

      /**
       * <code>.MahjongResultResponse result = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
              game.mode.Mahjong.MahjongResultResponse, game.mode.Mahjong.MahjongResultResponse.Builder, game.mode.Mahjong.MahjongResultResponseOrBuilder>
      getResultFieldBuilder() {
        if (resultBuilder_ == null) {
          resultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                  game.mode.Mahjong.MahjongResultResponse, game.mode.Mahjong.MahjongResultResponse.Builder, game.mode.Mahjong.MahjongResultResponseOrBuilder>(
                  getResult(),
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        return resultBuilder_;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongReplayData)
    }

    // @@protoc_insertion_point(class_scope:MahjongReplayData)
    private static final game.mode.Mahjong.MahjongReplayData DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongReplayData();
    }

    public static game.mode.Mahjong.MahjongReplayData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongReplayData>
            PARSER = new com.google.protobuf.AbstractParser<MahjongReplayData>() {
      public MahjongReplayData parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new MahjongReplayData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongReplayData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongReplayData> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongReplayData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GameInitInfoOrBuilder extends
          // @@protoc_insertion_point(interface_extends:GameInitInfo)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    java.util.List<game.mode.Mahjong.MahjongSeatGameInitInfo>
    getSeatsList();

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    game.mode.Mahjong.MahjongSeatGameInitInfo getSeats(int index);

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    int getSeatsCount();

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    java.util.List<? extends game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder>
    getSeatsOrBuilderList();

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder getSeatsOrBuilder(
            int index);

    /**
     * <pre>
     * 当前游戏局数
     * </pre>
     * <p>
     * <code>uint32 gameCount = 2;</code>
     */
    int getGameCount();

    /**
     * <pre>
     * 游戏局数
     * </pre>
     * <p>
     * <code>uint32 gameTimes = 3;</code>
     */
    int getGameTimes();

    /**
     * <pre>
     * 剩余张数
     * </pre>
     * <p>
     * <code>uint32 surplusCardsSize = 4;</code>
     */
    int getSurplusCardsSize();

    /**
     * <pre>
     * 庄家ID
     * </pre>
     * <p>
     * <code>uint32 banker = 5;</code>
     */
    int getBanker();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    java.util.List<java.lang.Integer> getDiceList();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    int getDiceCount();

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    int getDice(int index);

    /**
     * <pre>
     * 赖子
     * </pre>
     * <p>
     * <code>int32 rogue = 7;</code>
     */
    int getRogue();
  }

  /**
   * <pre>
   * 初始游戏数据
   * </pre>
   * <p>
   * Protobuf type {@code GameInitInfo}
   */
  public static final class GameInitInfo extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:GameInitInfo)
          GameInitInfoOrBuilder {
    // Use GameInitInfo.newBuilder() to construct.
    private GameInitInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private GameInitInfo() {
      seats_ = java.util.Collections.emptyList();
      gameCount_ = 0;
      gameTimes_ = 0;
      surplusCardsSize_ = 0;
      banker_ = 0;
      dice_ = java.util.Collections.emptyList();
      rogue_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private GameInitInfo(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                seats_ = new java.util.ArrayList<game.mode.Mahjong.MahjongSeatGameInitInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              seats_.add(
                      input.readMessage(game.mode.Mahjong.MahjongSeatGameInitInfo.parser(), extensionRegistry));
              break;
            }
            case 16: {

              gameCount_ = input.readUInt32();
              break;
            }
            case 24: {

              gameTimes_ = input.readUInt32();
              break;
            }
            case 32: {

              surplusCardsSize_ = input.readUInt32();
              break;
            }
            case 40: {

              banker_ = input.readUInt32();
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                dice_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              dice_.add(input.readUInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                dice_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                dice_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {

              rogue_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          seats_ = java.util.Collections.unmodifiableList(seats_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          dice_ = java.util.Collections.unmodifiableList(dice_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_GameInitInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_GameInitInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.GameInitInfo.class, game.mode.Mahjong.GameInitInfo.Builder.class);
    }

    private int bitField0_;
    public static final int SEATS_FIELD_NUMBER = 1;
    private java.util.List<game.mode.Mahjong.MahjongSeatGameInitInfo> seats_;

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    public java.util.List<game.mode.Mahjong.MahjongSeatGameInitInfo> getSeatsList() {
      return seats_;
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    public java.util.List<? extends game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder>
    getSeatsOrBuilderList() {
      return seats_;
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    public int getSeatsCount() {
      return seats_.size();
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    public game.mode.Mahjong.MahjongSeatGameInitInfo getSeats(int index) {
      return seats_.get(index);
    }

    /**
     * <pre>
     * 座位
     * </pre>
     * <p>
     * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
     */
    public game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder getSeatsOrBuilder(
            int index) {
      return seats_.get(index);
    }

    public static final int GAMECOUNT_FIELD_NUMBER = 2;
    private int gameCount_;

    /**
     * <pre>
     * 当前游戏局数
     * </pre>
     * <p>
     * <code>uint32 gameCount = 2;</code>
     */
    public int getGameCount() {
      return gameCount_;
    }

    public static final int GAMETIMES_FIELD_NUMBER = 3;
    private int gameTimes_;

    /**
     * <pre>
     * 游戏局数
     * </pre>
     * <p>
     * <code>uint32 gameTimes = 3;</code>
     */
    public int getGameTimes() {
      return gameTimes_;
    }

    public static final int SURPLUSCARDSSIZE_FIELD_NUMBER = 4;
    private int surplusCardsSize_;

    /**
     * <pre>
     * 剩余张数
     * </pre>
     * <p>
     * <code>uint32 surplusCardsSize = 4;</code>
     */
    public int getSurplusCardsSize() {
      return surplusCardsSize_;
    }

    public static final int BANKER_FIELD_NUMBER = 5;
    private int banker_;

    /**
     * <pre>
     * 庄家ID
     * </pre>
     * <p>
     * <code>uint32 banker = 5;</code>
     */
    public int getBanker() {
      return banker_;
    }

    public static final int DICE_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> dice_;

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    public java.util.List<java.lang.Integer>
    getDiceList() {
      return dice_;
    }

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    public int getDiceCount() {
      return dice_.size();
    }

    /**
     * <pre>
     * 骰子
     * </pre>
     * <p>
     * <code>repeated uint32 dice = 6;</code>
     */
    public int getDice(int index) {
      return dice_.get(index);
    }

    private int diceMemoizedSerializedSize = -1;

    public static final int ROGUE_FIELD_NUMBER = 7;
    private int rogue_;

    /**
     * <pre>
     * 赖子
     * </pre>
     * <p>
     * <code>int32 rogue = 7;</code>
     */
    public int getRogue() {
      return rogue_;
    }

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < seats_.size(); i++) {
        output.writeMessage(1, seats_.get(i));
      }
      if (gameCount_ != 0) {
        output.writeUInt32(2, gameCount_);
      }
      if (gameTimes_ != 0) {
        output.writeUInt32(3, gameTimes_);
      }
      if (surplusCardsSize_ != 0) {
        output.writeUInt32(4, surplusCardsSize_);
      }
      if (banker_ != 0) {
        output.writeUInt32(5, banker_);
      }
      if (getDiceList().size() > 0) {
        output.writeUInt32NoTag(50);
        output.writeUInt32NoTag(diceMemoizedSerializedSize);
      }
      for (int i = 0; i < dice_.size(); i++) {
        output.writeUInt32NoTag(dice_.get(i));
      }
      if (rogue_ != 0) {
        output.writeInt32(7, rogue_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < seats_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
                .computeMessageSize(1, seats_.get(i));
      }
      if (gameCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(2, gameCount_);
      }
      if (gameTimes_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(3, gameTimes_);
      }
      if (surplusCardsSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(4, surplusCardsSize_);
      }
      if (banker_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(5, banker_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dice_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeUInt32SizeNoTag(dice_.get(i));
        }
        size += dataSize;
        if (!getDiceList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        diceMemoizedSerializedSize = dataSize;
      }
      if (rogue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeInt32Size(7, rogue_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.GameInitInfo)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.GameInitInfo other = (game.mode.Mahjong.GameInitInfo) obj;

      boolean result = true;
      result = result && getSeatsList()
              .equals(other.getSeatsList());
      result = result && (getGameCount()
              == other.getGameCount());
      result = result && (getGameTimes()
              == other.getGameTimes());
      result = result && (getSurplusCardsSize()
              == other.getSurplusCardsSize());
      result = result && (getBanker()
              == other.getBanker());
      result = result && getDiceList()
              .equals(other.getDiceList());
      result = result && (getRogue()
              == other.getRogue());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSeatsCount() > 0) {
        hash = (37 * hash) + SEATS_FIELD_NUMBER;
        hash = (53 * hash) + getSeatsList().hashCode();
      }
      hash = (37 * hash) + GAMECOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getGameCount();
      hash = (37 * hash) + GAMETIMES_FIELD_NUMBER;
      hash = (53 * hash) + getGameTimes();
      hash = (37 * hash) + SURPLUSCARDSSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getSurplusCardsSize();
      hash = (37 * hash) + BANKER_FIELD_NUMBER;
      hash = (53 * hash) + getBanker();
      if (getDiceCount() > 0) {
        hash = (37 * hash) + DICE_FIELD_NUMBER;
        hash = (53 * hash) + getDiceList().hashCode();
      }
      hash = (37 * hash) + ROGUE_FIELD_NUMBER;
      hash = (53 * hash) + getRogue();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.GameInitInfo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.GameInitInfo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.GameInitInfo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.GameInitInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 初始游戏数据
     * </pre>
     * <p>
     * Protobuf type {@code GameInitInfo}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:GameInitInfo)
            game.mode.Mahjong.GameInitInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_GameInitInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_GameInitInfo_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.GameInitInfo.class, game.mode.Mahjong.GameInitInfo.Builder.class);
      }

      // Construct using game.mode.Mahjong.GameInitInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSeatsFieldBuilder();
        }
      }

      public Builder clear() {
        super.clear();
        if (seatsBuilder_ == null) {
          seats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          seatsBuilder_.clear();
        }
        gameCount_ = 0;

        gameTimes_ = 0;

        surplusCardsSize_ = 0;

        banker_ = 0;

        dice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        rogue_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_GameInitInfo_descriptor;
      }

      public game.mode.Mahjong.GameInitInfo getDefaultInstanceForType() {
        return game.mode.Mahjong.GameInitInfo.getDefaultInstance();
      }

      public game.mode.Mahjong.GameInitInfo build() {
        game.mode.Mahjong.GameInitInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.GameInitInfo buildPartial() {
        game.mode.Mahjong.GameInitInfo result = new game.mode.Mahjong.GameInitInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (seatsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            seats_ = java.util.Collections.unmodifiableList(seats_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.seats_ = seats_;
        } else {
          result.seats_ = seatsBuilder_.build();
        }
        result.gameCount_ = gameCount_;
        result.gameTimes_ = gameTimes_;
        result.surplusCardsSize_ = surplusCardsSize_;
        result.banker_ = banker_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          dice_ = java.util.Collections.unmodifiableList(dice_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.dice_ = dice_;
        result.rogue_ = rogue_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.GameInitInfo) {
          return mergeFrom((game.mode.Mahjong.GameInitInfo) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.GameInitInfo other) {
        if (other == game.mode.Mahjong.GameInitInfo.getDefaultInstance()) return this;
        if (seatsBuilder_ == null) {
          if (!other.seats_.isEmpty()) {
            if (seats_.isEmpty()) {
              seats_ = other.seats_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSeatsIsMutable();
              seats_.addAll(other.seats_);
            }
            onChanged();
          }
        } else {
          if (!other.seats_.isEmpty()) {
            if (seatsBuilder_.isEmpty()) {
              seatsBuilder_.dispose();
              seatsBuilder_ = null;
              seats_ = other.seats_;
              bitField0_ = (bitField0_ & ~0x00000001);
              seatsBuilder_ =
                      com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                              getSeatsFieldBuilder() : null;
            } else {
              seatsBuilder_.addAllMessages(other.seats_);
            }
          }
        }
        if (other.getGameCount() != 0) {
          setGameCount(other.getGameCount());
        }
        if (other.getGameTimes() != 0) {
          setGameTimes(other.getGameTimes());
        }
        if (other.getSurplusCardsSize() != 0) {
          setSurplusCardsSize(other.getSurplusCardsSize());
        }
        if (other.getBanker() != 0) {
          setBanker(other.getBanker());
        }
        if (!other.dice_.isEmpty()) {
          if (dice_.isEmpty()) {
            dice_ = other.dice_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDiceIsMutable();
            dice_.addAll(other.dice_);
          }
          onChanged();
        }
        if (other.getRogue() != 0) {
          setRogue(other.getRogue());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.GameInitInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.GameInitInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private java.util.List<game.mode.Mahjong.MahjongSeatGameInitInfo> seats_ =
              java.util.Collections.emptyList();

      private void ensureSeatsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          seats_ = new java.util.ArrayList<game.mode.Mahjong.MahjongSeatGameInitInfo>(seats_);
          bitField0_ |= 0x00000001;
        }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongSeatGameInitInfo, game.mode.Mahjong.MahjongSeatGameInitInfo.Builder, game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder> seatsBuilder_;

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongSeatGameInitInfo> getSeatsList() {
        if (seatsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(seats_);
        } else {
          return seatsBuilder_.getMessageList();
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public int getSeatsCount() {
        if (seatsBuilder_ == null) {
          return seats_.size();
        } else {
          return seatsBuilder_.getCount();
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInitInfo getSeats(int index) {
        if (seatsBuilder_ == null) {
          return seats_.get(index);
        } else {
          return seatsBuilder_.getMessage(index);
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder setSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInitInfo value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.set(index, value);
          onChanged();
        } else {
          seatsBuilder_.setMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder setSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInitInfo.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.set(index, builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder addSeats(game.mode.Mahjong.MahjongSeatGameInitInfo value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.add(value);
          onChanged();
        } else {
          seatsBuilder_.addMessage(value);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder addSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInitInfo value) {
        if (seatsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSeatsIsMutable();
          seats_.add(index, value);
          onChanged();
        } else {
          seatsBuilder_.addMessage(index, value);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder addSeats(
              game.mode.Mahjong.MahjongSeatGameInitInfo.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.add(builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder addSeats(
              int index, game.mode.Mahjong.MahjongSeatGameInitInfo.Builder builderForValue) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.add(index, builderForValue.build());
          onChanged();
        } else {
          seatsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder addAllSeats(
              java.lang.Iterable<? extends game.mode.Mahjong.MahjongSeatGameInitInfo> values) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
                  values, seats_);
          onChanged();
        } else {
          seatsBuilder_.addAllMessages(values);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder clearSeats() {
        if (seatsBuilder_ == null) {
          seats_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          seatsBuilder_.clear();
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public Builder removeSeats(int index) {
        if (seatsBuilder_ == null) {
          ensureSeatsIsMutable();
          seats_.remove(index);
          onChanged();
        } else {
          seatsBuilder_.remove(index);
        }
        return this;
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInitInfo.Builder getSeatsBuilder(
              int index) {
        return getSeatsFieldBuilder().getBuilder(index);
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder getSeatsOrBuilder(
              int index) {
        if (seatsBuilder_ == null) {
          return seats_.get(index);
        } else {
          return seatsBuilder_.getMessageOrBuilder(index);
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public java.util.List<? extends game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder>
      getSeatsOrBuilderList() {
        if (seatsBuilder_ != null) {
          return seatsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(seats_);
        }
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInitInfo.Builder addSeatsBuilder() {
        return getSeatsFieldBuilder().addBuilder(
                game.mode.Mahjong.MahjongSeatGameInitInfo.getDefaultInstance());
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public game.mode.Mahjong.MahjongSeatGameInitInfo.Builder addSeatsBuilder(
              int index) {
        return getSeatsFieldBuilder().addBuilder(
                index, game.mode.Mahjong.MahjongSeatGameInitInfo.getDefaultInstance());
      }

      /**
       * <pre>
       * 座位
       * </pre>
       * <p>
       * <code>repeated .MahjongSeatGameInitInfo seats = 1;</code>
       */
      public java.util.List<game.mode.Mahjong.MahjongSeatGameInitInfo.Builder>
      getSeatsBuilderList() {
        return getSeatsFieldBuilder().getBuilderList();
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
              game.mode.Mahjong.MahjongSeatGameInitInfo, game.mode.Mahjong.MahjongSeatGameInitInfo.Builder, game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder>
      getSeatsFieldBuilder() {
        if (seatsBuilder_ == null) {
          seatsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                  game.mode.Mahjong.MahjongSeatGameInitInfo, game.mode.Mahjong.MahjongSeatGameInitInfo.Builder, game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder>(
                  seats_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          seats_ = null;
        }
        return seatsBuilder_;
      }

      private int gameCount_;

      /**
       * <pre>
       * 当前游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameCount = 2;</code>
       */
      public int getGameCount() {
        return gameCount_;
      }

      /**
       * <pre>
       * 当前游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameCount = 2;</code>
       */
      public Builder setGameCount(int value) {

        gameCount_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 当前游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameCount = 2;</code>
       */
      public Builder clearGameCount() {

        gameCount_ = 0;
        onChanged();
        return this;
      }

      private int gameTimes_;

      /**
       * <pre>
       * 游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameTimes = 3;</code>
       */
      public int getGameTimes() {
        return gameTimes_;
      }

      /**
       * <pre>
       * 游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameTimes = 3;</code>
       */
      public Builder setGameTimes(int value) {

        gameTimes_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 游戏局数
       * </pre>
       * <p>
       * <code>uint32 gameTimes = 3;</code>
       */
      public Builder clearGameTimes() {

        gameTimes_ = 0;
        onChanged();
        return this;
      }

      private int surplusCardsSize_;

      /**
       * <pre>
       * 剩余张数
       * </pre>
       * <p>
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public int getSurplusCardsSize() {
        return surplusCardsSize_;
      }

      /**
       * <pre>
       * 剩余张数
       * </pre>
       * <p>
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public Builder setSurplusCardsSize(int value) {

        surplusCardsSize_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 剩余张数
       * </pre>
       * <p>
       * <code>uint32 surplusCardsSize = 4;</code>
       */
      public Builder clearSurplusCardsSize() {

        surplusCardsSize_ = 0;
        onChanged();
        return this;
      }

      private int banker_;

      /**
       * <pre>
       * 庄家ID
       * </pre>
       * <p>
       * <code>uint32 banker = 5;</code>
       */
      public int getBanker() {
        return banker_;
      }

      /**
       * <pre>
       * 庄家ID
       * </pre>
       * <p>
       * <code>uint32 banker = 5;</code>
       */
      public Builder setBanker(int value) {

        banker_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 庄家ID
       * </pre>
       * <p>
       * <code>uint32 banker = 5;</code>
       */
      public Builder clearBanker() {

        banker_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> dice_ = java.util.Collections.emptyList();

      private void ensureDiceIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          dice_ = new java.util.ArrayList<java.lang.Integer>(dice_);
          bitField0_ |= 0x00000020;
        }
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public java.util.List<java.lang.Integer>
      getDiceList() {
        return java.util.Collections.unmodifiableList(dice_);
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public int getDiceCount() {
        return dice_.size();
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public int getDice(int index) {
        return dice_.get(index);
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder setDice(
              int index, int value) {
        ensureDiceIsMutable();
        dice_.set(index, value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder addDice(int value) {
        ensureDiceIsMutable();
        dice_.add(value);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder addAllDice(
              java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDiceIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, dice_);
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 骰子
       * </pre>
       * <p>
       * <code>repeated uint32 dice = 6;</code>
       */
      public Builder clearDice() {
        dice_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private int rogue_;

      /**
       * <pre>
       * 赖子
       * </pre>
       * <p>
       * <code>int32 rogue = 7;</code>
       */
      public int getRogue() {
        return rogue_;
      }

      /**
       * <pre>
       * 赖子
       * </pre>
       * <p>
       * <code>int32 rogue = 7;</code>
       */
      public Builder setRogue(int value) {

        rogue_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 赖子
       * </pre>
       * <p>
       * <code>int32 rogue = 7;</code>
       */
      public Builder clearRogue() {

        rogue_ = 0;
        onChanged();
        return this;
      }

      public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:GameInitInfo)
    }

    // @@protoc_insertion_point(class_scope:GameInitInfo)
    private static final game.mode.Mahjong.GameInitInfo DEFAULT_INSTANCE;

    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.GameInitInfo();
    }

    public static game.mode.Mahjong.GameInitInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GameInitInfo>
            PARSER = new com.google.protobuf.AbstractParser<GameInitInfo>() {
      public GameInitInfo parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameInitInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GameInitInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GameInitInfo> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.GameInitInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MahjongSeatGameInitInfoOrBuilder extends
          // @@protoc_insertion_point(interface_extends:MahjongSeatGameInitInfo)
          com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID
     * </pre>
     * <p>
     * <code>uint32 ID = 1;</code>
     */
    int getID();

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    java.util.List<java.lang.Integer> getInitialCardsList();

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    int getInitialCardsCount();

    /**
     * <pre>
     * 初始手牌
     * </pre>
     * <p>
     * <code>repeated int32 initialCards = 2;</code>
     */
    int getInitialCards(int index);
  }

  /**
   * <pre>
   * 初始座位数据
   * </pre>
   * <p>
   * Protobuf type {@code MahjongSeatGameInitInfo}
   */
  public static final class MahjongSeatGameInitInfo extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:MahjongSeatGameInitInfo)
          MahjongSeatGameInitInfoOrBuilder {
    // Use MahjongSeatGameInitInfo.newBuilder() to construct.
    private MahjongSeatGameInitInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }

    private MahjongSeatGameInitInfo() {
      iD_ = 0;
      initialCards_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }

    private MahjongSeatGameInitInfo(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              iD_ = input.readUInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              initialCards_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                initialCards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                initialCards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
        }
        makeExtensionsImmutable();
      }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return game.mode.Mahjong.internal_static_MahjongSeatGameInitInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return game.mode.Mahjong.internal_static_MahjongSeatGameInitInfo_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      game.mode.Mahjong.MahjongSeatGameInitInfo.class, game.mode.Mahjong.MahjongSeatGameInitInfo.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int iD_;

    /**
     * <pre>
     *ID
     * </pre>
     *
     * <code>uint32 ID = 1;</code>
     */
    public int getID() {
      return iD_;
    }

    public static final int INITIALCARDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> initialCards_;

    /**
     * <pre>
     *初始手牌
     * </pre>
     *
     * <code>repeated int32 initialCards = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getInitialCardsList() {
      return initialCards_;
    }

    /**
     * <pre>
     *初始手牌
     * </pre>
     *
     * <code>repeated int32 initialCards = 2;</code>
     */
    public int getInitialCardsCount() {
      return initialCards_.size();
    }

    /**
     * <pre>
     *初始手牌
     * </pre>
     *
     * <code>repeated int32 initialCards = 2;</code>
     */
    public int getInitialCards(int index) {
      return initialCards_.get(index);
    }

    private int initialCardsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;

    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
      getSerializedSize();
      if (iD_ != 0) {
        output.writeUInt32(1, iD_);
      }
      if (getInitialCardsList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(initialCardsMemoizedSerializedSize);
      }
      for (int i = 0; i < initialCards_.size(); i++) {
        output.writeInt32NoTag(initialCards_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (iD_ != 0) {
        size += com.google.protobuf.CodedOutputStream
                .computeUInt32Size(1, iD_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < initialCards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(initialCards_.get(i));
        }
        size += dataSize;
        if (!getInitialCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
        }
        initialCardsMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
        return true;
      }
      if (!(obj instanceof game.mode.Mahjong.MahjongSeatGameInitInfo)) {
        return super.equals(obj);
      }
      game.mode.Mahjong.MahjongSeatGameInitInfo other = (game.mode.Mahjong.MahjongSeatGameInitInfo) obj;

      boolean result = true;
      result = result && (getID()
              == other.getID());
      result = result && getInitialCardsList()
              .equals(other.getInitialCardsList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getID();
      if (getInitialCardsCount() > 0) {
        hash = (37 * hash) + INITIALCARDS_FIELD_NUMBER;
        hash = (53 * hash) + getInitialCardsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() {
      return newBuilder();
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(game.mode.Mahjong.MahjongSeatGameInitInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }

    /**
     * <pre>
     * 初始座位数据
     * </pre>
     * <p>
     * Protobuf type {@code MahjongSeatGameInitInfo}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:MahjongSeatGameInitInfo)
            game.mode.Mahjong.MahjongSeatGameInitInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameInitInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameInitInfo_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        game.mode.Mahjong.MahjongSeatGameInitInfo.class, game.mode.Mahjong.MahjongSeatGameInitInfo.Builder.class);
      }

      // Construct using game.mode.Mahjong.MahjongSeatGameInitInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }

      public Builder clear() {
        super.clear();
        iD_ = 0;

        initialCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
      getDescriptorForType() {
        return game.mode.Mahjong.internal_static_MahjongSeatGameInitInfo_descriptor;
      }

      public game.mode.Mahjong.MahjongSeatGameInitInfo getDefaultInstanceForType() {
        return game.mode.Mahjong.MahjongSeatGameInitInfo.getDefaultInstance();
      }

      public game.mode.Mahjong.MahjongSeatGameInitInfo build() {
        game.mode.Mahjong.MahjongSeatGameInitInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public game.mode.Mahjong.MahjongSeatGameInitInfo buildPartial() {
        game.mode.Mahjong.MahjongSeatGameInitInfo result = new game.mode.Mahjong.MahjongSeatGameInitInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.iD_ = iD_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          initialCards_ = java.util.Collections.unmodifiableList(initialCards_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.initialCards_ = initialCards_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }

      public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.setField(field, value);
      }

      public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }

      public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }

      public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }

      public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof game.mode.Mahjong.MahjongSeatGameInitInfo) {
          return mergeFrom((game.mode.Mahjong.MahjongSeatGameInitInfo) other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(game.mode.Mahjong.MahjongSeatGameInitInfo other) {
        if (other == game.mode.Mahjong.MahjongSeatGameInitInfo.getDefaultInstance()) return this;
        if (other.getID() != 0) {
          setID(other.getID());
        }
        if (!other.initialCards_.isEmpty()) {
          if (initialCards_.isEmpty()) {
            initialCards_ = other.initialCards_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureInitialCardsIsMutable();
            initialCards_.addAll(other.initialCards_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
        game.mode.Mahjong.MahjongSeatGameInitInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (game.mode.Mahjong.MahjongSeatGameInitInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int bitField0_;

      private int iD_;

      /**
       * <pre>
       *ID
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public int getID() {
        return iD_;
      }

      /**
       * <pre>
       *ID
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public Builder setID(int value) {

        iD_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       *ID
       * </pre>
       *
       * <code>uint32 ID = 1;</code>
       */
      public Builder clearID() {

        iD_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> initialCards_ = java.util.Collections.emptyList();

      private void ensureInitialCardsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          initialCards_ = new java.util.ArrayList<java.lang.Integer>(initialCards_);
          bitField0_ |= 0x00000002;
        }
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public java.util.List<java.lang.Integer>
      getInitialCardsList() {
        return java.util.Collections.unmodifiableList(initialCards_);
      }

      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public int getInitialCardsCount() {
        return initialCards_.size();
      }
      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public int getInitialCards(int index) {
        return initialCards_.get(index);
      }
      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder setInitialCards(
          int index, int value) {
        ensureInitialCardsIsMutable();
        initialCards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder addInitialCards(int value) {
        ensureInitialCardsIsMutable();
        initialCards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder addAllInitialCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInitialCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, initialCards_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *初始手牌
       * </pre>
       *
       * <code>repeated int32 initialCards = 2;</code>
       */
      public Builder clearInitialCards() {
        initialCards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:MahjongSeatGameInitInfo)
    }

    // @@protoc_insertion_point(class_scope:MahjongSeatGameInitInfo)
    private static final game.mode.Mahjong.MahjongSeatGameInitInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new game.mode.Mahjong.MahjongSeatGameInitInfo();
    }

    public static game.mode.Mahjong.MahjongSeatGameInitInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MahjongSeatGameInitInfo>
        PARSER = new com.google.protobuf.AbstractParser<MahjongSeatGameInitInfo>() {
      public MahjongSeatGameInitInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new MahjongSeatGameInitInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MahjongSeatGameInitInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MahjongSeatGameInitInfo> getParserForType() {
      return PARSER;
    }

    public game.mode.Mahjong.MahjongSeatGameInitInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CardsData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CardsData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongHuResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongHuResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongStartResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongStartResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongGameInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongGameInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongSeatGameInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongSeatGameInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongResultResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongResultResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongUserResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongUserResult_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongBalanceResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongBalanceResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongSeatGameBalance_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongSeatGameBalance_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongReplayData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongReplayData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_GameInitInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_GameInitInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MahjongSeatGameInitInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MahjongSeatGameInitInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rmahjong.proto\032\016gameBase.proto\"\032\n\tCards" +
      "Data\022\r\n\005cards\030\001 \003(\005\"A\n\021MahjongHuResponse" +
      "\022\r\n\005cards\030\001 \003(\005\022\035\n\tscoreType\030\002 \003(\0162\n.Sco" +
      "reType\"l\n\024MahjongStartResponse\022\016\n\006banker" +
      "\030\001 \001(\r\022\014\n\004dice\030\002 \003(\r\022\r\n\005cards\030\003 \003(\005\022\030\n\020s" +
      "urplusCardsSize\030\004 \001(\r\022\r\n\005rogue\030\005 \001(\005\"\273\001\n" +
      "\017MahjongGameInfo\022#\n\005seats\030\001 \003(\0132\024.Mahjon" +
      "gSeatGameInfo\022\021\n\tgameCount\030\002 \001(\r\022\021\n\tgame" +
      "Times\030\003 \001(\r\022\030\n\020surplusCardsSize\030\004 \001(\r\022\016\n" +
      "\006banker\030\005 \001(\r\022\014\n\004dice\030\006 \003(\r\022\r\n\005rogue\030\007 \001",
      "(\005\022\026\n\016lastPlayedUser\030\010 \001(\r\"\277\001\n\023MahjongSe" +
      "atGameInfo\022\n\n\002ID\030\001 \001(\r\022\024\n\014initialCards\030\002" +
      " \003(\005\022\r\n\005cards\030\003 \003(\005\022\021\n\tcardsSize\030\004 \001(\r\022\021" +
      "\n\tpengCards\030\005 \003(\005\022\023\n\013anGangCards\030\006 \003(\005\022\025" +
      "\n\rmingGangCards\030\007 \003(\005\022\020\n\010chiCards\030\010 \003(\005\022" +
      "\023\n\013playedCards\030\t \003(\005\"{\n\025MahjongResultRes" +
      "ponse\022&\n\nuserResult\030\001 \003(\0132\022.MahjongUserR" +
      "esult\022\030\n\020readyTimeCounter\030\002 \001(\005\022\016\n\006maCar" +
      "d\030\003 \003(\005\022\020\n\010dateTime\030\004 \001(\004\"\241\002\n\021MahjongUse" +
      "rResult\022\n\n\002ID\030\001 \001(\r\022\021\n\tcardScore\030\002 \001(\005\022\036",
      "\n\nscoreTypes\030\003 \003(\0162\n.ScoreType\022\023\n\013anGang" +
      "Score\030\004 \001(\005\022\025\n\rmingGangScore\030\005 \001(\005\022\017\n\007ma" +
      "Score\030\006 \001(\005\022\r\n\005cards\030\007 \003(\005\022\020\n\010chiCards\030\010" +
      " \003(\005\022\021\n\tpengCards\030\t \003(\005\022\023\n\013anGangCards\030\n" +
      " \003(\005\022\025\n\rmingGangCards\030\013 \003(\005\022\016\n\006huCard\030\014 " +
      "\001(\005\022\021\n\twinOrLose\030\r \001(\005\022\r\n\005score\030\016 \001(\005\"X\n" +
      "\026MahjongBalanceResponse\022,\n\013gameBalance\030\001" +
      " \003(\0132\027.MahjongSeatGameBalance\022\020\n\010dateTim" +
      "e\030\002 \001(\004\"\223\001\n\026MahjongSeatGameBalance\022\n\n\002ID" +
      "\030\001 \001(\r\022\021\n\twinOrLose\030\002 \001(\005\022\017\n\007huCount\030\003 \001",
      "(\r\022\021\n\tzimoCount\030\004 \001(\r\022\024\n\014dianpaoCount\030\005 " +
      "\001(\r\022\016\n\006angang\030\006 \001(\r\022\020\n\010minggang\030\007 \001(\r\"~\n" +
      "\021MahjongReplayData\022#\n\014gameInitInfo\030\001 \001(\013" +
      "2\r.GameInitInfo\022\034\n\007history\030\002 \003(\0132\013.BaseA" +
      "ction\022&\n\006result\030\003 \001(\0132\026.MahjongResultRes" +
      "ponse\"\244\001\n\014GameInitInfo\022\'\n\005seats\030\001 \003(\0132\030." +
      "MahjongSeatGameInitInfo\022\021\n\tgameCount\030\002 \001" +
      "(\r\022\021\n\tgameTimes\030\003 \001(\r\022\030\n\020surplusCardsSiz" +
      "e\030\004 \001(\r\022\016\n\006banker\030\005 \001(\r\022\014\n\004dice\030\006 \003(\r\022\r\n" +
      "\005rogue\030\007 \001(\005\";\n\027MahjongSeatGameInitInfo\022",
      "\n\n\002ID\030\001 \001(\r\022\024\n\014initialCards\030\002 \003(\005*\356\002\n\tSc" +
      "oreType\022\013\n\007PING_HU\020\000\022\013\n\007ZIMO_HU\020\001\022\016\n\nMEN" +
      "QING_HU\020\002\022\017\n\013PENGPENG_HU\020\003\022\016\n\nHUNYISE_HU" +
      "\020\004\022\017\n\013QINGYISE_HU\020\005\022\020\n\014QIXIAODUI_HU\020\006\022\020\n" +
      "\014HUNYAOJIU_HU\020\007\022\026\n\022HAOHUAQIXIAODUI_HU\020\010\022" +
      "\020\n\014SHISANYAO_HU\020\t\022\013\n\007TIAN_HU\020\n\022\t\n\005DI_HU\020" +
      "\013\022\021\n\rQUANYAOJIU_HU\020\014\022\016\n\nQUANFAN_HU\020\r\022\034\n\030" +
      "SHUANGHAOHUAQIXIAODUI_HU\020\016\022\031\n\025SANHAOHUAQ" +
      "IXIAODUI_HU\020\017\022\022\n\016SHIBALUOHAN_HU\020\020\022\t\n\005HAI" +
      "DI\020\021\022\013\n\007GANGBAO\020\022\022\016\n\nZHUANGYING\020\023\022\007\n\003FEI",
      "\020\024B\013\n\tgame.modeb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          game.mode.GameBase.getDescriptor(),
        }, assigner);
    internal_static_CardsData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_CardsData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CardsData_descriptor,
        new java.lang.String[] { "Cards", });
    internal_static_MahjongHuResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_MahjongHuResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongHuResponse_descriptor,
        new java.lang.String[] { "Cards", "ScoreType", });
    internal_static_MahjongStartResponse_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_MahjongStartResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongStartResponse_descriptor,
        new java.lang.String[] { "Banker", "Dice", "Cards", "SurplusCardsSize", "Rogue", });
    internal_static_MahjongGameInfo_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_MahjongGameInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongGameInfo_descriptor,
        new java.lang.String[] { "Seats", "GameCount", "GameTimes", "SurplusCardsSize", "Banker", "Dice", "Rogue", "LastPlayedUser", });
    internal_static_MahjongSeatGameInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_MahjongSeatGameInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongSeatGameInfo_descriptor,
        new java.lang.String[] { "ID", "InitialCards", "Cards", "CardsSize", "PengCards", "AnGangCards", "MingGangCards", "ChiCards", "PlayedCards", });
    internal_static_MahjongResultResponse_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_MahjongResultResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongResultResponse_descriptor,
        new java.lang.String[] { "UserResult", "ReadyTimeCounter", "MaCard", "DateTime", });
    internal_static_MahjongUserResult_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_MahjongUserResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongUserResult_descriptor,
        new java.lang.String[] { "ID", "CardScore", "ScoreTypes", "AnGangScore", "MingGangScore", "MaScore", "Cards", "ChiCards", "PengCards", "AnGangCards", "MingGangCards", "HuCard", "WinOrLose", "Score", });
    internal_static_MahjongBalanceResponse_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_MahjongBalanceResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongBalanceResponse_descriptor,
        new java.lang.String[] { "GameBalance", "DateTime", });
    internal_static_MahjongSeatGameBalance_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_MahjongSeatGameBalance_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongSeatGameBalance_descriptor,
        new java.lang.String[] { "ID", "WinOrLose", "HuCount", "ZimoCount", "DianpaoCount", "Angang", "Minggang", });
    internal_static_MahjongReplayData_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_MahjongReplayData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongReplayData_descriptor,
        new java.lang.String[] { "GameInitInfo", "History", "Result", });
    internal_static_GameInitInfo_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_GameInitInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_GameInitInfo_descriptor,
        new java.lang.String[] { "Seats", "GameCount", "GameTimes", "SurplusCardsSize", "Banker", "Dice", "Rogue", });
    internal_static_MahjongSeatGameInitInfo_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_MahjongSeatGameInitInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MahjongSeatGameInitInfo_descriptor,
        new java.lang.String[] { "ID", "InitialCards", });
    game.mode.GameBase.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
