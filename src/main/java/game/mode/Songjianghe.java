// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: songjianghe.proto

package game.mode;

public final class Songjianghe {
    private Songjianghe() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public interface SongjiangheMahjongIntoResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:SongjiangheMahjongIntoResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * 游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameTimes = 1;</code>
         */
        int getGameTimes();

        /**
         * <pre>
         * true正常结算 false点炮包自己
         * </pre>
         * <p>
         * <code>bool normal = 2;</code>
         */
        boolean getNormal();

        /**
         * <pre>
         * true1翻封，false 16翻
         * </pre>
         * <p>
         * <code>bool singleFan = 3;</code>
         */
        boolean getSingleFan();

        /**
         * <pre>
         * 游戏规则  低位到高位到顺序（一炮多响，旋风杠，飘，允许相同ip，代开房）
         * </pre>
         * <p>
         * <code>uint32 gameRules = 4;</code>
         */
        int getGameRules();

        /**
         * <pre>
         * 人数
         * </pre>
         * <p>
         * <code>uint32 count = 5;</code>
         */
        int getCount();
    }

    /**
     * <pre>
     * 进入房间返回 ROOM_INFO
     * </pre>
     * <p>
     * Protobuf type {@code SongjiangheMahjongIntoResponse}
     */
    public static final class SongjiangheMahjongIntoResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:SongjiangheMahjongIntoResponse)
            SongjiangheMahjongIntoResponseOrBuilder {
        // Use SongjiangheMahjongIntoResponse.newBuilder() to construct.
        private SongjiangheMahjongIntoResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private SongjiangheMahjongIntoResponse() {
            gameTimes_ = 0;
            normal_ = false;
            singleFan_ = false;
            gameRules_ = 0;
            count_ = 0;
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private SongjiangheMahjongIntoResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {

                            gameTimes_ = input.readUInt32();
                            break;
                        }
                        case 16: {

                            normal_ = input.readBool();
                            break;
                        }
                        case 24: {

                            singleFan_ = input.readBool();
                            break;
                        }
                        case 32: {

                            gameRules_ = input.readUInt32();
                            break;
                        }
                        case 40: {

                            count_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return game.mode.Songjianghe.internal_static_SongjiangheMahjongIntoResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return game.mode.Songjianghe.internal_static_SongjiangheMahjongIntoResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            game.mode.Songjianghe.SongjiangheMahjongIntoResponse.class, game.mode.Songjianghe.SongjiangheMahjongIntoResponse.Builder.class);
        }

        public static final int GAMETIMES_FIELD_NUMBER = 1;
        private int gameTimes_;

        /**
         * <pre>
         * 游戏局数
         * </pre>
         * <p>
         * <code>uint32 gameTimes = 1;</code>
         */
        public int getGameTimes() {
            return gameTimes_;
        }

        public static final int NORMAL_FIELD_NUMBER = 2;
        private boolean normal_;

        /**
         * <pre>
         * true正常结算 false点炮包自己
         * </pre>
         * <p>
         * <code>bool normal = 2;</code>
         */
        public boolean getNormal() {
            return normal_;
        }

        public static final int SINGLEFAN_FIELD_NUMBER = 3;
        private boolean singleFan_;

        /**
         * <pre>
         * true1翻封，false 16翻
         * </pre>
         * <p>
         * <code>bool singleFan = 3;</code>
         */
        public boolean getSingleFan() {
            return singleFan_;
        }

        public static final int GAMERULES_FIELD_NUMBER = 4;
        private int gameRules_;

        /**
         * <pre>
         * 游戏规则  低位到高位到顺序（一炮多响，旋风杠，飘，允许相同ip，代开房）
         * </pre>
         * <p>
         * <code>uint32 gameRules = 4;</code>
         */
        public int getGameRules() {
            return gameRules_;
        }

        public static final int COUNT_FIELD_NUMBER = 5;
        private int count_;

        /**
         * <pre>
         * 人数
         * </pre>
         * <p>
         * <code>uint32 count = 5;</code>
         */
        public int getCount() {
            return count_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (gameTimes_ != 0) {
                output.writeUInt32(1, gameTimes_);
            }
            if (normal_ != false) {
                output.writeBool(2, normal_);
            }
            if (singleFan_ != false) {
                output.writeBool(3, singleFan_);
            }
            if (gameRules_ != 0) {
                output.writeUInt32(4, gameRules_);
            }
            if (count_ != 0) {
                output.writeUInt32(5, count_);
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (gameTimes_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(1, gameTimes_);
            }
            if (normal_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(2, normal_);
            }
            if (singleFan_ != false) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(3, singleFan_);
            }
            if (gameRules_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(4, gameRules_);
            }
            if (count_ != 0) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(5, count_);
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof game.mode.Songjianghe.SongjiangheMahjongIntoResponse)) {
                return super.equals(obj);
            }
            game.mode.Songjianghe.SongjiangheMahjongIntoResponse other = (game.mode.Songjianghe.SongjiangheMahjongIntoResponse) obj;

            boolean result = true;
            result = result && (getGameTimes()
                    == other.getGameTimes());
            result = result && (getNormal()
                    == other.getNormal());
            result = result && (getSingleFan()
                    == other.getSingleFan());
            result = result && (getGameRules()
                    == other.getGameRules());
            result = result && (getCount()
                    == other.getCount());
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            hash = (37 * hash) + GAMETIMES_FIELD_NUMBER;
            hash = (53 * hash) + getGameTimes();
            hash = (37 * hash) + NORMAL_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getNormal());
            hash = (37 * hash) + SINGLEFAN_FIELD_NUMBER;
            hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                    getSingleFan());
            hash = (37 * hash) + GAMERULES_FIELD_NUMBER;
            hash = (53 * hash) + getGameRules();
            hash = (37 * hash) + COUNT_FIELD_NUMBER;
            hash = (53 * hash) + getCount();
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(game.mode.Songjianghe.SongjiangheMahjongIntoResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * 进入房间返回 ROOM_INFO
         * </pre>
         * <p>
         * Protobuf type {@code SongjiangheMahjongIntoResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:SongjiangheMahjongIntoResponse)
                game.mode.Songjianghe.SongjiangheMahjongIntoResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return game.mode.Songjianghe.internal_static_SongjiangheMahjongIntoResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return game.mode.Songjianghe.internal_static_SongjiangheMahjongIntoResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                game.mode.Songjianghe.SongjiangheMahjongIntoResponse.class, game.mode.Songjianghe.SongjiangheMahjongIntoResponse.Builder.class);
            }

            // Construct using game.mode.Songjianghe.SongjiangheMahjongIntoResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                gameTimes_ = 0;

                normal_ = false;

                singleFan_ = false;

                gameRules_ = 0;

                count_ = 0;

                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return game.mode.Songjianghe.internal_static_SongjiangheMahjongIntoResponse_descriptor;
            }

            public game.mode.Songjianghe.SongjiangheMahjongIntoResponse getDefaultInstanceForType() {
                return game.mode.Songjianghe.SongjiangheMahjongIntoResponse.getDefaultInstance();
            }

            public game.mode.Songjianghe.SongjiangheMahjongIntoResponse build() {
                game.mode.Songjianghe.SongjiangheMahjongIntoResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public game.mode.Songjianghe.SongjiangheMahjongIntoResponse buildPartial() {
                game.mode.Songjianghe.SongjiangheMahjongIntoResponse result = new game.mode.Songjianghe.SongjiangheMahjongIntoResponse(this);
                result.gameTimes_ = gameTimes_;
                result.normal_ = normal_;
                result.singleFan_ = singleFan_;
                result.gameRules_ = gameRules_;
                result.count_ = count_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof game.mode.Songjianghe.SongjiangheMahjongIntoResponse) {
                    return mergeFrom((game.mode.Songjianghe.SongjiangheMahjongIntoResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(game.mode.Songjianghe.SongjiangheMahjongIntoResponse other) {
                if (other == game.mode.Songjianghe.SongjiangheMahjongIntoResponse.getDefaultInstance()) return this;
                if (other.getGameTimes() != 0) {
                    setGameTimes(other.getGameTimes());
                }
                if (other.getNormal() != false) {
                    setNormal(other.getNormal());
                }
                if (other.getSingleFan() != false) {
                    setSingleFan(other.getSingleFan());
                }
                if (other.getGameRules() != 0) {
                    setGameRules(other.getGameRules());
                }
                if (other.getCount() != 0) {
                    setCount(other.getCount());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                game.mode.Songjianghe.SongjiangheMahjongIntoResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (game.mode.Songjianghe.SongjiangheMahjongIntoResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int gameTimes_;

            /**
             * <pre>
             * 游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 1;</code>
             */
            public int getGameTimes() {
                return gameTimes_;
            }

            /**
             * <pre>
             * 游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 1;</code>
             */
            public Builder setGameTimes(int value) {

                gameTimes_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏局数
             * </pre>
             * <p>
             * <code>uint32 gameTimes = 1;</code>
             */
            public Builder clearGameTimes() {

                gameTimes_ = 0;
                onChanged();
                return this;
            }

            private boolean normal_;

            /**
             * <pre>
             * true正常结算 false点炮包自己
             * </pre>
             * <p>
             * <code>bool normal = 2;</code>
             */
            public boolean getNormal() {
                return normal_;
            }

            /**
             * <pre>
             * true正常结算 false点炮包自己
             * </pre>
             * <p>
             * <code>bool normal = 2;</code>
             */
            public Builder setNormal(boolean value) {

                normal_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * true正常结算 false点炮包自己
             * </pre>
             * <p>
             * <code>bool normal = 2;</code>
             */
            public Builder clearNormal() {

                normal_ = false;
                onChanged();
                return this;
            }

            private boolean singleFan_;

            /**
             * <pre>
             * true1翻封，false 16翻
             * </pre>
             * <p>
             * <code>bool singleFan = 3;</code>
             */
            public boolean getSingleFan() {
                return singleFan_;
            }

            /**
             * <pre>
             * true1翻封，false 16翻
             * </pre>
             * <p>
             * <code>bool singleFan = 3;</code>
             */
            public Builder setSingleFan(boolean value) {

                singleFan_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * true1翻封，false 16翻
             * </pre>
             * <p>
             * <code>bool singleFan = 3;</code>
             */
            public Builder clearSingleFan() {

                singleFan_ = false;
                onChanged();
                return this;
            }

            private int gameRules_;

            /**
             * <pre>
             * 游戏规则  低位到高位到顺序（一炮多响，旋风杠，飘，允许相同ip，代开房）
             * </pre>
             * <p>
             * <code>uint32 gameRules = 4;</code>
             */
            public int getGameRules() {
                return gameRules_;
            }

            /**
             * <pre>
             * 游戏规则  低位到高位到顺序（一炮多响，旋风杠，飘，允许相同ip，代开房）
             * </pre>
             * <p>
             * <code>uint32 gameRules = 4;</code>
             */
            public Builder setGameRules(int value) {

                gameRules_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 游戏规则  低位到高位到顺序（一炮多响，旋风杠，飘，允许相同ip，代开房）
             * </pre>
             * <p>
             * <code>uint32 gameRules = 4;</code>
             */
            public Builder clearGameRules() {

                gameRules_ = 0;
                onChanged();
                return this;
            }

            private int count_;

            /**
             * <pre>
             * 人数
             * </pre>
             * <p>
             * <code>uint32 count = 5;</code>
             */
            public int getCount() {
                return count_;
            }

            /**
             * <pre>
             * 人数
             * </pre>
             * <p>
             * <code>uint32 count = 5;</code>
             */
            public Builder setCount(int value) {

                count_ = value;
                onChanged();
                return this;
            }

            /**
             * <pre>
             * 人数
             * </pre>
             * <p>
             * <code>uint32 count = 5;</code>
             */
            public Builder clearCount() {

                count_ = 0;
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return this;
            }


            // @@protoc_insertion_point(builder_scope:SongjiangheMahjongIntoResponse)
        }

        // @@protoc_insertion_point(class_scope:SongjiangheMahjongIntoResponse)
        private static final game.mode.Songjianghe.SongjiangheMahjongIntoResponse DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new game.mode.Songjianghe.SongjiangheMahjongIntoResponse();
        }

        public static game.mode.Songjianghe.SongjiangheMahjongIntoResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<SongjiangheMahjongIntoResponse>
                PARSER = new com.google.protobuf.AbstractParser<SongjiangheMahjongIntoResponse>() {
            public SongjiangheMahjongIntoResponse parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new SongjiangheMahjongIntoResponse(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<SongjiangheMahjongIntoResponse> parser() {
            return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<SongjiangheMahjongIntoResponse> getParserForType() {
            return PARSER;
        }

        public game.mode.Songjianghe.SongjiangheMahjongIntoResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface SongjiangheMahjongReplayResponseOrBuilder extends
            // @@protoc_insertion_point(interface_extends:SongjiangheMahjongReplayResponse)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>.MahjongGameInfo gameInfo = 1;</code>
         */
        boolean hasGameInfo();

        /**
         * <code>.MahjongGameInfo gameInfo = 1;</code>
         */
        game.mode.Mahjong.MahjongGameInfo getGameInfo();

        /**
         * <code>.MahjongGameInfo gameInfo = 1;</code>
         */
        game.mode.Mahjong.MahjongGameInfoOrBuilder getGameInfoOrBuilder();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        java.util.List<game.mode.GameBase.BaseAction>
        getHistoryList();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        game.mode.GameBase.BaseAction getHistory(int index);

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        int getHistoryCount();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        java.util.List<? extends game.mode.GameBase.BaseActionOrBuilder>
        getHistoryOrBuilderList();

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        game.mode.GameBase.BaseActionOrBuilder getHistoryOrBuilder(
                int index);

        /**
         * <code>.MahjongResultResponse result = 3;</code>
         */
        boolean hasResult();

        /**
         * <code>.MahjongResultResponse result = 3;</code>
         */
        game.mode.Mahjong.MahjongResultResponse getResult();

        /**
         * <code>.MahjongResultResponse result = 3;</code>
         */
        game.mode.Mahjong.MahjongResultResponseOrBuilder getResultOrBuilder();

        /**
         * <code>.RoomCardIntoResponse roomInfo = 4;</code>
         */
        boolean hasRoomInfo();

        /**
         * <code>.RoomCardIntoResponse roomInfo = 4;</code>
         */
        game.mode.GameBase.RoomCardIntoResponse getRoomInfo();

        /**
         * <code>.RoomCardIntoResponse roomInfo = 4;</code>
         */
        game.mode.GameBase.RoomCardIntoResponseOrBuilder getRoomInfoOrBuilder();

        /**
         * <code>.RoomSeatsInfo seatInfo = 5;</code>
         */
        boolean hasSeatInfo();

        /**
         * <code>.RoomSeatsInfo seatInfo = 5;</code>
         */
        game.mode.GameBase.RoomSeatsInfo getSeatInfo();

        /**
         * <code>.RoomSeatsInfo seatInfo = 5;</code>
         */
        game.mode.GameBase.RoomSeatsInfoOrBuilder getSeatInfoOrBuilder();
    }

    /**
     * <pre>
     * 回放    REPLAY
     * </pre>
     * <p>
     * Protobuf type {@code SongjiangheMahjongReplayResponse}
     */
    public static final class SongjiangheMahjongReplayResponse extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:SongjiangheMahjongReplayResponse)
            SongjiangheMahjongReplayResponseOrBuilder {
        // Use SongjiangheMahjongReplayResponse.newBuilder() to construct.
        private SongjiangheMahjongReplayResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private SongjiangheMahjongReplayResponse() {
            history_ = java.util.Collections.emptyList();
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private SongjiangheMahjongReplayResponse(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!input.skipField(tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            game.mode.Mahjong.MahjongGameInfo.Builder subBuilder = null;
                            if (gameInfo_ != null) {
                                subBuilder = gameInfo_.toBuilder();
                            }
                            gameInfo_ = input.readMessage(game.mode.Mahjong.MahjongGameInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(gameInfo_);
                                gameInfo_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                history_ = new java.util.ArrayList<game.mode.GameBase.BaseAction>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            history_.add(
                                    input.readMessage(game.mode.GameBase.BaseAction.parser(), extensionRegistry));
                            break;
                        }
                        case 26: {
                            game.mode.Mahjong.MahjongResultResponse.Builder subBuilder = null;
                            if (result_ != null) {
                                subBuilder = result_.toBuilder();
                            }
                            result_ = input.readMessage(game.mode.Mahjong.MahjongResultResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(result_);
                                result_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 34: {
                            game.mode.GameBase.RoomCardIntoResponse.Builder subBuilder = null;
                            if (roomInfo_ != null) {
                                subBuilder = roomInfo_.toBuilder();
                            }
                            roomInfo_ = input.readMessage(game.mode.GameBase.RoomCardIntoResponse.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(roomInfo_);
                                roomInfo_ = subBuilder.buildPartial();
                            }

                            break;
                        }
                        case 42: {
                            game.mode.GameBase.RoomSeatsInfo.Builder subBuilder = null;
                            if (seatInfo_ != null) {
                                subBuilder = seatInfo_.toBuilder();
                            }
                            seatInfo_ = input.readMessage(game.mode.GameBase.RoomSeatsInfo.parser(), extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(seatInfo_);
                                seatInfo_ = subBuilder.buildPartial();
              }

              break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    history_ = java.util.Collections.unmodifiableList(history_);
                }
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return game.mode.Songjianghe.internal_static_SongjiangheMahjongReplayResponse_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return game.mode.Songjianghe.internal_static_SongjiangheMahjongReplayResponse_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            game.mode.Songjianghe.SongjiangheMahjongReplayResponse.class, game.mode.Songjianghe.SongjiangheMahjongReplayResponse.Builder.class);
        }

        private int bitField0_;
    public static final int GAMEINFO_FIELD_NUMBER = 1;
        private game.mode.Mahjong.MahjongGameInfo gameInfo_;

        /**
         * <code>.MahjongGameInfo gameInfo = 1;</code>
         */
        public boolean hasGameInfo() {
            return gameInfo_ != null;
        }

        /**
         * <code>.MahjongGameInfo gameInfo = 1;</code>
         */
        public game.mode.Mahjong.MahjongGameInfo getGameInfo() {
            return gameInfo_ == null ? game.mode.Mahjong.MahjongGameInfo.getDefaultInstance() : gameInfo_;
        }

        /**
         * <code>.MahjongGameInfo gameInfo = 1;</code>
         */
        public game.mode.Mahjong.MahjongGameInfoOrBuilder getGameInfoOrBuilder() {
            return getGameInfo();
        }

        public static final int HISTORY_FIELD_NUMBER = 2;
        private java.util.List<game.mode.GameBase.BaseAction> history_;

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        public java.util.List<game.mode.GameBase.BaseAction> getHistoryList() {
            return history_;
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        public java.util.List<? extends game.mode.GameBase.BaseActionOrBuilder>
        getHistoryOrBuilderList() {
            return history_;
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        public int getHistoryCount() {
            return history_.size();
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        public game.mode.GameBase.BaseAction getHistory(int index) {
            return history_.get(index);
        }

        /**
         * <pre>
         * 操作记录
         * </pre>
         * <p>
         * <code>repeated .BaseAction history = 2;</code>
         */
        public game.mode.GameBase.BaseActionOrBuilder getHistoryOrBuilder(
                int index) {
            return history_.get(index);
        }

        public static final int RESULT_FIELD_NUMBER = 3;
        private game.mode.Mahjong.MahjongResultResponse result_;

        /**
         * <code>.MahjongResultResponse result = 3;</code>
         */
        public boolean hasResult() {
            return result_ != null;
        }

        /**
         * <code>.MahjongResultResponse result = 3;</code>
         */
        public game.mode.Mahjong.MahjongResultResponse getResult() {
            return result_ == null ? game.mode.Mahjong.MahjongResultResponse.getDefaultInstance() : result_;
        }

        /**
         * <code>.MahjongResultResponse result = 3;</code>
         */
        public game.mode.Mahjong.MahjongResultResponseOrBuilder getResultOrBuilder() {
            return getResult();
        }

        public static final int ROOMINFO_FIELD_NUMBER = 4;
        private game.mode.GameBase.RoomCardIntoResponse roomInfo_;

        /**
         * <code>.RoomCardIntoResponse roomInfo = 4;</code>
         */
        public boolean hasRoomInfo() {
            return roomInfo_ != null;
        }

        /**
         * <code>.RoomCardIntoResponse roomInfo = 4;</code>
         */
        public game.mode.GameBase.RoomCardIntoResponse getRoomInfo() {
            return roomInfo_ == null ? game.mode.GameBase.RoomCardIntoResponse.getDefaultInstance() : roomInfo_;
        }

        /**
         * <code>.RoomCardIntoResponse roomInfo = 4;</code>
         */
        public game.mode.GameBase.RoomCardIntoResponseOrBuilder getRoomInfoOrBuilder() {
            return getRoomInfo();
        }

        public static final int SEATINFO_FIELD_NUMBER = 5;
        private game.mode.GameBase.RoomSeatsInfo seatInfo_;

        /**
         * <code>.RoomSeatsInfo seatInfo = 5;</code>
         */
        public boolean hasSeatInfo() {
            return seatInfo_ != null;
        }

        /**
         * <code>.RoomSeatsInfo seatInfo = 5;</code>
         */
        public game.mode.GameBase.RoomSeatsInfo getSeatInfo() {
            return seatInfo_ == null ? game.mode.GameBase.RoomSeatsInfo.getDefaultInstance() : seatInfo_;
        }

        /**
         * <code>.RoomSeatsInfo seatInfo = 5;</code>
         */
        public game.mode.GameBase.RoomSeatsInfoOrBuilder getSeatInfoOrBuilder() {
            return getSeatInfo();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (gameInfo_ != null) {
                output.writeMessage(1, getGameInfo());
            }
            for (int i = 0; i < history_.size(); i++) {
                output.writeMessage(2, history_.get(i));
            }
            if (result_ != null) {
                output.writeMessage(3, getResult());
            }
            if (roomInfo_ != null) {
                output.writeMessage(4, getRoomInfo());
            }
            if (seatInfo_ != null) {
                output.writeMessage(5, getSeatInfo());
            }
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (gameInfo_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, getGameInfo());
            }
            for (int i = 0; i < history_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, history_.get(i));
            }
            if (result_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, getResult());
            }
            if (roomInfo_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(4, getRoomInfo());
            }
            if (seatInfo_ != null) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(5, getSeatInfo());
            }
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof game.mode.Songjianghe.SongjiangheMahjongReplayResponse)) {
                return super.equals(obj);
            }
            game.mode.Songjianghe.SongjiangheMahjongReplayResponse other = (game.mode.Songjianghe.SongjiangheMahjongReplayResponse) obj;

            boolean result = true;
            result = result && (hasGameInfo() == other.hasGameInfo());
            if (hasGameInfo()) {
                result = result && getGameInfo()
                        .equals(other.getGameInfo());
            }
            result = result && getHistoryList()
                    .equals(other.getHistoryList());
            result = result && (hasResult() == other.hasResult());
            if (hasResult()) {
                result = result && getResult()
                        .equals(other.getResult());
            }
            result = result && (hasRoomInfo() == other.hasRoomInfo());
            if (hasRoomInfo()) {
                result = result && getRoomInfo()
                        .equals(other.getRoomInfo());
            }
            result = result && (hasSeatInfo() == other.hasSeatInfo());
            if (hasSeatInfo()) {
                result = result && getSeatInfo()
                        .equals(other.getSeatInfo());
            }
            return result;
        }

        @java.lang.Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptor().hashCode();
            if (hasGameInfo()) {
                hash = (37 * hash) + GAMEINFO_FIELD_NUMBER;
                hash = (53 * hash) + getGameInfo().hashCode();
            }
            if (getHistoryCount() > 0) {
                hash = (37 * hash) + HISTORY_FIELD_NUMBER;
                hash = (53 * hash) + getHistoryList().hashCode();
            }
            if (hasResult()) {
                hash = (37 * hash) + RESULT_FIELD_NUMBER;
                hash = (53 * hash) + getResult().hashCode();
            }
            if (hasRoomInfo()) {
                hash = (37 * hash) + ROOMINFO_FIELD_NUMBER;
                hash = (53 * hash) + getRoomInfo().hashCode();
            }
            if (hasSeatInfo()) {
                hash = (37 * hash) + SEATINFO_FIELD_NUMBER;
                hash = (53 * hash) + getSeatInfo().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(game.mode.Songjianghe.SongjiangheMahjongReplayResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * <pre>
         * 回放    REPLAY
         * </pre>
         * <p>
         * Protobuf type {@code SongjiangheMahjongReplayResponse}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:SongjiangheMahjongReplayResponse)
                game.mode.Songjianghe.SongjiangheMahjongReplayResponseOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return game.mode.Songjianghe.internal_static_SongjiangheMahjongReplayResponse_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return game.mode.Songjianghe.internal_static_SongjiangheMahjongReplayResponse_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                game.mode.Songjianghe.SongjiangheMahjongReplayResponse.class, game.mode.Songjianghe.SongjiangheMahjongReplayResponse.Builder.class);
            }

            // Construct using game.mode.Songjianghe.SongjiangheMahjongReplayResponse.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getHistoryFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                if (gameInfoBuilder_ == null) {
                    gameInfo_ = null;
                } else {
                    gameInfo_ = null;
                    gameInfoBuilder_ = null;
                }
                if (historyBuilder_ == null) {
                    history_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                } else {
                    historyBuilder_.clear();
                }
                if (resultBuilder_ == null) {
                    result_ = null;
                } else {
                    result_ = null;
                    resultBuilder_ = null;
                }
                if (roomInfoBuilder_ == null) {
                    roomInfo_ = null;
                } else {
                    roomInfo_ = null;
                    roomInfoBuilder_ = null;
                }
                if (seatInfoBuilder_ == null) {
                    seatInfo_ = null;
                } else {
                    seatInfo_ = null;
                    seatInfoBuilder_ = null;
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return game.mode.Songjianghe.internal_static_SongjiangheMahjongReplayResponse_descriptor;
            }

            public game.mode.Songjianghe.SongjiangheMahjongReplayResponse getDefaultInstanceForType() {
                return game.mode.Songjianghe.SongjiangheMahjongReplayResponse.getDefaultInstance();
            }

            public game.mode.Songjianghe.SongjiangheMahjongReplayResponse build() {
                game.mode.Songjianghe.SongjiangheMahjongReplayResponse result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public game.mode.Songjianghe.SongjiangheMahjongReplayResponse buildPartial() {
                game.mode.Songjianghe.SongjiangheMahjongReplayResponse result = new game.mode.Songjianghe.SongjiangheMahjongReplayResponse(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (gameInfoBuilder_ == null) {
                    result.gameInfo_ = gameInfo_;
                } else {
                    result.gameInfo_ = gameInfoBuilder_.build();
                }
                if (historyBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002)) {
                        history_ = java.util.Collections.unmodifiableList(history_);
                        bitField0_ = (bitField0_ & ~0x00000002);
                    }
                    result.history_ = history_;
                } else {
                    result.history_ = historyBuilder_.build();
                }
                if (resultBuilder_ == null) {
                    result.result_ = result_;
                } else {
                    result.result_ = resultBuilder_.build();
                }
                if (roomInfoBuilder_ == null) {
                    result.roomInfo_ = roomInfo_;
                } else {
                    result.roomInfo_ = roomInfoBuilder_.build();
                }
                if (seatInfoBuilder_ == null) {
                    result.seatInfo_ = seatInfo_;
                } else {
                    result.seatInfo_ = seatInfoBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof game.mode.Songjianghe.SongjiangheMahjongReplayResponse) {
                    return mergeFrom((game.mode.Songjianghe.SongjiangheMahjongReplayResponse) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(game.mode.Songjianghe.SongjiangheMahjongReplayResponse other) {
                if (other == game.mode.Songjianghe.SongjiangheMahjongReplayResponse.getDefaultInstance()) return this;
                if (other.hasGameInfo()) {
                    mergeGameInfo(other.getGameInfo());
                }
                if (historyBuilder_ == null) {
                    if (!other.history_.isEmpty()) {
                        if (history_.isEmpty()) {
                            history_ = other.history_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                        } else {
                            ensureHistoryIsMutable();
                            history_.addAll(other.history_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.history_.isEmpty()) {
                        if (historyBuilder_.isEmpty()) {
                            historyBuilder_.dispose();
                            historyBuilder_ = null;
                            history_ = other.history_;
                            bitField0_ = (bitField0_ & ~0x00000002);
                            historyBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getHistoryFieldBuilder() : null;
                        } else {
                            historyBuilder_.addAllMessages(other.history_);
                        }
                    }
                }
                if (other.hasResult()) {
                    mergeResult(other.getResult());
                }
                if (other.hasRoomInfo()) {
                    mergeRoomInfo(other.getRoomInfo());
                }
                if (other.hasSeatInfo()) {
                    mergeSeatInfo(other.getSeatInfo());
                }
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                game.mode.Songjianghe.SongjiangheMahjongReplayResponse parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (game.mode.Songjianghe.SongjiangheMahjongReplayResponse) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private game.mode.Mahjong.MahjongGameInfo gameInfo_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.Mahjong.MahjongGameInfo, game.mode.Mahjong.MahjongGameInfo.Builder, game.mode.Mahjong.MahjongGameInfoOrBuilder> gameInfoBuilder_;

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public boolean hasGameInfo() {
                return gameInfoBuilder_ != null || gameInfo_ != null;
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public game.mode.Mahjong.MahjongGameInfo getGameInfo() {
                if (gameInfoBuilder_ == null) {
                    return gameInfo_ == null ? game.mode.Mahjong.MahjongGameInfo.getDefaultInstance() : gameInfo_;
                } else {
                    return gameInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public Builder setGameInfo(game.mode.Mahjong.MahjongGameInfo value) {
                if (gameInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    gameInfo_ = value;
                    onChanged();
                } else {
                    gameInfoBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public Builder setGameInfo(
                    game.mode.Mahjong.MahjongGameInfo.Builder builderForValue) {
                if (gameInfoBuilder_ == null) {
                    gameInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    gameInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public Builder mergeGameInfo(game.mode.Mahjong.MahjongGameInfo value) {
                if (gameInfoBuilder_ == null) {
                    if (gameInfo_ != null) {
                        gameInfo_ =
                                game.mode.Mahjong.MahjongGameInfo.newBuilder(gameInfo_).mergeFrom(value).buildPartial();
                    } else {
                        gameInfo_ = value;
                    }
                    onChanged();
                } else {
                    gameInfoBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public Builder clearGameInfo() {
                if (gameInfoBuilder_ == null) {
                    gameInfo_ = null;
                    onChanged();
                } else {
                    gameInfo_ = null;
                    gameInfoBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public game.mode.Mahjong.MahjongGameInfo.Builder getGameInfoBuilder() {

                onChanged();
                return getGameInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            public game.mode.Mahjong.MahjongGameInfoOrBuilder getGameInfoOrBuilder() {
                if (gameInfoBuilder_ != null) {
                    return gameInfoBuilder_.getMessageOrBuilder();
                } else {
                    return gameInfo_ == null ?
                            game.mode.Mahjong.MahjongGameInfo.getDefaultInstance() : gameInfo_;
                }
            }

            /**
             * <code>.MahjongGameInfo gameInfo = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.Mahjong.MahjongGameInfo, game.mode.Mahjong.MahjongGameInfo.Builder, game.mode.Mahjong.MahjongGameInfoOrBuilder>
            getGameInfoFieldBuilder() {
                if (gameInfoBuilder_ == null) {
                    gameInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            game.mode.Mahjong.MahjongGameInfo, game.mode.Mahjong.MahjongGameInfo.Builder, game.mode.Mahjong.MahjongGameInfoOrBuilder>(
                            getGameInfo(),
                            getParentForChildren(),
                            isClean());
                    gameInfo_ = null;
                }
                return gameInfoBuilder_;
            }

            private java.util.List<game.mode.GameBase.BaseAction> history_ =
                    java.util.Collections.emptyList();

            private void ensureHistoryIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    history_ = new java.util.ArrayList<game.mode.GameBase.BaseAction>(history_);
                    bitField0_ |= 0x00000002;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    game.mode.GameBase.BaseAction, game.mode.GameBase.BaseAction.Builder, game.mode.GameBase.BaseActionOrBuilder> historyBuilder_;

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public java.util.List<game.mode.GameBase.BaseAction> getHistoryList() {
                if (historyBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(history_);
                } else {
                    return historyBuilder_.getMessageList();
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public int getHistoryCount() {
                if (historyBuilder_ == null) {
                    return history_.size();
                } else {
                    return historyBuilder_.getCount();
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public game.mode.GameBase.BaseAction getHistory(int index) {
                if (historyBuilder_ == null) {
                    return history_.get(index);
                } else {
                    return historyBuilder_.getMessage(index);
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder setHistory(
                    int index, game.mode.GameBase.BaseAction value) {
                if (historyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureHistoryIsMutable();
                    history_.set(index, value);
                    onChanged();
                } else {
                    historyBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder setHistory(
                    int index, game.mode.GameBase.BaseAction.Builder builderForValue) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    historyBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder addHistory(game.mode.GameBase.BaseAction value) {
                if (historyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureHistoryIsMutable();
                    history_.add(value);
                    onChanged();
                } else {
                    historyBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder addHistory(
                    int index, game.mode.GameBase.BaseAction value) {
                if (historyBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureHistoryIsMutable();
                    history_.add(index, value);
                    onChanged();
                } else {
                    historyBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder addHistory(
                    game.mode.GameBase.BaseAction.Builder builderForValue) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.add(builderForValue.build());
                    onChanged();
                } else {
                    historyBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder addHistory(
                    int index, game.mode.GameBase.BaseAction.Builder builderForValue) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    historyBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder addAllHistory(
                    java.lang.Iterable<? extends game.mode.GameBase.BaseAction> values) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, history_);
                    onChanged();
                } else {
                    historyBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder clearHistory() {
                if (historyBuilder_ == null) {
                    history_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000002);
                    onChanged();
                } else {
                    historyBuilder_.clear();
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public Builder removeHistory(int index) {
                if (historyBuilder_ == null) {
                    ensureHistoryIsMutable();
                    history_.remove(index);
                    onChanged();
                } else {
                    historyBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public game.mode.GameBase.BaseAction.Builder getHistoryBuilder(
                    int index) {
                return getHistoryFieldBuilder().getBuilder(index);
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public game.mode.GameBase.BaseActionOrBuilder getHistoryOrBuilder(
                    int index) {
                if (historyBuilder_ == null) {
                    return history_.get(index);
                } else {
                    return historyBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public java.util.List<? extends game.mode.GameBase.BaseActionOrBuilder>
            getHistoryOrBuilderList() {
                if (historyBuilder_ != null) {
                    return historyBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(history_);
                }
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public game.mode.GameBase.BaseAction.Builder addHistoryBuilder() {
                return getHistoryFieldBuilder().addBuilder(
                        game.mode.GameBase.BaseAction.getDefaultInstance());
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public game.mode.GameBase.BaseAction.Builder addHistoryBuilder(
                    int index) {
                return getHistoryFieldBuilder().addBuilder(
                        index, game.mode.GameBase.BaseAction.getDefaultInstance());
            }

            /**
             * <pre>
             *操作记录
             * </pre>
             *
             * <code>repeated .BaseAction history = 2;</code>
             */
            public java.util.List<game.mode.GameBase.BaseAction.Builder>
            getHistoryBuilderList() {
                return getHistoryFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilderV3<
                    game.mode.GameBase.BaseAction, game.mode.GameBase.BaseAction.Builder, game.mode.GameBase.BaseActionOrBuilder>
            getHistoryFieldBuilder() {
                if (historyBuilder_ == null) {
                    historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            game.mode.GameBase.BaseAction, game.mode.GameBase.BaseAction.Builder, game.mode.GameBase.BaseActionOrBuilder>(
                            history_,
                            ((bitField0_ & 0x00000002) == 0x00000002),
                            getParentForChildren(),
                            isClean());
                    history_ = null;
                }
                return historyBuilder_;
            }

            private game.mode.Mahjong.MahjongResultResponse result_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.Mahjong.MahjongResultResponse, game.mode.Mahjong.MahjongResultResponse.Builder, game.mode.Mahjong.MahjongResultResponseOrBuilder> resultBuilder_;

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public boolean hasResult() {
                return resultBuilder_ != null || result_ != null;
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public game.mode.Mahjong.MahjongResultResponse getResult() {
                if (resultBuilder_ == null) {
                    return result_ == null ? game.mode.Mahjong.MahjongResultResponse.getDefaultInstance() : result_;
                } else {
                    return resultBuilder_.getMessage();
                }
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public Builder setResult(game.mode.Mahjong.MahjongResultResponse value) {
                if (resultBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    result_ = value;
                    onChanged();
                } else {
                    resultBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public Builder setResult(
                    game.mode.Mahjong.MahjongResultResponse.Builder builderForValue) {
                if (resultBuilder_ == null) {
                    result_ = builderForValue.build();
                    onChanged();
                } else {
                    resultBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public Builder mergeResult(game.mode.Mahjong.MahjongResultResponse value) {
                if (resultBuilder_ == null) {
                    if (result_ != null) {
                        result_ =
                                game.mode.Mahjong.MahjongResultResponse.newBuilder(result_).mergeFrom(value).buildPartial();
                    } else {
                        result_ = value;
                    }
                    onChanged();
                } else {
                    resultBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public Builder clearResult() {
                if (resultBuilder_ == null) {
                    result_ = null;
                    onChanged();
                } else {
                    result_ = null;
                    resultBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public game.mode.Mahjong.MahjongResultResponse.Builder getResultBuilder() {

                onChanged();
                return getResultFieldBuilder().getBuilder();
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            public game.mode.Mahjong.MahjongResultResponseOrBuilder getResultOrBuilder() {
                if (resultBuilder_ != null) {
                    return resultBuilder_.getMessageOrBuilder();
                } else {
                    return result_ == null ?
                            game.mode.Mahjong.MahjongResultResponse.getDefaultInstance() : result_;
                }
            }

            /**
             * <code>.MahjongResultResponse result = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.Mahjong.MahjongResultResponse, game.mode.Mahjong.MahjongResultResponse.Builder, game.mode.Mahjong.MahjongResultResponseOrBuilder>
            getResultFieldBuilder() {
                if (resultBuilder_ == null) {
                    resultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            game.mode.Mahjong.MahjongResultResponse, game.mode.Mahjong.MahjongResultResponse.Builder, game.mode.Mahjong.MahjongResultResponseOrBuilder>(
                            getResult(),
                            getParentForChildren(),
                            isClean());
                    result_ = null;
                }
                return resultBuilder_;
            }

            private game.mode.GameBase.RoomCardIntoResponse roomInfo_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.GameBase.RoomCardIntoResponse, game.mode.GameBase.RoomCardIntoResponse.Builder, game.mode.GameBase.RoomCardIntoResponseOrBuilder> roomInfoBuilder_;

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public boolean hasRoomInfo() {
                return roomInfoBuilder_ != null || roomInfo_ != null;
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public game.mode.GameBase.RoomCardIntoResponse getRoomInfo() {
                if (roomInfoBuilder_ == null) {
                    return roomInfo_ == null ? game.mode.GameBase.RoomCardIntoResponse.getDefaultInstance() : roomInfo_;
                } else {
                    return roomInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public Builder setRoomInfo(game.mode.GameBase.RoomCardIntoResponse value) {
                if (roomInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    roomInfo_ = value;
                    onChanged();
                } else {
                    roomInfoBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public Builder setRoomInfo(
                    game.mode.GameBase.RoomCardIntoResponse.Builder builderForValue) {
                if (roomInfoBuilder_ == null) {
                    roomInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    roomInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public Builder mergeRoomInfo(game.mode.GameBase.RoomCardIntoResponse value) {
                if (roomInfoBuilder_ == null) {
                    if (roomInfo_ != null) {
                        roomInfo_ =
                                game.mode.GameBase.RoomCardIntoResponse.newBuilder(roomInfo_).mergeFrom(value).buildPartial();
                    } else {
                        roomInfo_ = value;
                    }
                    onChanged();
                } else {
                    roomInfoBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public Builder clearRoomInfo() {
                if (roomInfoBuilder_ == null) {
                    roomInfo_ = null;
                    onChanged();
                } else {
                    roomInfo_ = null;
                    roomInfoBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public game.mode.GameBase.RoomCardIntoResponse.Builder getRoomInfoBuilder() {

                onChanged();
                return getRoomInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            public game.mode.GameBase.RoomCardIntoResponseOrBuilder getRoomInfoOrBuilder() {
                if (roomInfoBuilder_ != null) {
                    return roomInfoBuilder_.getMessageOrBuilder();
                } else {
                    return roomInfo_ == null ?
                            game.mode.GameBase.RoomCardIntoResponse.getDefaultInstance() : roomInfo_;
                }
            }

            /**
             * <code>.RoomCardIntoResponse roomInfo = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.GameBase.RoomCardIntoResponse, game.mode.GameBase.RoomCardIntoResponse.Builder, game.mode.GameBase.RoomCardIntoResponseOrBuilder>
            getRoomInfoFieldBuilder() {
                if (roomInfoBuilder_ == null) {
                    roomInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                            game.mode.GameBase.RoomCardIntoResponse, game.mode.GameBase.RoomCardIntoResponse.Builder, game.mode.GameBase.RoomCardIntoResponseOrBuilder>(
                            getRoomInfo(),
                            getParentForChildren(),
                            isClean());
                    roomInfo_ = null;
                }
                return roomInfoBuilder_;
            }

            private game.mode.GameBase.RoomSeatsInfo seatInfo_ = null;
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.GameBase.RoomSeatsInfo, game.mode.GameBase.RoomSeatsInfo.Builder, game.mode.GameBase.RoomSeatsInfoOrBuilder> seatInfoBuilder_;

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public boolean hasSeatInfo() {
                return seatInfoBuilder_ != null || seatInfo_ != null;
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public game.mode.GameBase.RoomSeatsInfo getSeatInfo() {
                if (seatInfoBuilder_ == null) {
                    return seatInfo_ == null ? game.mode.GameBase.RoomSeatsInfo.getDefaultInstance() : seatInfo_;
                } else {
                    return seatInfoBuilder_.getMessage();
                }
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public Builder setSeatInfo(game.mode.GameBase.RoomSeatsInfo value) {
                if (seatInfoBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    seatInfo_ = value;
                    onChanged();
                } else {
                    seatInfoBuilder_.setMessage(value);
                }

                return this;
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public Builder setSeatInfo(
                    game.mode.GameBase.RoomSeatsInfo.Builder builderForValue) {
                if (seatInfoBuilder_ == null) {
                    seatInfo_ = builderForValue.build();
                    onChanged();
                } else {
                    seatInfoBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public Builder mergeSeatInfo(game.mode.GameBase.RoomSeatsInfo value) {
                if (seatInfoBuilder_ == null) {
                    if (seatInfo_ != null) {
                        seatInfo_ =
                                game.mode.GameBase.RoomSeatsInfo.newBuilder(seatInfo_).mergeFrom(value).buildPartial();
                    } else {
                        seatInfo_ = value;
                    }
                    onChanged();
                } else {
                    seatInfoBuilder_.mergeFrom(value);
                }

                return this;
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public Builder clearSeatInfo() {
                if (seatInfoBuilder_ == null) {
                    seatInfo_ = null;
                    onChanged();
                } else {
                    seatInfo_ = null;
                    seatInfoBuilder_ = null;
                }

                return this;
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public game.mode.GameBase.RoomSeatsInfo.Builder getSeatInfoBuilder() {

                onChanged();
                return getSeatInfoFieldBuilder().getBuilder();
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            public game.mode.GameBase.RoomSeatsInfoOrBuilder getSeatInfoOrBuilder() {
                if (seatInfoBuilder_ != null) {
                    return seatInfoBuilder_.getMessageOrBuilder();
                } else {
                    return seatInfo_ == null ?
                            game.mode.GameBase.RoomSeatsInfo.getDefaultInstance() : seatInfo_;
                }
            }

            /**
             * <code>.RoomSeatsInfo seatInfo = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilderV3<
                    game.mode.GameBase.RoomSeatsInfo, game.mode.GameBase.RoomSeatsInfo.Builder, game.mode.GameBase.RoomSeatsInfoOrBuilder>
            getSeatInfoFieldBuilder() {
        if (seatInfoBuilder_ == null) {
          seatInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              game.mode.GameBase.RoomSeatsInfo, game.mode.GameBase.RoomSeatsInfo.Builder, game.mode.GameBase.RoomSeatsInfoOrBuilder>(
                  getSeatInfo(),
                  getParentForChildren(),
                  isClean());
          seatInfo_ = null;
        }
        return seatInfoBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
      }


            // @@protoc_insertion_point(builder_scope:SongjiangheMahjongReplayResponse)
    }

    // @@protoc_insertion_point(class_scope:SongjiangheMahjongReplayResponse)
    private static final game.mode.Songjianghe.SongjiangheMahjongReplayResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new game.mode.Songjianghe.SongjiangheMahjongReplayResponse();
    }

    public static game.mode.Songjianghe.SongjiangheMahjongReplayResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SongjiangheMahjongReplayResponse>
        PARSER = new com.google.protobuf.AbstractParser<SongjiangheMahjongReplayResponse>() {
      public SongjiangheMahjongReplayResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new SongjiangheMahjongReplayResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SongjiangheMahjongReplayResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SongjiangheMahjongReplayResponse> getParserForType() {
      return PARSER;
    }

    public game.mode.Songjianghe.SongjiangheMahjongReplayResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SongjiangheMahjongIntoResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SongjiangheMahjongIntoResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SongjiangheMahjongReplayResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SongjiangheMahjongReplayResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021songjianghe.proto\032\016gameBase.proto\032\rmah" +
      "jong.proto\"x\n\036SongjiangheMahjongIntoResp" +
      "onse\022\021\n\tgameTimes\030\001 \001(\r\022\016\n\006normal\030\002 \001(\010\022" +
      "\021\n\tsingleFan\030\003 \001(\010\022\021\n\tgameRules\030\004 \001(\r\022\r\n" +
      "\005count\030\005 \001(\r\"\327\001\n SongjiangheMahjongRepla" +
      "yResponse\022\"\n\010gameInfo\030\001 \001(\0132\020.MahjongGam" +
      "eInfo\022\034\n\007history\030\002 \003(\0132\013.BaseAction\022&\n\006r" +
      "esult\030\003 \001(\0132\026.MahjongResultResponse\022\'\n\010r" +
      "oomInfo\030\004 \001(\0132\025.RoomCardIntoResponse\022 \n\010" +
      "seatInfo\030\005 \001(\0132\016.RoomSeatsInfoB\013\n\tgame.m",
      "odeb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          game.mode.GameBase.getDescriptor(),
          game.mode.Mahjong.getDescriptor(),
        }, assigner);
    internal_static_SongjiangheMahjongIntoResponse_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SongjiangheMahjongIntoResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SongjiangheMahjongIntoResponse_descriptor,
        new java.lang.String[] { "GameTimes", "Normal", "SingleFan", "GameRules", "Count", });
    internal_static_SongjiangheMahjongReplayResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_SongjiangheMahjongReplayResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SongjiangheMahjongReplayResponse_descriptor,
        new java.lang.String[] { "GameInfo", "History", "Result", "RoomInfo", "SeatInfo", });
    game.mode.GameBase.getDescriptor();
    game.mode.Mahjong.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
